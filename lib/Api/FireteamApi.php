<?php
/**
 * FireteamApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * FireteamApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FireteamApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation fireteamGetActivePrivateClanFireteamCount
     *
     * @param  int $group_id The group id of the clan. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20023
     */
    public function fireteamGetActivePrivateClanFireteamCount($group_id)
    {
        list($response) = $this->fireteamGetActivePrivateClanFireteamCountWithHttpInfo($group_id);
        return $response;
    }

    /**
     * Operation fireteamGetActivePrivateClanFireteamCountWithHttpInfo
     *
     * @param  int $group_id The group id of the clan. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20023, HTTP status code, HTTP response headers (array of strings)
     */
    public function fireteamGetActivePrivateClanFireteamCountWithHttpInfo($group_id)
    {
        $request = $this->fireteamGetActivePrivateClanFireteamCountRequest($group_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20023' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20023', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20023';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20023',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fireteamGetActivePrivateClanFireteamCountAsync
     *
     * 
     *
     * @param  int $group_id The group id of the clan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fireteamGetActivePrivateClanFireteamCountAsync($group_id)
    {
        return $this->fireteamGetActivePrivateClanFireteamCountAsyncWithHttpInfo($group_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fireteamGetActivePrivateClanFireteamCountAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $group_id The group id of the clan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fireteamGetActivePrivateClanFireteamCountAsyncWithHttpInfo($group_id)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20023';
        $request = $this->fireteamGetActivePrivateClanFireteamCountRequest($group_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fireteamGetActivePrivateClanFireteamCount'
     *
     * @param  int $group_id The group id of the clan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fireteamGetActivePrivateClanFireteamCountRequest($group_id)
    {
        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling fireteamGetActivePrivateClanFireteamCount'
            );
        }

        $resourcePath = '/Fireteam/Clan/{groupId}/ActiveCount/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fireteamGetAvailableClanFireteams
     *
     * @param  int $activity_type The activity type to filter by. (required)
     * @param  int $date_range The date range to grab available fireteams. (required)
     * @param  int $group_id The group id of the clan. (required)
     * @param  int $page Zero based page (required)
     * @param  int $platform The platform filter. (required)
     * @param  int $public_only Determines public/private filtering. (required)
     * @param  int $slot_filter Filters based on available slots (required)
     * @param  string $lang_filter An optional language filter. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20065
     */
    public function fireteamGetAvailableClanFireteams($activity_type, $date_range, $group_id, $page, $platform, $public_only, $slot_filter, $lang_filter = null)
    {
        list($response) = $this->fireteamGetAvailableClanFireteamsWithHttpInfo($activity_type, $date_range, $group_id, $page, $platform, $public_only, $slot_filter, $lang_filter);
        return $response;
    }

    /**
     * Operation fireteamGetAvailableClanFireteamsWithHttpInfo
     *
     * @param  int $activity_type The activity type to filter by. (required)
     * @param  int $date_range The date range to grab available fireteams. (required)
     * @param  int $group_id The group id of the clan. (required)
     * @param  int $page Zero based page (required)
     * @param  int $platform The platform filter. (required)
     * @param  int $public_only Determines public/private filtering. (required)
     * @param  int $slot_filter Filters based on available slots (required)
     * @param  string $lang_filter An optional language filter. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20065, HTTP status code, HTTP response headers (array of strings)
     */
    public function fireteamGetAvailableClanFireteamsWithHttpInfo($activity_type, $date_range, $group_id, $page, $platform, $public_only, $slot_filter, $lang_filter = null)
    {
        $request = $this->fireteamGetAvailableClanFireteamsRequest($activity_type, $date_range, $group_id, $page, $platform, $public_only, $slot_filter, $lang_filter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20065' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20065', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20065';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20065',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fireteamGetAvailableClanFireteamsAsync
     *
     * 
     *
     * @param  int $activity_type The activity type to filter by. (required)
     * @param  int $date_range The date range to grab available fireteams. (required)
     * @param  int $group_id The group id of the clan. (required)
     * @param  int $page Zero based page (required)
     * @param  int $platform The platform filter. (required)
     * @param  int $public_only Determines public/private filtering. (required)
     * @param  int $slot_filter Filters based on available slots (required)
     * @param  string $lang_filter An optional language filter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fireteamGetAvailableClanFireteamsAsync($activity_type, $date_range, $group_id, $page, $platform, $public_only, $slot_filter, $lang_filter = null)
    {
        return $this->fireteamGetAvailableClanFireteamsAsyncWithHttpInfo($activity_type, $date_range, $group_id, $page, $platform, $public_only, $slot_filter, $lang_filter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fireteamGetAvailableClanFireteamsAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $activity_type The activity type to filter by. (required)
     * @param  int $date_range The date range to grab available fireteams. (required)
     * @param  int $group_id The group id of the clan. (required)
     * @param  int $page Zero based page (required)
     * @param  int $platform The platform filter. (required)
     * @param  int $public_only Determines public/private filtering. (required)
     * @param  int $slot_filter Filters based on available slots (required)
     * @param  string $lang_filter An optional language filter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fireteamGetAvailableClanFireteamsAsyncWithHttpInfo($activity_type, $date_range, $group_id, $page, $platform, $public_only, $slot_filter, $lang_filter = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20065';
        $request = $this->fireteamGetAvailableClanFireteamsRequest($activity_type, $date_range, $group_id, $page, $platform, $public_only, $slot_filter, $lang_filter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fireteamGetAvailableClanFireteams'
     *
     * @param  int $activity_type The activity type to filter by. (required)
     * @param  int $date_range The date range to grab available fireteams. (required)
     * @param  int $group_id The group id of the clan. (required)
     * @param  int $page Zero based page (required)
     * @param  int $platform The platform filter. (required)
     * @param  int $public_only Determines public/private filtering. (required)
     * @param  int $slot_filter Filters based on available slots (required)
     * @param  string $lang_filter An optional language filter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fireteamGetAvailableClanFireteamsRequest($activity_type, $date_range, $group_id, $page, $platform, $public_only, $slot_filter, $lang_filter = null)
    {
        // verify the required parameter 'activity_type' is set
        if ($activity_type === null || (is_array($activity_type) && count($activity_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $activity_type when calling fireteamGetAvailableClanFireteams'
            );
        }
        // verify the required parameter 'date_range' is set
        if ($date_range === null || (is_array($date_range) && count($date_range) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_range when calling fireteamGetAvailableClanFireteams'
            );
        }
        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling fireteamGetAvailableClanFireteams'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling fireteamGetAvailableClanFireteams'
            );
        }
        // verify the required parameter 'platform' is set
        if ($platform === null || (is_array($platform) && count($platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling fireteamGetAvailableClanFireteams'
            );
        }
        // verify the required parameter 'public_only' is set
        if ($public_only === null || (is_array($public_only) && count($public_only) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_only when calling fireteamGetAvailableClanFireteams'
            );
        }
        // verify the required parameter 'slot_filter' is set
        if ($slot_filter === null || (is_array($slot_filter) && count($slot_filter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slot_filter when calling fireteamGetAvailableClanFireteams'
            );
        }

        $resourcePath = '/Fireteam/Clan/{groupId}/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{publicOnly}/{page}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($lang_filter)) {
            $lang_filter = ObjectSerializer::serializeCollection($lang_filter, '', true);
        }
        if ($lang_filter !== null) {
            $queryParams['langFilter'] = $lang_filter;
        }


        // path params
        if ($activity_type !== null) {
            $resourcePath = str_replace(
                '{' . 'activityType' . '}',
                ObjectSerializer::toPathValue($activity_type),
                $resourcePath
            );
        }
        // path params
        if ($date_range !== null) {
            $resourcePath = str_replace(
                '{' . 'dateRange' . '}',
                ObjectSerializer::toPathValue($date_range),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }
        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                '{' . 'page' . '}',
                ObjectSerializer::toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($platform !== null) {
            $resourcePath = str_replace(
                '{' . 'platform' . '}',
                ObjectSerializer::toPathValue($platform),
                $resourcePath
            );
        }
        // path params
        if ($public_only !== null) {
            $resourcePath = str_replace(
                '{' . 'publicOnly' . '}',
                ObjectSerializer::toPathValue($public_only),
                $resourcePath
            );
        }
        // path params
        if ($slot_filter !== null) {
            $resourcePath = str_replace(
                '{' . 'slotFilter' . '}',
                ObjectSerializer::toPathValue($slot_filter),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fireteamGetClanFireteam
     *
     * @param  int $fireteam_id The unique id of the fireteam. (required)
     * @param  int $group_id The group id of the clan. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20067
     */
    public function fireteamGetClanFireteam($fireteam_id, $group_id)
    {
        list($response) = $this->fireteamGetClanFireteamWithHttpInfo($fireteam_id, $group_id);
        return $response;
    }

    /**
     * Operation fireteamGetClanFireteamWithHttpInfo
     *
     * @param  int $fireteam_id The unique id of the fireteam. (required)
     * @param  int $group_id The group id of the clan. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20067, HTTP status code, HTTP response headers (array of strings)
     */
    public function fireteamGetClanFireteamWithHttpInfo($fireteam_id, $group_id)
    {
        $request = $this->fireteamGetClanFireteamRequest($fireteam_id, $group_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20067' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20067', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20067';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20067',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fireteamGetClanFireteamAsync
     *
     * 
     *
     * @param  int $fireteam_id The unique id of the fireteam. (required)
     * @param  int $group_id The group id of the clan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fireteamGetClanFireteamAsync($fireteam_id, $group_id)
    {
        return $this->fireteamGetClanFireteamAsyncWithHttpInfo($fireteam_id, $group_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fireteamGetClanFireteamAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $fireteam_id The unique id of the fireteam. (required)
     * @param  int $group_id The group id of the clan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fireteamGetClanFireteamAsyncWithHttpInfo($fireteam_id, $group_id)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20067';
        $request = $this->fireteamGetClanFireteamRequest($fireteam_id, $group_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fireteamGetClanFireteam'
     *
     * @param  int $fireteam_id The unique id of the fireteam. (required)
     * @param  int $group_id The group id of the clan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fireteamGetClanFireteamRequest($fireteam_id, $group_id)
    {
        // verify the required parameter 'fireteam_id' is set
        if ($fireteam_id === null || (is_array($fireteam_id) && count($fireteam_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fireteam_id when calling fireteamGetClanFireteam'
            );
        }
        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling fireteamGetClanFireteam'
            );
        }

        $resourcePath = '/Fireteam/Clan/{groupId}/Summary/{fireteamId}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($fireteam_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fireteamId' . '}',
                ObjectSerializer::toPathValue($fireteam_id),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fireteamGetMyClanFireteams
     *
     * @param  int $group_id The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true). (required)
     * @param  bool $include_closed If true, return fireteams that have been closed. (required)
     * @param  int $page Deprecated parameter, ignored. (required)
     * @param  int $platform The platform filter. (required)
     * @param  bool $group_filter If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)
     * @param  string $lang_filter An optional language filter. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20066
     */
    public function fireteamGetMyClanFireteams($group_id, $include_closed, $page, $platform, $group_filter = null, $lang_filter = null)
    {
        list($response) = $this->fireteamGetMyClanFireteamsWithHttpInfo($group_id, $include_closed, $page, $platform, $group_filter, $lang_filter);
        return $response;
    }

    /**
     * Operation fireteamGetMyClanFireteamsWithHttpInfo
     *
     * @param  int $group_id The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true). (required)
     * @param  bool $include_closed If true, return fireteams that have been closed. (required)
     * @param  int $page Deprecated parameter, ignored. (required)
     * @param  int $platform The platform filter. (required)
     * @param  bool $group_filter If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)
     * @param  string $lang_filter An optional language filter. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20066, HTTP status code, HTTP response headers (array of strings)
     */
    public function fireteamGetMyClanFireteamsWithHttpInfo($group_id, $include_closed, $page, $platform, $group_filter = null, $lang_filter = null)
    {
        $request = $this->fireteamGetMyClanFireteamsRequest($group_id, $include_closed, $page, $platform, $group_filter, $lang_filter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20066' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20066', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20066';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20066',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fireteamGetMyClanFireteamsAsync
     *
     * 
     *
     * @param  int $group_id The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true). (required)
     * @param  bool $include_closed If true, return fireteams that have been closed. (required)
     * @param  int $page Deprecated parameter, ignored. (required)
     * @param  int $platform The platform filter. (required)
     * @param  bool $group_filter If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)
     * @param  string $lang_filter An optional language filter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fireteamGetMyClanFireteamsAsync($group_id, $include_closed, $page, $platform, $group_filter = null, $lang_filter = null)
    {
        return $this->fireteamGetMyClanFireteamsAsyncWithHttpInfo($group_id, $include_closed, $page, $platform, $group_filter, $lang_filter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fireteamGetMyClanFireteamsAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $group_id The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true). (required)
     * @param  bool $include_closed If true, return fireteams that have been closed. (required)
     * @param  int $page Deprecated parameter, ignored. (required)
     * @param  int $platform The platform filter. (required)
     * @param  bool $group_filter If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)
     * @param  string $lang_filter An optional language filter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fireteamGetMyClanFireteamsAsyncWithHttpInfo($group_id, $include_closed, $page, $platform, $group_filter = null, $lang_filter = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20066';
        $request = $this->fireteamGetMyClanFireteamsRequest($group_id, $include_closed, $page, $platform, $group_filter, $lang_filter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fireteamGetMyClanFireteams'
     *
     * @param  int $group_id The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true). (required)
     * @param  bool $include_closed If true, return fireteams that have been closed. (required)
     * @param  int $page Deprecated parameter, ignored. (required)
     * @param  int $platform The platform filter. (required)
     * @param  bool $group_filter If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)
     * @param  string $lang_filter An optional language filter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fireteamGetMyClanFireteamsRequest($group_id, $include_closed, $page, $platform, $group_filter = null, $lang_filter = null)
    {
        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling fireteamGetMyClanFireteams'
            );
        }
        // verify the required parameter 'include_closed' is set
        if ($include_closed === null || (is_array($include_closed) && count($include_closed) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_closed when calling fireteamGetMyClanFireteams'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling fireteamGetMyClanFireteams'
            );
        }
        // verify the required parameter 'platform' is set
        if ($platform === null || (is_array($platform) && count($platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling fireteamGetMyClanFireteams'
            );
        }

        $resourcePath = '/Fireteam/Clan/{groupId}/My/{platform}/{includeClosed}/{page}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($group_filter)) {
            $group_filter = ObjectSerializer::serializeCollection($group_filter, '', true);
        }
        if ($group_filter !== null) {
            $queryParams['groupFilter'] = $group_filter;
        }
        // query params
        if (is_array($lang_filter)) {
            $lang_filter = ObjectSerializer::serializeCollection($lang_filter, '', true);
        }
        if ($lang_filter !== null) {
            $queryParams['langFilter'] = $lang_filter;
        }


        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }
        // path params
        if ($include_closed !== null) {
            $resourcePath = str_replace(
                '{' . 'includeClosed' . '}',
                ObjectSerializer::toPathValue($include_closed),
                $resourcePath
            );
        }
        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                '{' . 'page' . '}',
                ObjectSerializer::toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($platform !== null) {
            $resourcePath = str_replace(
                '{' . 'platform' . '}',
                ObjectSerializer::toPathValue($platform),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fireteamSearchPublicAvailableClanFireteams
     *
     * @param  int $activity_type The activity type to filter by. (required)
     * @param  int $date_range The date range to grab available fireteams. (required)
     * @param  int $page Zero based page (required)
     * @param  int $platform The platform filter. (required)
     * @param  int $slot_filter Filters based on available slots (required)
     * @param  string $lang_filter An optional language filter. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20065
     */
    public function fireteamSearchPublicAvailableClanFireteams($activity_type, $date_range, $page, $platform, $slot_filter, $lang_filter = null)
    {
        list($response) = $this->fireteamSearchPublicAvailableClanFireteamsWithHttpInfo($activity_type, $date_range, $page, $platform, $slot_filter, $lang_filter);
        return $response;
    }

    /**
     * Operation fireteamSearchPublicAvailableClanFireteamsWithHttpInfo
     *
     * @param  int $activity_type The activity type to filter by. (required)
     * @param  int $date_range The date range to grab available fireteams. (required)
     * @param  int $page Zero based page (required)
     * @param  int $platform The platform filter. (required)
     * @param  int $slot_filter Filters based on available slots (required)
     * @param  string $lang_filter An optional language filter. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20065, HTTP status code, HTTP response headers (array of strings)
     */
    public function fireteamSearchPublicAvailableClanFireteamsWithHttpInfo($activity_type, $date_range, $page, $platform, $slot_filter, $lang_filter = null)
    {
        $request = $this->fireteamSearchPublicAvailableClanFireteamsRequest($activity_type, $date_range, $page, $platform, $slot_filter, $lang_filter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20065' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20065', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20065';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20065',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fireteamSearchPublicAvailableClanFireteamsAsync
     *
     * 
     *
     * @param  int $activity_type The activity type to filter by. (required)
     * @param  int $date_range The date range to grab available fireteams. (required)
     * @param  int $page Zero based page (required)
     * @param  int $platform The platform filter. (required)
     * @param  int $slot_filter Filters based on available slots (required)
     * @param  string $lang_filter An optional language filter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fireteamSearchPublicAvailableClanFireteamsAsync($activity_type, $date_range, $page, $platform, $slot_filter, $lang_filter = null)
    {
        return $this->fireteamSearchPublicAvailableClanFireteamsAsyncWithHttpInfo($activity_type, $date_range, $page, $platform, $slot_filter, $lang_filter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fireteamSearchPublicAvailableClanFireteamsAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $activity_type The activity type to filter by. (required)
     * @param  int $date_range The date range to grab available fireteams. (required)
     * @param  int $page Zero based page (required)
     * @param  int $platform The platform filter. (required)
     * @param  int $slot_filter Filters based on available slots (required)
     * @param  string $lang_filter An optional language filter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fireteamSearchPublicAvailableClanFireteamsAsyncWithHttpInfo($activity_type, $date_range, $page, $platform, $slot_filter, $lang_filter = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20065';
        $request = $this->fireteamSearchPublicAvailableClanFireteamsRequest($activity_type, $date_range, $page, $platform, $slot_filter, $lang_filter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fireteamSearchPublicAvailableClanFireteams'
     *
     * @param  int $activity_type The activity type to filter by. (required)
     * @param  int $date_range The date range to grab available fireteams. (required)
     * @param  int $page Zero based page (required)
     * @param  int $platform The platform filter. (required)
     * @param  int $slot_filter Filters based on available slots (required)
     * @param  string $lang_filter An optional language filter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fireteamSearchPublicAvailableClanFireteamsRequest($activity_type, $date_range, $page, $platform, $slot_filter, $lang_filter = null)
    {
        // verify the required parameter 'activity_type' is set
        if ($activity_type === null || (is_array($activity_type) && count($activity_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $activity_type when calling fireteamSearchPublicAvailableClanFireteams'
            );
        }
        // verify the required parameter 'date_range' is set
        if ($date_range === null || (is_array($date_range) && count($date_range) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_range when calling fireteamSearchPublicAvailableClanFireteams'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling fireteamSearchPublicAvailableClanFireteams'
            );
        }
        // verify the required parameter 'platform' is set
        if ($platform === null || (is_array($platform) && count($platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling fireteamSearchPublicAvailableClanFireteams'
            );
        }
        // verify the required parameter 'slot_filter' is set
        if ($slot_filter === null || (is_array($slot_filter) && count($slot_filter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slot_filter when calling fireteamSearchPublicAvailableClanFireteams'
            );
        }

        $resourcePath = '/Fireteam/Search/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{page}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($lang_filter)) {
            $lang_filter = ObjectSerializer::serializeCollection($lang_filter, '', true);
        }
        if ($lang_filter !== null) {
            $queryParams['langFilter'] = $lang_filter;
        }


        // path params
        if ($activity_type !== null) {
            $resourcePath = str_replace(
                '{' . 'activityType' . '}',
                ObjectSerializer::toPathValue($activity_type),
                $resourcePath
            );
        }
        // path params
        if ($date_range !== null) {
            $resourcePath = str_replace(
                '{' . 'dateRange' . '}',
                ObjectSerializer::toPathValue($date_range),
                $resourcePath
            );
        }
        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                '{' . 'page' . '}',
                ObjectSerializer::toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($platform !== null) {
            $resourcePath = str_replace(
                '{' . 'platform' . '}',
                ObjectSerializer::toPathValue($platform),
                $resourcePath
            );
        }
        // path params
        if ($slot_filter !== null) {
            $resourcePath = str_replace(
                '{' . 'slotFilter' . '}',
                ObjectSerializer::toPathValue($slot_filter),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
