<?php
/**
 * ForumApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ForumApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ForumApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation forumGetCoreTopicsPaged
     *
     * @param  int $category_filter The category filter. (required)
     * @param  int $page Zero base page (required)
     * @param  int $quick_date The date filter. (required)
     * @param  int $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20012
     */
    public function forumGetCoreTopicsPaged($category_filter, $page, $quick_date, $sort, $locales = null)
    {
        list($response) = $this->forumGetCoreTopicsPagedWithHttpInfo($category_filter, $page, $quick_date, $sort, $locales);
        return $response;
    }

    /**
     * Operation forumGetCoreTopicsPagedWithHttpInfo
     *
     * @param  int $category_filter The category filter. (required)
     * @param  int $page Zero base page (required)
     * @param  int $quick_date The date filter. (required)
     * @param  int $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumGetCoreTopicsPagedWithHttpInfo($category_filter, $page, $quick_date, $sort, $locales = null)
    {
        $request = $this->forumGetCoreTopicsPagedRequest($category_filter, $page, $quick_date, $sort, $locales);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20012' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20012', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20012';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumGetCoreTopicsPagedAsync
     *
     * 
     *
     * @param  int $category_filter The category filter. (required)
     * @param  int $page Zero base page (required)
     * @param  int $quick_date The date filter. (required)
     * @param  int $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetCoreTopicsPagedAsync($category_filter, $page, $quick_date, $sort, $locales = null)
    {
        return $this->forumGetCoreTopicsPagedAsyncWithHttpInfo($category_filter, $page, $quick_date, $sort, $locales)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumGetCoreTopicsPagedAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $category_filter The category filter. (required)
     * @param  int $page Zero base page (required)
     * @param  int $quick_date The date filter. (required)
     * @param  int $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetCoreTopicsPagedAsyncWithHttpInfo($category_filter, $page, $quick_date, $sort, $locales = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20012';
        $request = $this->forumGetCoreTopicsPagedRequest($category_filter, $page, $quick_date, $sort, $locales);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumGetCoreTopicsPaged'
     *
     * @param  int $category_filter The category filter. (required)
     * @param  int $page Zero base page (required)
     * @param  int $quick_date The date filter. (required)
     * @param  int $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function forumGetCoreTopicsPagedRequest($category_filter, $page, $quick_date, $sort, $locales = null)
    {
        // verify the required parameter 'category_filter' is set
        if ($category_filter === null || (is_array($category_filter) && count($category_filter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $category_filter when calling forumGetCoreTopicsPaged'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling forumGetCoreTopicsPaged'
            );
        }
        // verify the required parameter 'quick_date' is set
        if ($quick_date === null || (is_array($quick_date) && count($quick_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quick_date when calling forumGetCoreTopicsPaged'
            );
        }
        // verify the required parameter 'sort' is set
        if ($sort === null || (is_array($sort) && count($sort) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sort when calling forumGetCoreTopicsPaged'
            );
        }

        $resourcePath = '/Forum/GetCoreTopicsPaged/{page}/{sort}/{quickDate}/{categoryFilter}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($locales)) {
            $locales = ObjectSerializer::serializeCollection($locales, '', true);
        }
        if ($locales !== null) {
            $queryParams['locales'] = $locales;
        }


        // path params
        if ($category_filter !== null) {
            $resourcePath = str_replace(
                '{' . 'categoryFilter' . '}',
                ObjectSerializer::toPathValue($category_filter),
                $resourcePath
            );
        }
        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                '{' . 'page' . '}',
                ObjectSerializer::toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($quick_date !== null) {
            $resourcePath = str_replace(
                '{' . 'quickDate' . '}',
                ObjectSerializer::toPathValue($quick_date),
                $resourcePath
            );
        }
        // path params
        if ($sort !== null) {
            $resourcePath = str_replace(
                '{' . 'sort' . '}',
                ObjectSerializer::toPathValue($sort),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forumGetForumTagSuggestions
     *
     * @param  string $partialtag The partial tag input to generate suggestions from. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20014
     */
    public function forumGetForumTagSuggestions($partialtag = null)
    {
        list($response) = $this->forumGetForumTagSuggestionsWithHttpInfo($partialtag);
        return $response;
    }

    /**
     * Operation forumGetForumTagSuggestionsWithHttpInfo
     *
     * @param  string $partialtag The partial tag input to generate suggestions from. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20014, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumGetForumTagSuggestionsWithHttpInfo($partialtag = null)
    {
        $request = $this->forumGetForumTagSuggestionsRequest($partialtag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20014' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20014', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20014';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20014',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumGetForumTagSuggestionsAsync
     *
     * 
     *
     * @param  string $partialtag The partial tag input to generate suggestions from. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetForumTagSuggestionsAsync($partialtag = null)
    {
        return $this->forumGetForumTagSuggestionsAsyncWithHttpInfo($partialtag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumGetForumTagSuggestionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $partialtag The partial tag input to generate suggestions from. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetForumTagSuggestionsAsyncWithHttpInfo($partialtag = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20014';
        $request = $this->forumGetForumTagSuggestionsRequest($partialtag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumGetForumTagSuggestions'
     *
     * @param  string $partialtag The partial tag input to generate suggestions from. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function forumGetForumTagSuggestionsRequest($partialtag = null)
    {

        $resourcePath = '/Forum/GetForumTagSuggestions/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($partialtag)) {
            $partialtag = ObjectSerializer::serializeCollection($partialtag, '', true);
        }
        if ($partialtag !== null) {
            $queryParams['partialtag'] = $partialtag;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forumGetPoll
     *
     * @param  int $topic_id The post id of the topic that has the poll. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20012
     */
    public function forumGetPoll($topic_id)
    {
        list($response) = $this->forumGetPollWithHttpInfo($topic_id);
        return $response;
    }

    /**
     * Operation forumGetPollWithHttpInfo
     *
     * @param  int $topic_id The post id of the topic that has the poll. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumGetPollWithHttpInfo($topic_id)
    {
        $request = $this->forumGetPollRequest($topic_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20012' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20012', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20012';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumGetPollAsync
     *
     * 
     *
     * @param  int $topic_id The post id of the topic that has the poll. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetPollAsync($topic_id)
    {
        return $this->forumGetPollAsyncWithHttpInfo($topic_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumGetPollAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $topic_id The post id of the topic that has the poll. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetPollAsyncWithHttpInfo($topic_id)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20012';
        $request = $this->forumGetPollRequest($topic_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumGetPoll'
     *
     * @param  int $topic_id The post id of the topic that has the poll. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function forumGetPollRequest($topic_id)
    {
        // verify the required parameter 'topic_id' is set
        if ($topic_id === null || (is_array($topic_id) && count($topic_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $topic_id when calling forumGetPoll'
            );
        }

        $resourcePath = '/Forum/Poll/{topicId}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($topic_id !== null) {
            $resourcePath = str_replace(
                '{' . 'topicId' . '}',
                ObjectSerializer::toPathValue($topic_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forumGetPostAndParent
     *
     * @param  int $child_post_id child_post_id (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20012
     */
    public function forumGetPostAndParent($child_post_id, $showbanned = null)
    {
        list($response) = $this->forumGetPostAndParentWithHttpInfo($child_post_id, $showbanned);
        return $response;
    }

    /**
     * Operation forumGetPostAndParentWithHttpInfo
     *
     * @param  int $child_post_id (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumGetPostAndParentWithHttpInfo($child_post_id, $showbanned = null)
    {
        $request = $this->forumGetPostAndParentRequest($child_post_id, $showbanned);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20012' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20012', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20012';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumGetPostAndParentAsync
     *
     * 
     *
     * @param  int $child_post_id (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetPostAndParentAsync($child_post_id, $showbanned = null)
    {
        return $this->forumGetPostAndParentAsyncWithHttpInfo($child_post_id, $showbanned)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumGetPostAndParentAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $child_post_id (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetPostAndParentAsyncWithHttpInfo($child_post_id, $showbanned = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20012';
        $request = $this->forumGetPostAndParentRequest($child_post_id, $showbanned);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumGetPostAndParent'
     *
     * @param  int $child_post_id (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function forumGetPostAndParentRequest($child_post_id, $showbanned = null)
    {
        // verify the required parameter 'child_post_id' is set
        if ($child_post_id === null || (is_array($child_post_id) && count($child_post_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $child_post_id when calling forumGetPostAndParent'
            );
        }

        $resourcePath = '/Forum/GetPostAndParent/{childPostId}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($showbanned)) {
            $showbanned = ObjectSerializer::serializeCollection($showbanned, '', true);
        }
        if ($showbanned !== null) {
            $queryParams['showbanned'] = $showbanned;
        }


        // path params
        if ($child_post_id !== null) {
            $resourcePath = str_replace(
                '{' . 'childPostId' . '}',
                ObjectSerializer::toPathValue($child_post_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forumGetPostAndParentAwaitingApproval
     *
     * @param  int $child_post_id child_post_id (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20012
     */
    public function forumGetPostAndParentAwaitingApproval($child_post_id, $showbanned = null)
    {
        list($response) = $this->forumGetPostAndParentAwaitingApprovalWithHttpInfo($child_post_id, $showbanned);
        return $response;
    }

    /**
     * Operation forumGetPostAndParentAwaitingApprovalWithHttpInfo
     *
     * @param  int $child_post_id (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumGetPostAndParentAwaitingApprovalWithHttpInfo($child_post_id, $showbanned = null)
    {
        $request = $this->forumGetPostAndParentAwaitingApprovalRequest($child_post_id, $showbanned);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20012' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20012', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20012';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumGetPostAndParentAwaitingApprovalAsync
     *
     * 
     *
     * @param  int $child_post_id (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetPostAndParentAwaitingApprovalAsync($child_post_id, $showbanned = null)
    {
        return $this->forumGetPostAndParentAwaitingApprovalAsyncWithHttpInfo($child_post_id, $showbanned)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumGetPostAndParentAwaitingApprovalAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $child_post_id (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetPostAndParentAwaitingApprovalAsyncWithHttpInfo($child_post_id, $showbanned = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20012';
        $request = $this->forumGetPostAndParentAwaitingApprovalRequest($child_post_id, $showbanned);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumGetPostAndParentAwaitingApproval'
     *
     * @param  int $child_post_id (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function forumGetPostAndParentAwaitingApprovalRequest($child_post_id, $showbanned = null)
    {
        // verify the required parameter 'child_post_id' is set
        if ($child_post_id === null || (is_array($child_post_id) && count($child_post_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $child_post_id when calling forumGetPostAndParentAwaitingApproval'
            );
        }

        $resourcePath = '/Forum/GetPostAndParentAwaitingApproval/{childPostId}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($showbanned)) {
            $showbanned = ObjectSerializer::serializeCollection($showbanned, '', true);
        }
        if ($showbanned !== null) {
            $queryParams['showbanned'] = $showbanned;
        }


        // path params
        if ($child_post_id !== null) {
            $resourcePath = str_replace(
                '{' . 'childPostId' . '}',
                ObjectSerializer::toPathValue($child_post_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forumGetPostsThreadedPaged
     *
     * @param  bool $get_parent_post get_parent_post (required)
     * @param  int $page page (required)
     * @param  int $page_size page_size (required)
     * @param  int $parent_post_id parent_post_id (required)
     * @param  int $reply_size reply_size (required)
     * @param  bool $root_thread_mode root_thread_mode (required)
     * @param  int $sort_mode sort_mode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20012
     */
    public function forumGetPostsThreadedPaged($get_parent_post, $page, $page_size, $parent_post_id, $reply_size, $root_thread_mode, $sort_mode, $showbanned = null)
    {
        list($response) = $this->forumGetPostsThreadedPagedWithHttpInfo($get_parent_post, $page, $page_size, $parent_post_id, $reply_size, $root_thread_mode, $sort_mode, $showbanned);
        return $response;
    }

    /**
     * Operation forumGetPostsThreadedPagedWithHttpInfo
     *
     * @param  bool $get_parent_post (required)
     * @param  int $page (required)
     * @param  int $page_size (required)
     * @param  int $parent_post_id (required)
     * @param  int $reply_size (required)
     * @param  bool $root_thread_mode (required)
     * @param  int $sort_mode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumGetPostsThreadedPagedWithHttpInfo($get_parent_post, $page, $page_size, $parent_post_id, $reply_size, $root_thread_mode, $sort_mode, $showbanned = null)
    {
        $request = $this->forumGetPostsThreadedPagedRequest($get_parent_post, $page, $page_size, $parent_post_id, $reply_size, $root_thread_mode, $sort_mode, $showbanned);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20012' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20012', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20012';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumGetPostsThreadedPagedAsync
     *
     * 
     *
     * @param  bool $get_parent_post (required)
     * @param  int $page (required)
     * @param  int $page_size (required)
     * @param  int $parent_post_id (required)
     * @param  int $reply_size (required)
     * @param  bool $root_thread_mode (required)
     * @param  int $sort_mode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetPostsThreadedPagedAsync($get_parent_post, $page, $page_size, $parent_post_id, $reply_size, $root_thread_mode, $sort_mode, $showbanned = null)
    {
        return $this->forumGetPostsThreadedPagedAsyncWithHttpInfo($get_parent_post, $page, $page_size, $parent_post_id, $reply_size, $root_thread_mode, $sort_mode, $showbanned)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumGetPostsThreadedPagedAsyncWithHttpInfo
     *
     * 
     *
     * @param  bool $get_parent_post (required)
     * @param  int $page (required)
     * @param  int $page_size (required)
     * @param  int $parent_post_id (required)
     * @param  int $reply_size (required)
     * @param  bool $root_thread_mode (required)
     * @param  int $sort_mode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetPostsThreadedPagedAsyncWithHttpInfo($get_parent_post, $page, $page_size, $parent_post_id, $reply_size, $root_thread_mode, $sort_mode, $showbanned = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20012';
        $request = $this->forumGetPostsThreadedPagedRequest($get_parent_post, $page, $page_size, $parent_post_id, $reply_size, $root_thread_mode, $sort_mode, $showbanned);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumGetPostsThreadedPaged'
     *
     * @param  bool $get_parent_post (required)
     * @param  int $page (required)
     * @param  int $page_size (required)
     * @param  int $parent_post_id (required)
     * @param  int $reply_size (required)
     * @param  bool $root_thread_mode (required)
     * @param  int $sort_mode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function forumGetPostsThreadedPagedRequest($get_parent_post, $page, $page_size, $parent_post_id, $reply_size, $root_thread_mode, $sort_mode, $showbanned = null)
    {
        // verify the required parameter 'get_parent_post' is set
        if ($get_parent_post === null || (is_array($get_parent_post) && count($get_parent_post) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_parent_post when calling forumGetPostsThreadedPaged'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling forumGetPostsThreadedPaged'
            );
        }
        // verify the required parameter 'page_size' is set
        if ($page_size === null || (is_array($page_size) && count($page_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_size when calling forumGetPostsThreadedPaged'
            );
        }
        // verify the required parameter 'parent_post_id' is set
        if ($parent_post_id === null || (is_array($parent_post_id) && count($parent_post_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parent_post_id when calling forumGetPostsThreadedPaged'
            );
        }
        // verify the required parameter 'reply_size' is set
        if ($reply_size === null || (is_array($reply_size) && count($reply_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reply_size when calling forumGetPostsThreadedPaged'
            );
        }
        // verify the required parameter 'root_thread_mode' is set
        if ($root_thread_mode === null || (is_array($root_thread_mode) && count($root_thread_mode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $root_thread_mode when calling forumGetPostsThreadedPaged'
            );
        }
        // verify the required parameter 'sort_mode' is set
        if ($sort_mode === null || (is_array($sort_mode) && count($sort_mode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sort_mode when calling forumGetPostsThreadedPaged'
            );
        }

        $resourcePath = '/Forum/GetPostsThreadedPaged/{parentPostId}/{page}/{pageSize}/{replySize}/{getParentPost}/{rootThreadMode}/{sortMode}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($showbanned)) {
            $showbanned = ObjectSerializer::serializeCollection($showbanned, '', true);
        }
        if ($showbanned !== null) {
            $queryParams['showbanned'] = $showbanned;
        }


        // path params
        if ($get_parent_post !== null) {
            $resourcePath = str_replace(
                '{' . 'getParentPost' . '}',
                ObjectSerializer::toPathValue($get_parent_post),
                $resourcePath
            );
        }
        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                '{' . 'page' . '}',
                ObjectSerializer::toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($page_size !== null) {
            $resourcePath = str_replace(
                '{' . 'pageSize' . '}',
                ObjectSerializer::toPathValue($page_size),
                $resourcePath
            );
        }
        // path params
        if ($parent_post_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parentPostId' . '}',
                ObjectSerializer::toPathValue($parent_post_id),
                $resourcePath
            );
        }
        // path params
        if ($reply_size !== null) {
            $resourcePath = str_replace(
                '{' . 'replySize' . '}',
                ObjectSerializer::toPathValue($reply_size),
                $resourcePath
            );
        }
        // path params
        if ($root_thread_mode !== null) {
            $resourcePath = str_replace(
                '{' . 'rootThreadMode' . '}',
                ObjectSerializer::toPathValue($root_thread_mode),
                $resourcePath
            );
        }
        // path params
        if ($sort_mode !== null) {
            $resourcePath = str_replace(
                '{' . 'sortMode' . '}',
                ObjectSerializer::toPathValue($sort_mode),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forumGetPostsThreadedPagedFromChild
     *
     * @param  int $child_post_id child_post_id (required)
     * @param  int $page page (required)
     * @param  int $page_size page_size (required)
     * @param  int $reply_size reply_size (required)
     * @param  bool $root_thread_mode root_thread_mode (required)
     * @param  int $sort_mode sort_mode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20012
     */
    public function forumGetPostsThreadedPagedFromChild($child_post_id, $page, $page_size, $reply_size, $root_thread_mode, $sort_mode, $showbanned = null)
    {
        list($response) = $this->forumGetPostsThreadedPagedFromChildWithHttpInfo($child_post_id, $page, $page_size, $reply_size, $root_thread_mode, $sort_mode, $showbanned);
        return $response;
    }

    /**
     * Operation forumGetPostsThreadedPagedFromChildWithHttpInfo
     *
     * @param  int $child_post_id (required)
     * @param  int $page (required)
     * @param  int $page_size (required)
     * @param  int $reply_size (required)
     * @param  bool $root_thread_mode (required)
     * @param  int $sort_mode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumGetPostsThreadedPagedFromChildWithHttpInfo($child_post_id, $page, $page_size, $reply_size, $root_thread_mode, $sort_mode, $showbanned = null)
    {
        $request = $this->forumGetPostsThreadedPagedFromChildRequest($child_post_id, $page, $page_size, $reply_size, $root_thread_mode, $sort_mode, $showbanned);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20012' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20012', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20012';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumGetPostsThreadedPagedFromChildAsync
     *
     * 
     *
     * @param  int $child_post_id (required)
     * @param  int $page (required)
     * @param  int $page_size (required)
     * @param  int $reply_size (required)
     * @param  bool $root_thread_mode (required)
     * @param  int $sort_mode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetPostsThreadedPagedFromChildAsync($child_post_id, $page, $page_size, $reply_size, $root_thread_mode, $sort_mode, $showbanned = null)
    {
        return $this->forumGetPostsThreadedPagedFromChildAsyncWithHttpInfo($child_post_id, $page, $page_size, $reply_size, $root_thread_mode, $sort_mode, $showbanned)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumGetPostsThreadedPagedFromChildAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $child_post_id (required)
     * @param  int $page (required)
     * @param  int $page_size (required)
     * @param  int $reply_size (required)
     * @param  bool $root_thread_mode (required)
     * @param  int $sort_mode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetPostsThreadedPagedFromChildAsyncWithHttpInfo($child_post_id, $page, $page_size, $reply_size, $root_thread_mode, $sort_mode, $showbanned = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20012';
        $request = $this->forumGetPostsThreadedPagedFromChildRequest($child_post_id, $page, $page_size, $reply_size, $root_thread_mode, $sort_mode, $showbanned);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumGetPostsThreadedPagedFromChild'
     *
     * @param  int $child_post_id (required)
     * @param  int $page (required)
     * @param  int $page_size (required)
     * @param  int $reply_size (required)
     * @param  bool $root_thread_mode (required)
     * @param  int $sort_mode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function forumGetPostsThreadedPagedFromChildRequest($child_post_id, $page, $page_size, $reply_size, $root_thread_mode, $sort_mode, $showbanned = null)
    {
        // verify the required parameter 'child_post_id' is set
        if ($child_post_id === null || (is_array($child_post_id) && count($child_post_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $child_post_id when calling forumGetPostsThreadedPagedFromChild'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling forumGetPostsThreadedPagedFromChild'
            );
        }
        // verify the required parameter 'page_size' is set
        if ($page_size === null || (is_array($page_size) && count($page_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_size when calling forumGetPostsThreadedPagedFromChild'
            );
        }
        // verify the required parameter 'reply_size' is set
        if ($reply_size === null || (is_array($reply_size) && count($reply_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reply_size when calling forumGetPostsThreadedPagedFromChild'
            );
        }
        // verify the required parameter 'root_thread_mode' is set
        if ($root_thread_mode === null || (is_array($root_thread_mode) && count($root_thread_mode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $root_thread_mode when calling forumGetPostsThreadedPagedFromChild'
            );
        }
        // verify the required parameter 'sort_mode' is set
        if ($sort_mode === null || (is_array($sort_mode) && count($sort_mode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sort_mode when calling forumGetPostsThreadedPagedFromChild'
            );
        }

        $resourcePath = '/Forum/GetPostsThreadedPagedFromChild/{childPostId}/{page}/{pageSize}/{replySize}/{rootThreadMode}/{sortMode}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($showbanned)) {
            $showbanned = ObjectSerializer::serializeCollection($showbanned, '', true);
        }
        if ($showbanned !== null) {
            $queryParams['showbanned'] = $showbanned;
        }


        // path params
        if ($child_post_id !== null) {
            $resourcePath = str_replace(
                '{' . 'childPostId' . '}',
                ObjectSerializer::toPathValue($child_post_id),
                $resourcePath
            );
        }
        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                '{' . 'page' . '}',
                ObjectSerializer::toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($page_size !== null) {
            $resourcePath = str_replace(
                '{' . 'pageSize' . '}',
                ObjectSerializer::toPathValue($page_size),
                $resourcePath
            );
        }
        // path params
        if ($reply_size !== null) {
            $resourcePath = str_replace(
                '{' . 'replySize' . '}',
                ObjectSerializer::toPathValue($reply_size),
                $resourcePath
            );
        }
        // path params
        if ($root_thread_mode !== null) {
            $resourcePath = str_replace(
                '{' . 'rootThreadMode' . '}',
                ObjectSerializer::toPathValue($root_thread_mode),
                $resourcePath
            );
        }
        // path params
        if ($sort_mode !== null) {
            $resourcePath = str_replace(
                '{' . 'sortMode' . '}',
                ObjectSerializer::toPathValue($sort_mode),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forumGetRecruitmentThreadSummaries
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20015
     */
    public function forumGetRecruitmentThreadSummaries()
    {
        list($response) = $this->forumGetRecruitmentThreadSummariesWithHttpInfo();
        return $response;
    }

    /**
     * Operation forumGetRecruitmentThreadSummariesWithHttpInfo
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20015, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumGetRecruitmentThreadSummariesWithHttpInfo()
    {
        $request = $this->forumGetRecruitmentThreadSummariesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20015' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20015', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20015';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20015',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumGetRecruitmentThreadSummariesAsync
     *
     * 
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetRecruitmentThreadSummariesAsync()
    {
        return $this->forumGetRecruitmentThreadSummariesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumGetRecruitmentThreadSummariesAsyncWithHttpInfo
     *
     * 
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetRecruitmentThreadSummariesAsyncWithHttpInfo()
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20015';
        $request = $this->forumGetRecruitmentThreadSummariesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumGetRecruitmentThreadSummaries'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function forumGetRecruitmentThreadSummariesRequest()
    {

        $resourcePath = '/Forum/Recruit/Summaries/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forumGetTopicForContent
     *
     * @param  int $content_id content_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20013
     */
    public function forumGetTopicForContent($content_id)
    {
        list($response) = $this->forumGetTopicForContentWithHttpInfo($content_id);
        return $response;
    }

    /**
     * Operation forumGetTopicForContentWithHttpInfo
     *
     * @param  int $content_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20013, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumGetTopicForContentWithHttpInfo($content_id)
    {
        $request = $this->forumGetTopicForContentRequest($content_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20013' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20013', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20013';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20013',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumGetTopicForContentAsync
     *
     * 
     *
     * @param  int $content_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetTopicForContentAsync($content_id)
    {
        return $this->forumGetTopicForContentAsyncWithHttpInfo($content_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumGetTopicForContentAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $content_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetTopicForContentAsyncWithHttpInfo($content_id)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20013';
        $request = $this->forumGetTopicForContentRequest($content_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumGetTopicForContent'
     *
     * @param  int $content_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function forumGetTopicForContentRequest($content_id)
    {
        // verify the required parameter 'content_id' is set
        if ($content_id === null || (is_array($content_id) && count($content_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_id when calling forumGetTopicForContent'
            );
        }

        $resourcePath = '/Forum/GetTopicForContent/{contentId}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($content_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentId' . '}',
                ObjectSerializer::toPathValue($content_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forumGetTopicsPaged
     *
     * @param  int $category_filter A category filter (required)
     * @param  int $group The group, if any. (required)
     * @param  int $page Zero paged page number (required)
     * @param  int $page_size Unused (required)
     * @param  int $quick_date A date filter. (required)
     * @param  int $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     * @param  string $tagstring The tags to search, if any. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20012
     */
    public function forumGetTopicsPaged($category_filter, $group, $page, $page_size, $quick_date, $sort, $locales = null, $tagstring = null)
    {
        list($response) = $this->forumGetTopicsPagedWithHttpInfo($category_filter, $group, $page, $page_size, $quick_date, $sort, $locales, $tagstring);
        return $response;
    }

    /**
     * Operation forumGetTopicsPagedWithHttpInfo
     *
     * @param  int $category_filter A category filter (required)
     * @param  int $group The group, if any. (required)
     * @param  int $page Zero paged page number (required)
     * @param  int $page_size Unused (required)
     * @param  int $quick_date A date filter. (required)
     * @param  int $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     * @param  string $tagstring The tags to search, if any. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumGetTopicsPagedWithHttpInfo($category_filter, $group, $page, $page_size, $quick_date, $sort, $locales = null, $tagstring = null)
    {
        $request = $this->forumGetTopicsPagedRequest($category_filter, $group, $page, $page_size, $quick_date, $sort, $locales, $tagstring);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20012' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20012', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20012';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumGetTopicsPagedAsync
     *
     * 
     *
     * @param  int $category_filter A category filter (required)
     * @param  int $group The group, if any. (required)
     * @param  int $page Zero paged page number (required)
     * @param  int $page_size Unused (required)
     * @param  int $quick_date A date filter. (required)
     * @param  int $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     * @param  string $tagstring The tags to search, if any. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetTopicsPagedAsync($category_filter, $group, $page, $page_size, $quick_date, $sort, $locales = null, $tagstring = null)
    {
        return $this->forumGetTopicsPagedAsyncWithHttpInfo($category_filter, $group, $page, $page_size, $quick_date, $sort, $locales, $tagstring)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumGetTopicsPagedAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $category_filter A category filter (required)
     * @param  int $group The group, if any. (required)
     * @param  int $page Zero paged page number (required)
     * @param  int $page_size Unused (required)
     * @param  int $quick_date A date filter. (required)
     * @param  int $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     * @param  string $tagstring The tags to search, if any. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetTopicsPagedAsyncWithHttpInfo($category_filter, $group, $page, $page_size, $quick_date, $sort, $locales = null, $tagstring = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20012';
        $request = $this->forumGetTopicsPagedRequest($category_filter, $group, $page, $page_size, $quick_date, $sort, $locales, $tagstring);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumGetTopicsPaged'
     *
     * @param  int $category_filter A category filter (required)
     * @param  int $group The group, if any. (required)
     * @param  int $page Zero paged page number (required)
     * @param  int $page_size Unused (required)
     * @param  int $quick_date A date filter. (required)
     * @param  int $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     * @param  string $tagstring The tags to search, if any. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function forumGetTopicsPagedRequest($category_filter, $group, $page, $page_size, $quick_date, $sort, $locales = null, $tagstring = null)
    {
        // verify the required parameter 'category_filter' is set
        if ($category_filter === null || (is_array($category_filter) && count($category_filter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $category_filter when calling forumGetTopicsPaged'
            );
        }
        // verify the required parameter 'group' is set
        if ($group === null || (is_array($group) && count($group) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group when calling forumGetTopicsPaged'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling forumGetTopicsPaged'
            );
        }
        // verify the required parameter 'page_size' is set
        if ($page_size === null || (is_array($page_size) && count($page_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_size when calling forumGetTopicsPaged'
            );
        }
        // verify the required parameter 'quick_date' is set
        if ($quick_date === null || (is_array($quick_date) && count($quick_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quick_date when calling forumGetTopicsPaged'
            );
        }
        // verify the required parameter 'sort' is set
        if ($sort === null || (is_array($sort) && count($sort) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sort when calling forumGetTopicsPaged'
            );
        }

        $resourcePath = '/Forum/GetTopicsPaged/{page}/{pageSize}/{group}/{sort}/{quickDate}/{categoryFilter}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($locales)) {
            $locales = ObjectSerializer::serializeCollection($locales, '', true);
        }
        if ($locales !== null) {
            $queryParams['locales'] = $locales;
        }
        // query params
        if (is_array($tagstring)) {
            $tagstring = ObjectSerializer::serializeCollection($tagstring, '', true);
        }
        if ($tagstring !== null) {
            $queryParams['tagstring'] = $tagstring;
        }


        // path params
        if ($category_filter !== null) {
            $resourcePath = str_replace(
                '{' . 'categoryFilter' . '}',
                ObjectSerializer::toPathValue($category_filter),
                $resourcePath
            );
        }
        // path params
        if ($group !== null) {
            $resourcePath = str_replace(
                '{' . 'group' . '}',
                ObjectSerializer::toPathValue($group),
                $resourcePath
            );
        }
        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                '{' . 'page' . '}',
                ObjectSerializer::toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($page_size !== null) {
            $resourcePath = str_replace(
                '{' . 'pageSize' . '}',
                ObjectSerializer::toPathValue($page_size),
                $resourcePath
            );
        }
        // path params
        if ($quick_date !== null) {
            $resourcePath = str_replace(
                '{' . 'quickDate' . '}',
                ObjectSerializer::toPathValue($quick_date),
                $resourcePath
            );
        }
        // path params
        if ($sort !== null) {
            $resourcePath = str_replace(
                '{' . 'sort' . '}',
                ObjectSerializer::toPathValue($sort),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
