<?php
/**
 * DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition Class Doc Comment
 *
 * @category Class
 * @description Represents types of Energy that can be used for costs and payments related to Armor 2.0 mods.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.EnergyTypes.DestinyEnergyTypeDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'display_properties' => 'DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition',
        'transparent_icon_path' => 'string',
        'show_icon' => 'bool',
        'enum_value' => 'int',
        'capacity_stat_hash' => 'int',
        'cost_stat_hash' => 'int',
        'hash' => 'int',
        'index' => 'int',
        'redacted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'display_properties' => null,
        'transparent_icon_path' => null,
        'show_icon' => null,
        'enum_value' => 'int32',
        'capacity_stat_hash' => 'uint32',
        'cost_stat_hash' => 'uint32',
        'hash' => 'uint32',
        'index' => 'int32',
        'redacted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_properties' => 'displayProperties',
        'transparent_icon_path' => 'transparentIconPath',
        'show_icon' => 'showIcon',
        'enum_value' => 'enumValue',
        'capacity_stat_hash' => 'capacityStatHash',
        'cost_stat_hash' => 'costStatHash',
        'hash' => 'hash',
        'index' => 'index',
        'redacted' => 'redacted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_properties' => 'setDisplayProperties',
        'transparent_icon_path' => 'setTransparentIconPath',
        'show_icon' => 'setShowIcon',
        'enum_value' => 'setEnumValue',
        'capacity_stat_hash' => 'setCapacityStatHash',
        'cost_stat_hash' => 'setCostStatHash',
        'hash' => 'setHash',
        'index' => 'setIndex',
        'redacted' => 'setRedacted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_properties' => 'getDisplayProperties',
        'transparent_icon_path' => 'getTransparentIconPath',
        'show_icon' => 'getShowIcon',
        'enum_value' => 'getEnumValue',
        'capacity_stat_hash' => 'getCapacityStatHash',
        'cost_stat_hash' => 'getCostStatHash',
        'hash' => 'getHash',
        'index' => 'getIndex',
        'redacted' => 'getRedacted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['display_properties'] = $data['display_properties'] ?? null;
        $this->container['transparent_icon_path'] = $data['transparent_icon_path'] ?? null;
        $this->container['show_icon'] = $data['show_icon'] ?? null;
        $this->container['enum_value'] = $data['enum_value'] ?? null;
        $this->container['capacity_stat_hash'] = $data['capacity_stat_hash'] ?? null;
        $this->container['cost_stat_hash'] = $data['cost_stat_hash'] ?? null;
        $this->container['hash'] = $data['hash'] ?? null;
        $this->container['index'] = $data['index'] ?? null;
        $this->container['redacted'] = $data['redacted'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets display_properties
     *
     * @return DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null
     */
    public function getDisplayProperties()
    {
        return $this->container['display_properties'];
    }

    /**
     * Sets display_properties
     *
     * @param DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null $display_properties The description of the energy type, icon etc...
     *
     * @return self
     */
    public function setDisplayProperties($display_properties)
    {
        $this->container['display_properties'] = $display_properties;

        return $this;
    }

    /**
     * Gets transparent_icon_path
     *
     * @return string|null
     */
    public function getTransparentIconPath()
    {
        return $this->container['transparent_icon_path'];
    }

    /**
     * Sets transparent_icon_path
     *
     * @param string|null $transparent_icon_path A variant of the icon that is transparent and colorless.
     *
     * @return self
     */
    public function setTransparentIconPath($transparent_icon_path)
    {
        $this->container['transparent_icon_path'] = $transparent_icon_path;

        return $this;
    }

    /**
     * Gets show_icon
     *
     * @return bool|null
     */
    public function getShowIcon()
    {
        return $this->container['show_icon'];
    }

    /**
     * Sets show_icon
     *
     * @param bool|null $show_icon If TRUE, the game shows this Energy type's icon. Otherwise, it doesn't. Whether you show it or not is up to you.
     *
     * @return self
     */
    public function setShowIcon($show_icon)
    {
        $this->container['show_icon'] = $show_icon;

        return $this;
    }

    /**
     * Gets enum_value
     *
     * @return int|null
     */
    public function getEnumValue()
    {
        return $this->container['enum_value'];
    }

    /**
     * Sets enum_value
     *
     * @param int|null $enum_value We have an enumeration for Energy types for quick reference. This is the current definition's Energy type enum value.
     *
     * @return self
     */
    public function setEnumValue($enum_value)
    {
        $this->container['enum_value'] = $enum_value;

        return $this;
    }

    /**
     * Gets capacity_stat_hash
     *
     * @return int|null
     */
    public function getCapacityStatHash()
    {
        return $this->container['capacity_stat_hash'];
    }

    /**
     * Sets capacity_stat_hash
     *
     * @param int|null $capacity_stat_hash If this Energy Type can be used for determining the Type of Energy that an item can consume, this is the hash for the DestinyInvestmentStatDefinition that represents the stat which holds the Capacity for that energy type. (Note that this is optional because \"Any\" is a valid cost, but not valid for Capacity - an Armor must have a specific Energy Type for determining the energy type that the Armor is restricted to use)
     *
     * @return self
     */
    public function setCapacityStatHash($capacity_stat_hash)
    {
        $this->container['capacity_stat_hash'] = $capacity_stat_hash;

        return $this;
    }

    /**
     * Gets cost_stat_hash
     *
     * @return int|null
     */
    public function getCostStatHash()
    {
        return $this->container['cost_stat_hash'];
    }

    /**
     * Sets cost_stat_hash
     *
     * @param int|null $cost_stat_hash If this Energy Type can be used as a cost to pay for socketing Armor 2.0 items, this is the hash for the DestinyInvestmentStatDefinition that stores the plug's raw cost.
     *
     * @return self
     */
    public function setCostStatHash($cost_stat_hash)
    {
        $this->container['cost_stat_hash'] = $cost_stat_hash;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return int|null
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param int|null $hash The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
     *
     * @return self
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int|null
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int|null $index The index of the entity as it was found in the investment tables.
     *
     * @return self
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets redacted
     *
     * @return bool|null
     */
    public function getRedacted()
    {
        return $this->container['redacted'];
    }

    /**
     * Sets redacted
     *
     * @param bool|null $redacted If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
     *
     * @return self
     */
    public function setRedacted($redacted)
    {
        $this->container['redacted'] = $redacted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


