<?php
/**
 * DestinyEntitiesProfilesDestinyProfileComponent
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyEntitiesProfilesDestinyProfileComponent Class Doc Comment
 *
 * @category Class
 * @description The most essential summary information about a Profile (in Destiny 1, we called these \&quot;Accounts\&quot;).
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyEntitiesProfilesDestinyProfileComponent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Entities.Profiles.DestinyProfileComponent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user_info' => 'UserUserInfoCard',
        'date_last_played' => '\DateTime',
        'versions_owned' => 'int',
        'character_ids' => 'int[]',
        'season_hashes' => 'int[]',
        'current_season_hash' => 'int',
        'current_season_reward_power_cap' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user_info' => null,
        'date_last_played' => 'date-time',
        'versions_owned' => 'int32',
        'character_ids' => 'int64',
        'season_hashes' => 'uint32',
        'current_season_hash' => 'uint32',
        'current_season_reward_power_cap' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_info' => 'userInfo',
        'date_last_played' => 'dateLastPlayed',
        'versions_owned' => 'versionsOwned',
        'character_ids' => 'characterIds',
        'season_hashes' => 'seasonHashes',
        'current_season_hash' => 'currentSeasonHash',
        'current_season_reward_power_cap' => 'currentSeasonRewardPowerCap'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_info' => 'setUserInfo',
        'date_last_played' => 'setDateLastPlayed',
        'versions_owned' => 'setVersionsOwned',
        'character_ids' => 'setCharacterIds',
        'season_hashes' => 'setSeasonHashes',
        'current_season_hash' => 'setCurrentSeasonHash',
        'current_season_reward_power_cap' => 'setCurrentSeasonRewardPowerCap'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_info' => 'getUserInfo',
        'date_last_played' => 'getDateLastPlayed',
        'versions_owned' => 'getVersionsOwned',
        'character_ids' => 'getCharacterIds',
        'season_hashes' => 'getSeasonHashes',
        'current_season_hash' => 'getCurrentSeasonHash',
        'current_season_reward_power_cap' => 'getCurrentSeasonRewardPowerCap'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user_info'] = $data['user_info'] ?? null;
        $this->container['date_last_played'] = $data['date_last_played'] ?? null;
        $this->container['versions_owned'] = $data['versions_owned'] ?? null;
        $this->container['character_ids'] = $data['character_ids'] ?? null;
        $this->container['season_hashes'] = $data['season_hashes'] ?? null;
        $this->container['current_season_hash'] = $data['current_season_hash'] ?? null;
        $this->container['current_season_reward_power_cap'] = $data['current_season_reward_power_cap'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_info
     *
     * @return UserUserInfoCard|null
     */
    public function getUserInfo()
    {
        return $this->container['user_info'];
    }

    /**
     * Sets user_info
     *
     * @param UserUserInfoCard|null $user_info If you need to render the Profile (their platform name, icon, etc...) somewhere, this property contains that information.
     *
     * @return self
     */
    public function setUserInfo($user_info)
    {
        $this->container['user_info'] = $user_info;

        return $this;
    }

    /**
     * Gets date_last_played
     *
     * @return \DateTime|null
     */
    public function getDateLastPlayed()
    {
        return $this->container['date_last_played'];
    }

    /**
     * Sets date_last_played
     *
     * @param \DateTime|null $date_last_played The last time the user played with any character on this Profile.
     *
     * @return self
     */
    public function setDateLastPlayed($date_last_played)
    {
        $this->container['date_last_played'] = $date_last_played;

        return $this;
    }

    /**
     * Gets versions_owned
     *
     * @return int|null
     */
    public function getVersionsOwned()
    {
        return $this->container['versions_owned'];
    }

    /**
     * Sets versions_owned
     *
     * @param int|null $versions_owned If you want to know what expansions they own, this will contain that data.   IMPORTANT: This field may not return the data you're interested in for Cross-Saved users. It returns the last ownership data we saw for this account - which is to say, what they've purchased on the platform on which they last played, which now could be a different platform.   If you don't care about per-platform ownership and only care about whatever platform it seems they are playing on most recently, then this should be \"good enough.\" Otherwise, this should be considered deprecated. We do not have a good alternative to provide at this time with platform specific ownership data for DLC.
     *
     * @return self
     */
    public function setVersionsOwned($versions_owned)
    {
        $this->container['versions_owned'] = $versions_owned;

        return $this;
    }

    /**
     * Gets character_ids
     *
     * @return int[]|null
     */
    public function getCharacterIds()
    {
        return $this->container['character_ids'];
    }

    /**
     * Sets character_ids
     *
     * @param int[]|null $character_ids A list of the character IDs, for further querying on your part.
     *
     * @return self
     */
    public function setCharacterIds($character_ids)
    {
        $this->container['character_ids'] = $character_ids;

        return $this;
    }

    /**
     * Gets season_hashes
     *
     * @return int[]|null
     */
    public function getSeasonHashes()
    {
        return $this->container['season_hashes'];
    }

    /**
     * Sets season_hashes
     *
     * @param int[]|null $season_hashes A list of seasons that this profile owns. Unlike versionsOwned, these stay with the profile across Platforms, and thus will be valid.   It turns out that Stadia Pro subscriptions will give access to seasons but only while playing on Stadia and with an active subscription. So some users (users who have Stadia Pro but choose to play on some other platform) won't see these as available: it will be whatever seasons are available for the platform on which they last played.
     *
     * @return self
     */
    public function setSeasonHashes($season_hashes)
    {
        $this->container['season_hashes'] = $season_hashes;

        return $this;
    }

    /**
     * Gets current_season_hash
     *
     * @return int|null
     */
    public function getCurrentSeasonHash()
    {
        return $this->container['current_season_hash'];
    }

    /**
     * Sets current_season_hash
     *
     * @param int|null $current_season_hash If populated, this is a reference to the season that is currently active.
     *
     * @return self
     */
    public function setCurrentSeasonHash($current_season_hash)
    {
        $this->container['current_season_hash'] = $current_season_hash;

        return $this;
    }

    /**
     * Gets current_season_reward_power_cap
     *
     * @return int|null
     */
    public function getCurrentSeasonRewardPowerCap()
    {
        return $this->container['current_season_reward_power_cap'];
    }

    /**
     * Sets current_season_reward_power_cap
     *
     * @param int|null $current_season_reward_power_cap If populated, this is the reward power cap for the current season.
     *
     * @return self
     */
    public function setCurrentSeasonRewardPowerCap($current_season_reward_power_cap)
    {
        $this->container['current_season_reward_power_cap'] = $current_season_reward_power_cap;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


