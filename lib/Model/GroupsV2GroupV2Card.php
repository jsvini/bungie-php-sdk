<?php
/**
 * GroupsV2GroupV2Card
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GroupsV2GroupV2Card Class Doc Comment
 *
 * @category Class
 * @description A small infocard of group information, usually used for when a list of groups are returned
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class GroupsV2GroupV2Card implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GroupsV2.GroupV2Card';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'group_id' => 'int',
        'name' => 'string',
        'group_type' => 'int',
        'creation_date' => '\DateTime',
        'about' => 'string',
        'motto' => 'string',
        'member_count' => 'int',
        'locale' => 'string',
        'membership_option' => 'int',
        'capabilities' => 'int',
        'clan_info' => '\OpenAPI\Client\Model\GroupsV2GroupV2ClanInfo',
        'avatar_path' => 'string',
        'theme' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'group_id' => 'int64',
        'name' => null,
        'group_type' => 'int32',
        'creation_date' => 'date-time',
        'about' => null,
        'motto' => null,
        'member_count' => 'int32',
        'locale' => null,
        'membership_option' => 'int32',
        'capabilities' => 'int32',
        'clan_info' => null,
        'avatar_path' => null,
        'theme' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'group_id' => 'groupId',
        'name' => 'name',
        'group_type' => 'groupType',
        'creation_date' => 'creationDate',
        'about' => 'about',
        'motto' => 'motto',
        'member_count' => 'memberCount',
        'locale' => 'locale',
        'membership_option' => 'membershipOption',
        'capabilities' => 'capabilities',
        'clan_info' => 'clanInfo',
        'avatar_path' => 'avatarPath',
        'theme' => 'theme'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'group_id' => 'setGroupId',
        'name' => 'setName',
        'group_type' => 'setGroupType',
        'creation_date' => 'setCreationDate',
        'about' => 'setAbout',
        'motto' => 'setMotto',
        'member_count' => 'setMemberCount',
        'locale' => 'setLocale',
        'membership_option' => 'setMembershipOption',
        'capabilities' => 'setCapabilities',
        'clan_info' => 'setClanInfo',
        'avatar_path' => 'setAvatarPath',
        'theme' => 'setTheme'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'group_id' => 'getGroupId',
        'name' => 'getName',
        'group_type' => 'getGroupType',
        'creation_date' => 'getCreationDate',
        'about' => 'getAbout',
        'motto' => 'getMotto',
        'member_count' => 'getMemberCount',
        'locale' => 'getLocale',
        'membership_option' => 'getMembershipOption',
        'capabilities' => 'getCapabilities',
        'clan_info' => 'getClanInfo',
        'avatar_path' => 'getAvatarPath',
        'theme' => 'getTheme'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['group_id'] = $data['group_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['group_type'] = $data['group_type'] ?? null;
        $this->container['creation_date'] = $data['creation_date'] ?? null;
        $this->container['about'] = $data['about'] ?? null;
        $this->container['motto'] = $data['motto'] ?? null;
        $this->container['member_count'] = $data['member_count'] ?? null;
        $this->container['locale'] = $data['locale'] ?? null;
        $this->container['membership_option'] = $data['membership_option'] ?? null;
        $this->container['capabilities'] = $data['capabilities'] ?? null;
        $this->container['clan_info'] = $data['clan_info'] ?? null;
        $this->container['avatar_path'] = $data['avatar_path'] ?? null;
        $this->container['theme'] = $data['theme'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets group_id
     *
     * @return int|null
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param int|null $group_id group_id
     *
     * @return self
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets group_type
     *
     * @return int|null
     */
    public function getGroupType()
    {
        return $this->container['group_type'];
    }

    /**
     * Sets group_type
     *
     * @param int|null $group_type group_type
     *
     * @return self
     */
    public function setGroupType($group_type)
    {
        $this->container['group_type'] = $group_type;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime|null $creation_date creation_date
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets about
     *
     * @return string|null
     */
    public function getAbout()
    {
        return $this->container['about'];
    }

    /**
     * Sets about
     *
     * @param string|null $about about
     *
     * @return self
     */
    public function setAbout($about)
    {
        $this->container['about'] = $about;

        return $this;
    }

    /**
     * Gets motto
     *
     * @return string|null
     */
    public function getMotto()
    {
        return $this->container['motto'];
    }

    /**
     * Sets motto
     *
     * @param string|null $motto motto
     *
     * @return self
     */
    public function setMotto($motto)
    {
        $this->container['motto'] = $motto;

        return $this;
    }

    /**
     * Gets member_count
     *
     * @return int|null
     */
    public function getMemberCount()
    {
        return $this->container['member_count'];
    }

    /**
     * Sets member_count
     *
     * @param int|null $member_count member_count
     *
     * @return self
     */
    public function setMemberCount($member_count)
    {
        $this->container['member_count'] = $member_count;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale locale
     *
     * @return self
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets membership_option
     *
     * @return int|null
     */
    public function getMembershipOption()
    {
        return $this->container['membership_option'];
    }

    /**
     * Sets membership_option
     *
     * @param int|null $membership_option membership_option
     *
     * @return self
     */
    public function setMembershipOption($membership_option)
    {
        $this->container['membership_option'] = $membership_option;

        return $this;
    }

    /**
     * Gets capabilities
     *
     * @return int|null
     */
    public function getCapabilities()
    {
        return $this->container['capabilities'];
    }

    /**
     * Sets capabilities
     *
     * @param int|null $capabilities capabilities
     *
     * @return self
     */
    public function setCapabilities($capabilities)
    {
        $this->container['capabilities'] = $capabilities;

        return $this;
    }

    /**
     * Gets clan_info
     *
     * @return \OpenAPI\Client\Model\GroupsV2GroupV2ClanInfo|null
     */
    public function getClanInfo()
    {
        return $this->container['clan_info'];
    }

    /**
     * Sets clan_info
     *
     * @param \OpenAPI\Client\Model\GroupsV2GroupV2ClanInfo|null $clan_info clan_info
     *
     * @return self
     */
    public function setClanInfo($clan_info)
    {
        $this->container['clan_info'] = $clan_info;

        return $this;
    }

    /**
     * Gets avatar_path
     *
     * @return string|null
     */
    public function getAvatarPath()
    {
        return $this->container['avatar_path'];
    }

    /**
     * Sets avatar_path
     *
     * @param string|null $avatar_path avatar_path
     *
     * @return self
     */
    public function setAvatarPath($avatar_path)
    {
        $this->container['avatar_path'] = $avatar_path;

        return $this;
    }

    /**
     * Gets theme
     *
     * @return string|null
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     *
     * @param string|null $theme theme
     *
     * @return self
     */
    public function setTheme($theme)
    {
        $this->container['theme'] = $theme;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


