<?php
/**
 * DestinyEntitiesCharactersDestinyCharacterComponent
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyEntitiesCharactersDestinyCharacterComponent Class Doc Comment
 *
 * @category Class
 * @description This component contains base properties of the character. You&#39;ll probably want to always request this component, but hey you do you.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyEntitiesCharactersDestinyCharacterComponent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Entities.Characters.DestinyCharacterComponent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'membership_id' => 'int',
        'membership_type' => 'int',
        'character_id' => 'int',
        'date_last_played' => '\DateTime',
        'minutes_played_this_session' => 'int',
        'minutes_played_total' => 'int',
        'light' => 'int',
        'stats' => 'map[string,int]',
        'race_hash' => 'int',
        'gender_hash' => 'int',
        'class_hash' => 'int',
        'race_type' => 'int',
        'class_type' => 'int',
        'gender_type' => 'int',
        'emblem_path' => 'string',
        'emblem_background_path' => 'string',
        'emblem_hash' => 'int',
        'emblem_color' => 'DestinyMiscDestinyColor',
        'level_progression' => 'DestinyDestinyProgression',
        'base_character_level' => 'int',
        'percent_to_next_level' => 'float',
        'title_record_hash' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'membership_id' => 'int64',
        'membership_type' => 'int32',
        'character_id' => 'int64',
        'date_last_played' => 'date-time',
        'minutes_played_this_session' => 'int64',
        'minutes_played_total' => 'int64',
        'light' => 'int32',
        'stats' => 'int32',
        'race_hash' => 'uint32',
        'gender_hash' => 'uint32',
        'class_hash' => 'uint32',
        'race_type' => 'int32',
        'class_type' => 'int32',
        'gender_type' => 'int32',
        'emblem_path' => null,
        'emblem_background_path' => null,
        'emblem_hash' => 'uint32',
        'emblem_color' => null,
        'level_progression' => null,
        'base_character_level' => 'int32',
        'percent_to_next_level' => 'float',
        'title_record_hash' => 'uint32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'membership_id' => 'membershipId',
        'membership_type' => 'membershipType',
        'character_id' => 'characterId',
        'date_last_played' => 'dateLastPlayed',
        'minutes_played_this_session' => 'minutesPlayedThisSession',
        'minutes_played_total' => 'minutesPlayedTotal',
        'light' => 'light',
        'stats' => 'stats',
        'race_hash' => 'raceHash',
        'gender_hash' => 'genderHash',
        'class_hash' => 'classHash',
        'race_type' => 'raceType',
        'class_type' => 'classType',
        'gender_type' => 'genderType',
        'emblem_path' => 'emblemPath',
        'emblem_background_path' => 'emblemBackgroundPath',
        'emblem_hash' => 'emblemHash',
        'emblem_color' => 'emblemColor',
        'level_progression' => 'levelProgression',
        'base_character_level' => 'baseCharacterLevel',
        'percent_to_next_level' => 'percentToNextLevel',
        'title_record_hash' => 'titleRecordHash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'membership_id' => 'setMembershipId',
        'membership_type' => 'setMembershipType',
        'character_id' => 'setCharacterId',
        'date_last_played' => 'setDateLastPlayed',
        'minutes_played_this_session' => 'setMinutesPlayedThisSession',
        'minutes_played_total' => 'setMinutesPlayedTotal',
        'light' => 'setLight',
        'stats' => 'setStats',
        'race_hash' => 'setRaceHash',
        'gender_hash' => 'setGenderHash',
        'class_hash' => 'setClassHash',
        'race_type' => 'setRaceType',
        'class_type' => 'setClassType',
        'gender_type' => 'setGenderType',
        'emblem_path' => 'setEmblemPath',
        'emblem_background_path' => 'setEmblemBackgroundPath',
        'emblem_hash' => 'setEmblemHash',
        'emblem_color' => 'setEmblemColor',
        'level_progression' => 'setLevelProgression',
        'base_character_level' => 'setBaseCharacterLevel',
        'percent_to_next_level' => 'setPercentToNextLevel',
        'title_record_hash' => 'setTitleRecordHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'membership_id' => 'getMembershipId',
        'membership_type' => 'getMembershipType',
        'character_id' => 'getCharacterId',
        'date_last_played' => 'getDateLastPlayed',
        'minutes_played_this_session' => 'getMinutesPlayedThisSession',
        'minutes_played_total' => 'getMinutesPlayedTotal',
        'light' => 'getLight',
        'stats' => 'getStats',
        'race_hash' => 'getRaceHash',
        'gender_hash' => 'getGenderHash',
        'class_hash' => 'getClassHash',
        'race_type' => 'getRaceType',
        'class_type' => 'getClassType',
        'gender_type' => 'getGenderType',
        'emblem_path' => 'getEmblemPath',
        'emblem_background_path' => 'getEmblemBackgroundPath',
        'emblem_hash' => 'getEmblemHash',
        'emblem_color' => 'getEmblemColor',
        'level_progression' => 'getLevelProgression',
        'base_character_level' => 'getBaseCharacterLevel',
        'percent_to_next_level' => 'getPercentToNextLevel',
        'title_record_hash' => 'getTitleRecordHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['membership_id'] = $data['membership_id'] ?? null;
        $this->container['membership_type'] = $data['membership_type'] ?? null;
        $this->container['character_id'] = $data['character_id'] ?? null;
        $this->container['date_last_played'] = $data['date_last_played'] ?? null;
        $this->container['minutes_played_this_session'] = $data['minutes_played_this_session'] ?? null;
        $this->container['minutes_played_total'] = $data['minutes_played_total'] ?? null;
        $this->container['light'] = $data['light'] ?? null;
        $this->container['stats'] = $data['stats'] ?? null;
        $this->container['race_hash'] = $data['race_hash'] ?? null;
        $this->container['gender_hash'] = $data['gender_hash'] ?? null;
        $this->container['class_hash'] = $data['class_hash'] ?? null;
        $this->container['race_type'] = $data['race_type'] ?? null;
        $this->container['class_type'] = $data['class_type'] ?? null;
        $this->container['gender_type'] = $data['gender_type'] ?? null;
        $this->container['emblem_path'] = $data['emblem_path'] ?? null;
        $this->container['emblem_background_path'] = $data['emblem_background_path'] ?? null;
        $this->container['emblem_hash'] = $data['emblem_hash'] ?? null;
        $this->container['emblem_color'] = $data['emblem_color'] ?? null;
        $this->container['level_progression'] = $data['level_progression'] ?? null;
        $this->container['base_character_level'] = $data['base_character_level'] ?? null;
        $this->container['percent_to_next_level'] = $data['percent_to_next_level'] ?? null;
        $this->container['title_record_hash'] = $data['title_record_hash'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets membership_id
     *
     * @return int|null
     */
    public function getMembershipId()
    {
        return $this->container['membership_id'];
    }

    /**
     * Sets membership_id
     *
     * @param int|null $membership_id Every Destiny Profile has a membershipId. This is provided on the character as well for convenience.
     *
     * @return self
     */
    public function setMembershipId($membership_id)
    {
        $this->container['membership_id'] = $membership_id;

        return $this;
    }

    /**
     * Gets membership_type
     *
     * @return int|null
     */
    public function getMembershipType()
    {
        return $this->container['membership_type'];
    }

    /**
     * Sets membership_type
     *
     * @param int|null $membership_type membershipType tells you the platform on which the character plays. Examine the BungieMembershipType enumeration for possible values.
     *
     * @return self
     */
    public function setMembershipType($membership_type)
    {
        $this->container['membership_type'] = $membership_type;

        return $this;
    }

    /**
     * Gets character_id
     *
     * @return int|null
     */
    public function getCharacterId()
    {
        return $this->container['character_id'];
    }

    /**
     * Sets character_id
     *
     * @param int|null $character_id The unique identifier for the character.
     *
     * @return self
     */
    public function setCharacterId($character_id)
    {
        $this->container['character_id'] = $character_id;

        return $this;
    }

    /**
     * Gets date_last_played
     *
     * @return \DateTime|null
     */
    public function getDateLastPlayed()
    {
        return $this->container['date_last_played'];
    }

    /**
     * Sets date_last_played
     *
     * @param \DateTime|null $date_last_played The last date that the user played Destiny.
     *
     * @return self
     */
    public function setDateLastPlayed($date_last_played)
    {
        $this->container['date_last_played'] = $date_last_played;

        return $this;
    }

    /**
     * Gets minutes_played_this_session
     *
     * @return int|null
     */
    public function getMinutesPlayedThisSession()
    {
        return $this->container['minutes_played_this_session'];
    }

    /**
     * Sets minutes_played_this_session
     *
     * @param int|null $minutes_played_this_session If the user is currently playing, this is how long they've been playing.
     *
     * @return self
     */
    public function setMinutesPlayedThisSession($minutes_played_this_session)
    {
        $this->container['minutes_played_this_session'] = $minutes_played_this_session;

        return $this;
    }

    /**
     * Gets minutes_played_total
     *
     * @return int|null
     */
    public function getMinutesPlayedTotal()
    {
        return $this->container['minutes_played_total'];
    }

    /**
     * Sets minutes_played_total
     *
     * @param int|null $minutes_played_total If this value is 525,600, then they played Destiny for a year. Or they're a very dedicated Rent fan. Note that this includes idle time, not just time spent actually in activities shooting things.
     *
     * @return self
     */
    public function setMinutesPlayedTotal($minutes_played_total)
    {
        $this->container['minutes_played_total'] = $minutes_played_total;

        return $this;
    }

    /**
     * Gets light
     *
     * @return int|null
     */
    public function getLight()
    {
        return $this->container['light'];
    }

    /**
     * Sets light
     *
     * @param int|null $light The user's calculated \"Light Level\". Light level is an indicator of your power that mostly matters in the end game, once you've reached the maximum character level: it's a level that's dependent on the average Attack/Defense power of your items.
     *
     * @return self
     */
    public function setLight($light)
    {
        $this->container['light'] = $light;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return map[string,int]|null
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param map[string,int]|null $stats Your character's stats, such as Agility, Resilience, etc... *not* historical stats.  You'll have to call a different endpoint for those.
     *
     * @return self
     */
    public function setStats($stats)
    {
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets race_hash
     *
     * @return int|null
     */
    public function getRaceHash()
    {
        return $this->container['race_hash'];
    }

    /**
     * Sets race_hash
     *
     * @param int|null $race_hash Use this hash to look up the character's DestinyRaceDefinition.
     *
     * @return self
     */
    public function setRaceHash($race_hash)
    {
        $this->container['race_hash'] = $race_hash;

        return $this;
    }

    /**
     * Gets gender_hash
     *
     * @return int|null
     */
    public function getGenderHash()
    {
        return $this->container['gender_hash'];
    }

    /**
     * Sets gender_hash
     *
     * @param int|null $gender_hash Use this hash to look up the character's DestinyGenderDefinition.
     *
     * @return self
     */
    public function setGenderHash($gender_hash)
    {
        $this->container['gender_hash'] = $gender_hash;

        return $this;
    }

    /**
     * Gets class_hash
     *
     * @return int|null
     */
    public function getClassHash()
    {
        return $this->container['class_hash'];
    }

    /**
     * Sets class_hash
     *
     * @param int|null $class_hash Use this hash to look up the character's DestinyClassDefinition.
     *
     * @return self
     */
    public function setClassHash($class_hash)
    {
        $this->container['class_hash'] = $class_hash;

        return $this;
    }

    /**
     * Gets race_type
     *
     * @return int|null
     */
    public function getRaceType()
    {
        return $this->container['race_type'];
    }

    /**
     * Sets race_type
     *
     * @param int|null $race_type Mostly for historical purposes at this point, this is an enumeration for the character's race.  It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove.
     *
     * @return self
     */
    public function setRaceType($race_type)
    {
        $this->container['race_type'] = $race_type;

        return $this;
    }

    /**
     * Gets class_type
     *
     * @return int|null
     */
    public function getClassType()
    {
        return $this->container['class_type'];
    }

    /**
     * Sets class_type
     *
     * @param int|null $class_type Mostly for historical purposes at this point, this is an enumeration for the character's class.  It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove.
     *
     * @return self
     */
    public function setClassType($class_type)
    {
        $this->container['class_type'] = $class_type;

        return $this;
    }

    /**
     * Gets gender_type
     *
     * @return int|null
     */
    public function getGenderType()
    {
        return $this->container['gender_type'];
    }

    /**
     * Sets gender_type
     *
     * @param int|null $gender_type Mostly for historical purposes at this point, this is an enumeration for the character's Gender.  It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove. And yeah, it's an enumeration and not a boolean. Fight me.
     *
     * @return self
     */
    public function setGenderType($gender_type)
    {
        $this->container['gender_type'] = $gender_type;

        return $this;
    }

    /**
     * Gets emblem_path
     *
     * @return string|null
     */
    public function getEmblemPath()
    {
        return $this->container['emblem_path'];
    }

    /**
     * Sets emblem_path
     *
     * @param string|null $emblem_path A shortcut path to the user's currently equipped emblem image. If you're just showing summary info for a user, this is more convenient than examining their equipped emblem and looking up the definition.
     *
     * @return self
     */
    public function setEmblemPath($emblem_path)
    {
        $this->container['emblem_path'] = $emblem_path;

        return $this;
    }

    /**
     * Gets emblem_background_path
     *
     * @return string|null
     */
    public function getEmblemBackgroundPath()
    {
        return $this->container['emblem_background_path'];
    }

    /**
     * Sets emblem_background_path
     *
     * @param string|null $emblem_background_path A shortcut path to the user's currently equipped emblem background image. If you're just showing summary info for a user, this is more convenient than examining their equipped emblem and looking up the definition.
     *
     * @return self
     */
    public function setEmblemBackgroundPath($emblem_background_path)
    {
        $this->container['emblem_background_path'] = $emblem_background_path;

        return $this;
    }

    /**
     * Gets emblem_hash
     *
     * @return int|null
     */
    public function getEmblemHash()
    {
        return $this->container['emblem_hash'];
    }

    /**
     * Sets emblem_hash
     *
     * @param int|null $emblem_hash The hash of the currently equipped emblem for the user. Can be used to look up the DestinyInventoryItemDefinition.
     *
     * @return self
     */
    public function setEmblemHash($emblem_hash)
    {
        $this->container['emblem_hash'] = $emblem_hash;

        return $this;
    }

    /**
     * Gets emblem_color
     *
     * @return DestinyMiscDestinyColor|null
     */
    public function getEmblemColor()
    {
        return $this->container['emblem_color'];
    }

    /**
     * Sets emblem_color
     *
     * @param DestinyMiscDestinyColor|null $emblem_color A shortcut for getting the background color of the user's currently equipped emblem without having to do a DestinyInventoryItemDefinition lookup.
     *
     * @return self
     */
    public function setEmblemColor($emblem_color)
    {
        $this->container['emblem_color'] = $emblem_color;

        return $this;
    }

    /**
     * Gets level_progression
     *
     * @return DestinyDestinyProgression|null
     */
    public function getLevelProgression()
    {
        return $this->container['level_progression'];
    }

    /**
     * Sets level_progression
     *
     * @param DestinyDestinyProgression|null $level_progression The progression that indicates your character's level. Not their light level, but their character level: you know, the thing you max out a couple hours in and then ignore for the sake of light level.
     *
     * @return self
     */
    public function setLevelProgression($level_progression)
    {
        $this->container['level_progression'] = $level_progression;

        return $this;
    }

    /**
     * Gets base_character_level
     *
     * @return int|null
     */
    public function getBaseCharacterLevel()
    {
        return $this->container['base_character_level'];
    }

    /**
     * Sets base_character_level
     *
     * @param int|null $base_character_level The \"base\" level of your character, not accounting for any light level.
     *
     * @return self
     */
    public function setBaseCharacterLevel($base_character_level)
    {
        $this->container['base_character_level'] = $base_character_level;

        return $this;
    }

    /**
     * Gets percent_to_next_level
     *
     * @return float|null
     */
    public function getPercentToNextLevel()
    {
        return $this->container['percent_to_next_level'];
    }

    /**
     * Sets percent_to_next_level
     *
     * @param float|null $percent_to_next_level A number between 0 and 100, indicating the whole and fractional % remaining to get to the next character level.
     *
     * @return self
     */
    public function setPercentToNextLevel($percent_to_next_level)
    {
        $this->container['percent_to_next_level'] = $percent_to_next_level;

        return $this;
    }

    /**
     * Gets title_record_hash
     *
     * @return int|null
     */
    public function getTitleRecordHash()
    {
        return $this->container['title_record_hash'];
    }

    /**
     * Sets title_record_hash
     *
     * @param int|null $title_record_hash If this Character has a title assigned to it, this is the identifier of the DestinyRecordDefinition that has that title information.
     *
     * @return self
     */
    public function setTitleRecordHash($title_record_hash)
    {
        $this->container['title_record_hash'] = $title_record_hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


