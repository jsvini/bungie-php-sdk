<?php
/**
 * GroupsV2GroupResponse
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GroupsV2GroupResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class GroupsV2GroupResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GroupsV2.GroupResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'detail' => '\OpenAPI\Client\Model\GroupsV2GroupV2',
        'founder' => '\OpenAPI\Client\Model\GroupsV2GroupMember',
        'allied_ids' => 'int[]',
        'parent_group' => '\OpenAPI\Client\Model\GroupsV2GroupV2',
        'alliance_status' => 'int',
        'group_join_invite_count' => 'int',
        'current_user_memberships_inactive_for_destiny' => 'bool',
        'current_user_member_map' => 'map[string,\OpenAPI\Client\Model\GroupsV2GroupMember]',
        'current_user_potential_member_map' => 'map[string,\OpenAPI\Client\Model\GroupsV2GroupPotentialMember]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'detail' => null,
        'founder' => null,
        'allied_ids' => 'int64',
        'parent_group' => null,
        'alliance_status' => 'int32',
        'group_join_invite_count' => 'int32',
        'current_user_memberships_inactive_for_destiny' => null,
        'current_user_member_map' => null,
        'current_user_potential_member_map' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'detail' => 'detail',
        'founder' => 'founder',
        'allied_ids' => 'alliedIds',
        'parent_group' => 'parentGroup',
        'alliance_status' => 'allianceStatus',
        'group_join_invite_count' => 'groupJoinInviteCount',
        'current_user_memberships_inactive_for_destiny' => 'currentUserMembershipsInactiveForDestiny',
        'current_user_member_map' => 'currentUserMemberMap',
        'current_user_potential_member_map' => 'currentUserPotentialMemberMap'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'detail' => 'setDetail',
        'founder' => 'setFounder',
        'allied_ids' => 'setAlliedIds',
        'parent_group' => 'setParentGroup',
        'alliance_status' => 'setAllianceStatus',
        'group_join_invite_count' => 'setGroupJoinInviteCount',
        'current_user_memberships_inactive_for_destiny' => 'setCurrentUserMembershipsInactiveForDestiny',
        'current_user_member_map' => 'setCurrentUserMemberMap',
        'current_user_potential_member_map' => 'setCurrentUserPotentialMemberMap'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'detail' => 'getDetail',
        'founder' => 'getFounder',
        'allied_ids' => 'getAlliedIds',
        'parent_group' => 'getParentGroup',
        'alliance_status' => 'getAllianceStatus',
        'group_join_invite_count' => 'getGroupJoinInviteCount',
        'current_user_memberships_inactive_for_destiny' => 'getCurrentUserMembershipsInactiveForDestiny',
        'current_user_member_map' => 'getCurrentUserMemberMap',
        'current_user_potential_member_map' => 'getCurrentUserPotentialMemberMap'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['detail'] = $data['detail'] ?? null;
        $this->container['founder'] = $data['founder'] ?? null;
        $this->container['allied_ids'] = $data['allied_ids'] ?? null;
        $this->container['parent_group'] = $data['parent_group'] ?? null;
        $this->container['alliance_status'] = $data['alliance_status'] ?? null;
        $this->container['group_join_invite_count'] = $data['group_join_invite_count'] ?? null;
        $this->container['current_user_memberships_inactive_for_destiny'] = $data['current_user_memberships_inactive_for_destiny'] ?? null;
        $this->container['current_user_member_map'] = $data['current_user_member_map'] ?? null;
        $this->container['current_user_potential_member_map'] = $data['current_user_potential_member_map'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets detail
     *
     * @return \OpenAPI\Client\Model\GroupsV2GroupV2|null
     */
    public function getDetail()
    {
        return $this->container['detail'];
    }

    /**
     * Sets detail
     *
     * @param \OpenAPI\Client\Model\GroupsV2GroupV2|null $detail detail
     *
     * @return self
     */
    public function setDetail($detail)
    {
        $this->container['detail'] = $detail;

        return $this;
    }

    /**
     * Gets founder
     *
     * @return \OpenAPI\Client\Model\GroupsV2GroupMember|null
     */
    public function getFounder()
    {
        return $this->container['founder'];
    }

    /**
     * Sets founder
     *
     * @param \OpenAPI\Client\Model\GroupsV2GroupMember|null $founder founder
     *
     * @return self
     */
    public function setFounder($founder)
    {
        $this->container['founder'] = $founder;

        return $this;
    }

    /**
     * Gets allied_ids
     *
     * @return int[]|null
     */
    public function getAlliedIds()
    {
        return $this->container['allied_ids'];
    }

    /**
     * Sets allied_ids
     *
     * @param int[]|null $allied_ids allied_ids
     *
     * @return self
     */
    public function setAlliedIds($allied_ids)
    {
        $this->container['allied_ids'] = $allied_ids;

        return $this;
    }

    /**
     * Gets parent_group
     *
     * @return \OpenAPI\Client\Model\GroupsV2GroupV2|null
     */
    public function getParentGroup()
    {
        return $this->container['parent_group'];
    }

    /**
     * Sets parent_group
     *
     * @param \OpenAPI\Client\Model\GroupsV2GroupV2|null $parent_group parent_group
     *
     * @return self
     */
    public function setParentGroup($parent_group)
    {
        $this->container['parent_group'] = $parent_group;

        return $this;
    }

    /**
     * Gets alliance_status
     *
     * @return int|null
     */
    public function getAllianceStatus()
    {
        return $this->container['alliance_status'];
    }

    /**
     * Sets alliance_status
     *
     * @param int|null $alliance_status alliance_status
     *
     * @return self
     */
    public function setAllianceStatus($alliance_status)
    {
        $this->container['alliance_status'] = $alliance_status;

        return $this;
    }

    /**
     * Gets group_join_invite_count
     *
     * @return int|null
     */
    public function getGroupJoinInviteCount()
    {
        return $this->container['group_join_invite_count'];
    }

    /**
     * Sets group_join_invite_count
     *
     * @param int|null $group_join_invite_count group_join_invite_count
     *
     * @return self
     */
    public function setGroupJoinInviteCount($group_join_invite_count)
    {
        $this->container['group_join_invite_count'] = $group_join_invite_count;

        return $this;
    }

    /**
     * Gets current_user_memberships_inactive_for_destiny
     *
     * @return bool|null
     */
    public function getCurrentUserMembershipsInactiveForDestiny()
    {
        return $this->container['current_user_memberships_inactive_for_destiny'];
    }

    /**
     * Sets current_user_memberships_inactive_for_destiny
     *
     * @param bool|null $current_user_memberships_inactive_for_destiny A convenience property that indicates if every membership you (the current user) have that is a part of this group are part of an account that is considered inactive - for example, overridden accounts in Cross Save.
     *
     * @return self
     */
    public function setCurrentUserMembershipsInactiveForDestiny($current_user_memberships_inactive_for_destiny)
    {
        $this->container['current_user_memberships_inactive_for_destiny'] = $current_user_memberships_inactive_for_destiny;

        return $this;
    }

    /**
     * Gets current_user_member_map
     *
     * @return map[string,\OpenAPI\Client\Model\GroupsV2GroupMember]|null
     */
    public function getCurrentUserMemberMap()
    {
        return $this->container['current_user_member_map'];
    }

    /**
     * Sets current_user_member_map
     *
     * @param map[string,\OpenAPI\Client\Model\GroupsV2GroupMember]|null $current_user_member_map This property will be populated if the authenticated user is a member of the group. Note that because of account linking, a user can sometimes be part of a clan more than once. As such, this returns the highest member type available.
     *
     * @return self
     */
    public function setCurrentUserMemberMap($current_user_member_map)
    {
        $this->container['current_user_member_map'] = $current_user_member_map;

        return $this;
    }

    /**
     * Gets current_user_potential_member_map
     *
     * @return map[string,\OpenAPI\Client\Model\GroupsV2GroupPotentialMember]|null
     */
    public function getCurrentUserPotentialMemberMap()
    {
        return $this->container['current_user_potential_member_map'];
    }

    /**
     * Sets current_user_potential_member_map
     *
     * @param map[string,\OpenAPI\Client\Model\GroupsV2GroupPotentialMember]|null $current_user_potential_member_map This property will be populated if the authenticated user is an applicant or has an outstanding invitation to join. Note that because of account linking, a user can sometimes be part of a clan more than once.
     *
     * @return self
     */
    public function setCurrentUserPotentialMemberMap($current_user_potential_member_map)
    {
        $this->container['current_user_potential_member_map'] = $current_user_potential_member_map;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


