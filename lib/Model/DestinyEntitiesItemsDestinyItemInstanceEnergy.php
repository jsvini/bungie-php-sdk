<?php
/**
 * DestinyEntitiesItemsDestinyItemInstanceEnergy
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyEntitiesItemsDestinyItemInstanceEnergy Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyEntitiesItemsDestinyItemInstanceEnergy implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Entities.Items.DestinyItemInstanceEnergy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'energy_type_hash' => 'int',
        'energy_type' => 'int',
        'energy_capacity' => 'int',
        'energy_used' => 'int',
        'energy_unused' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'energy_type_hash' => 'uint32',
        'energy_type' => 'int32',
        'energy_capacity' => 'int32',
        'energy_used' => 'int32',
        'energy_unused' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'energy_type_hash' => 'energyTypeHash',
        'energy_type' => 'energyType',
        'energy_capacity' => 'energyCapacity',
        'energy_used' => 'energyUsed',
        'energy_unused' => 'energyUnused'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'energy_type_hash' => 'setEnergyTypeHash',
        'energy_type' => 'setEnergyType',
        'energy_capacity' => 'setEnergyCapacity',
        'energy_used' => 'setEnergyUsed',
        'energy_unused' => 'setEnergyUnused'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'energy_type_hash' => 'getEnergyTypeHash',
        'energy_type' => 'getEnergyType',
        'energy_capacity' => 'getEnergyCapacity',
        'energy_used' => 'getEnergyUsed',
        'energy_unused' => 'getEnergyUnused'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['energy_type_hash'] = $data['energy_type_hash'] ?? null;
        $this->container['energy_type'] = $data['energy_type'] ?? null;
        $this->container['energy_capacity'] = $data['energy_capacity'] ?? null;
        $this->container['energy_used'] = $data['energy_used'] ?? null;
        $this->container['energy_unused'] = $data['energy_unused'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets energy_type_hash
     *
     * @return int|null
     */
    public function getEnergyTypeHash()
    {
        return $this->container['energy_type_hash'];
    }

    /**
     * Sets energy_type_hash
     *
     * @param int|null $energy_type_hash The type of energy for this item. Plugs that require Energy can only be inserted if they have the \"Any\" Energy Type or the matching energy type of this item. This is a reference to the DestinyEnergyTypeDefinition for the energy type, where you can find extended info about it.
     *
     * @return self
     */
    public function setEnergyTypeHash($energy_type_hash)
    {
        $this->container['energy_type_hash'] = $energy_type_hash;

        return $this;
    }

    /**
     * Gets energy_type
     *
     * @return int|null
     */
    public function getEnergyType()
    {
        return $this->container['energy_type'];
    }

    /**
     * Sets energy_type
     *
     * @param int|null $energy_type This is the enum version of the Energy Type value, for convenience.
     *
     * @return self
     */
    public function setEnergyType($energy_type)
    {
        $this->container['energy_type'] = $energy_type;

        return $this;
    }

    /**
     * Gets energy_capacity
     *
     * @return int|null
     */
    public function getEnergyCapacity()
    {
        return $this->container['energy_capacity'];
    }

    /**
     * Sets energy_capacity
     *
     * @param int|null $energy_capacity The total capacity of Energy that the item currently has, regardless of if it is currently being used.
     *
     * @return self
     */
    public function setEnergyCapacity($energy_capacity)
    {
        $this->container['energy_capacity'] = $energy_capacity;

        return $this;
    }

    /**
     * Gets energy_used
     *
     * @return int|null
     */
    public function getEnergyUsed()
    {
        return $this->container['energy_used'];
    }

    /**
     * Sets energy_used
     *
     * @param int|null $energy_used The amount of Energy currently in use by inserted plugs.
     *
     * @return self
     */
    public function setEnergyUsed($energy_used)
    {
        $this->container['energy_used'] = $energy_used;

        return $this;
    }

    /**
     * Gets energy_unused
     *
     * @return int|null
     */
    public function getEnergyUnused()
    {
        return $this->container['energy_unused'];
    }

    /**
     * Sets energy_unused
     *
     * @param int|null $energy_unused The amount of energy still available for inserting new plugs.
     *
     * @return self
     */
    public function setEnergyUnused($energy_unused)
    {
        $this->container['energy_unused'] = $energy_unused;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


