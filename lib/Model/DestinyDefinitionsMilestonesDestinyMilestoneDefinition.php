<?php
/**
 * DestinyDefinitionsMilestonesDestinyMilestoneDefinition
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyDefinitionsMilestonesDestinyMilestoneDefinition Class Doc Comment
 *
 * @category Class
 * @description Milestones are an in-game concept where they&#39;re attempting to tell you what you can do next in-game.  If that sounds a lot like Advisors in Destiny 1, it is! So we threw out Advisors in the Destiny 2 API and tacked all of the data we would have put on Advisors onto Milestones instead.  Each Milestone represents something going on in the game right now:  - A \&quot;ritual activity\&quot; you can perform, like nightfall  - A \&quot;special event\&quot; that may have activities related to it, like Taco Tuesday (there&#39;s no Taco Tuesday in Destiny 2)  - A checklist you can fulfill, like helping your Clan complete all of its weekly objectives  - A tutorial quest you can play through, like the introduction to the Crucible.  Most of these milestones appear in game as well. Some of them are BNet only, because we&#39;re so extra. You&#39;re welcome.  There are some important caveats to understand about how we currently render Milestones and their deficiencies. The game currently doesn&#39;t have any content that actually tells you oughtright *what* the Milestone is: that is to say, what you&#39;ll be doing. The best we get is either a description of the overall Milestone, or of the Quest that the Milestone is having you partake in: which is usually something that assumes you already know what it&#39;s talking about, like \&quot;Complete 5 Challenges\&quot;. 5 Challenges for what? What&#39;s a challenge? These are not questions that the Milestone data will answer for you unfortunately.  This isn&#39;t great, and in the future I&#39;d like to add some custom text to give you more contextual information to pass on to your users. But for now, you can do what we do to render what little display info we do have:  Start by looking at the currently active quest (ideally, you&#39;ve fetched DestinyMilestone or DestinyPublicMilestone data from the API, so you know the currently active quest for the Milestone in question). Look up the Quests property in the Milestone Definition, and check if it has display properties. If it does, show that as the description of the Milestone. If it doesn&#39;t, fall back on the Milestone&#39;s description.  This approach will let you avoid, whenever possible, the even less useful (and sometimes nonexistant) milestone-level names and descriptions.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyDefinitionsMilestonesDestinyMilestoneDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.Milestones.DestinyMilestoneDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'display_properties' => '\OpenAPI\Client\Model\DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition',
        'display_preference' => 'int',
        'image' => 'string',
        'milestone_type' => 'int',
        'recruitable' => 'bool',
        'friendly_name' => 'string',
        'show_in_explorer' => 'bool',
        'show_in_milestones' => 'bool',
        'explore_prioritizes_activity_image' => 'bool',
        'has_predictable_dates' => 'bool',
        'quests' => 'map[string,\OpenAPI\Client\Model\DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition]',
        'rewards' => 'map[string,\OpenAPI\Client\Model\DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition]',
        'vendors_display_title' => 'string',
        'vendors' => '\OpenAPI\Client\Model\DestinyDefinitionsMilestonesDestinyMilestoneVendorDefinition[]',
        'values' => 'map[string,\OpenAPI\Client\Model\DestinyDefinitionsMilestonesDestinyMilestoneValueDefinition]',
        'is_in_game_milestone' => 'bool',
        'activities' => '\OpenAPI\Client\Model\DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition[]',
        'default_order' => 'int',
        'hash' => 'int',
        'index' => 'int',
        'redacted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'display_properties' => null,
        'display_preference' => 'int32',
        'image' => null,
        'milestone_type' => 'int32',
        'recruitable' => null,
        'friendly_name' => null,
        'show_in_explorer' => null,
        'show_in_milestones' => null,
        'explore_prioritizes_activity_image' => null,
        'has_predictable_dates' => null,
        'quests' => null,
        'rewards' => null,
        'vendors_display_title' => null,
        'vendors' => null,
        'values' => null,
        'is_in_game_milestone' => null,
        'activities' => null,
        'default_order' => 'int32',
        'hash' => 'uint32',
        'index' => 'int32',
        'redacted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_properties' => 'displayProperties',
        'display_preference' => 'displayPreference',
        'image' => 'image',
        'milestone_type' => 'milestoneType',
        'recruitable' => 'recruitable',
        'friendly_name' => 'friendlyName',
        'show_in_explorer' => 'showInExplorer',
        'show_in_milestones' => 'showInMilestones',
        'explore_prioritizes_activity_image' => 'explorePrioritizesActivityImage',
        'has_predictable_dates' => 'hasPredictableDates',
        'quests' => 'quests',
        'rewards' => 'rewards',
        'vendors_display_title' => 'vendorsDisplayTitle',
        'vendors' => 'vendors',
        'values' => 'values',
        'is_in_game_milestone' => 'isInGameMilestone',
        'activities' => 'activities',
        'default_order' => 'defaultOrder',
        'hash' => 'hash',
        'index' => 'index',
        'redacted' => 'redacted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_properties' => 'setDisplayProperties',
        'display_preference' => 'setDisplayPreference',
        'image' => 'setImage',
        'milestone_type' => 'setMilestoneType',
        'recruitable' => 'setRecruitable',
        'friendly_name' => 'setFriendlyName',
        'show_in_explorer' => 'setShowInExplorer',
        'show_in_milestones' => 'setShowInMilestones',
        'explore_prioritizes_activity_image' => 'setExplorePrioritizesActivityImage',
        'has_predictable_dates' => 'setHasPredictableDates',
        'quests' => 'setQuests',
        'rewards' => 'setRewards',
        'vendors_display_title' => 'setVendorsDisplayTitle',
        'vendors' => 'setVendors',
        'values' => 'setValues',
        'is_in_game_milestone' => 'setIsInGameMilestone',
        'activities' => 'setActivities',
        'default_order' => 'setDefaultOrder',
        'hash' => 'setHash',
        'index' => 'setIndex',
        'redacted' => 'setRedacted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_properties' => 'getDisplayProperties',
        'display_preference' => 'getDisplayPreference',
        'image' => 'getImage',
        'milestone_type' => 'getMilestoneType',
        'recruitable' => 'getRecruitable',
        'friendly_name' => 'getFriendlyName',
        'show_in_explorer' => 'getShowInExplorer',
        'show_in_milestones' => 'getShowInMilestones',
        'explore_prioritizes_activity_image' => 'getExplorePrioritizesActivityImage',
        'has_predictable_dates' => 'getHasPredictableDates',
        'quests' => 'getQuests',
        'rewards' => 'getRewards',
        'vendors_display_title' => 'getVendorsDisplayTitle',
        'vendors' => 'getVendors',
        'values' => 'getValues',
        'is_in_game_milestone' => 'getIsInGameMilestone',
        'activities' => 'getActivities',
        'default_order' => 'getDefaultOrder',
        'hash' => 'getHash',
        'index' => 'getIndex',
        'redacted' => 'getRedacted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['display_properties'] = $data['display_properties'] ?? null;
        $this->container['display_preference'] = $data['display_preference'] ?? null;
        $this->container['image'] = $data['image'] ?? null;
        $this->container['milestone_type'] = $data['milestone_type'] ?? null;
        $this->container['recruitable'] = $data['recruitable'] ?? null;
        $this->container['friendly_name'] = $data['friendly_name'] ?? null;
        $this->container['show_in_explorer'] = $data['show_in_explorer'] ?? null;
        $this->container['show_in_milestones'] = $data['show_in_milestones'] ?? null;
        $this->container['explore_prioritizes_activity_image'] = $data['explore_prioritizes_activity_image'] ?? null;
        $this->container['has_predictable_dates'] = $data['has_predictable_dates'] ?? null;
        $this->container['quests'] = $data['quests'] ?? null;
        $this->container['rewards'] = $data['rewards'] ?? null;
        $this->container['vendors_display_title'] = $data['vendors_display_title'] ?? null;
        $this->container['vendors'] = $data['vendors'] ?? null;
        $this->container['values'] = $data['values'] ?? null;
        $this->container['is_in_game_milestone'] = $data['is_in_game_milestone'] ?? null;
        $this->container['activities'] = $data['activities'] ?? null;
        $this->container['default_order'] = $data['default_order'] ?? null;
        $this->container['hash'] = $data['hash'] ?? null;
        $this->container['index'] = $data['index'] ?? null;
        $this->container['redacted'] = $data['redacted'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets display_properties
     *
     * @return \OpenAPI\Client\Model\DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null
     */
    public function getDisplayProperties()
    {
        return $this->container['display_properties'];
    }

    /**
     * Sets display_properties
     *
     * @param \OpenAPI\Client\Model\DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null $display_properties display_properties
     *
     * @return self
     */
    public function setDisplayProperties($display_properties)
    {
        $this->container['display_properties'] = $display_properties;

        return $this;
    }

    /**
     * Gets display_preference
     *
     * @return int|null
     */
    public function getDisplayPreference()
    {
        return $this->container['display_preference'];
    }

    /**
     * Sets display_preference
     *
     * @param int|null $display_preference A hint to the UI to indicate what to show as the display properties for this Milestone when showing \"Live\" milestone data. Feel free to show more than this if desired: this hint is meant to simplify our own UI, but it may prove useful to you as well.
     *
     * @return self
     */
    public function setDisplayPreference($display_preference)
    {
        $this->container['display_preference'] = $display_preference;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string|null $image A custom image someone made just for the milestone. Isn't that special?
     *
     * @return self
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets milestone_type
     *
     * @return int|null
     */
    public function getMilestoneType()
    {
        return $this->container['milestone_type'];
    }

    /**
     * Sets milestone_type
     *
     * @param int|null $milestone_type An enumeration listing one of the possible types of milestones. Check out the DestinyMilestoneType enum for more info!
     *
     * @return self
     */
    public function setMilestoneType($milestone_type)
    {
        $this->container['milestone_type'] = $milestone_type;

        return $this;
    }

    /**
     * Gets recruitable
     *
     * @return bool|null
     */
    public function getRecruitable()
    {
        return $this->container['recruitable'];
    }

    /**
     * Sets recruitable
     *
     * @param bool|null $recruitable If True, then the Milestone has been integrated with BNet's recruiting feature.
     *
     * @return self
     */
    public function setRecruitable($recruitable)
    {
        $this->container['recruitable'] = $recruitable;

        return $this;
    }

    /**
     * Gets friendly_name
     *
     * @return string|null
     */
    public function getFriendlyName()
    {
        return $this->container['friendly_name'];
    }

    /**
     * Sets friendly_name
     *
     * @param string|null $friendly_name If the milestone has a friendly identifier for association with other features - such as Recruiting - that identifier can be found here. This is \"friendly\" in that it looks better in a URL than whatever the identifier for the Milestone actually is.
     *
     * @return self
     */
    public function setFriendlyName($friendly_name)
    {
        $this->container['friendly_name'] = $friendly_name;

        return $this;
    }

    /**
     * Gets show_in_explorer
     *
     * @return bool|null
     */
    public function getShowInExplorer()
    {
        return $this->container['show_in_explorer'];
    }

    /**
     * Sets show_in_explorer
     *
     * @param bool|null $show_in_explorer If TRUE, this entry should be returned in the list of milestones for the \"Explore Destiny\" (i.e. new BNet homepage) features of Bungie.net (as long as the underlying event is active) Note that this is a property specifically used by BNet and the companion app for the \"Live Events\" feature of the front page/welcome view: it's not a reflection of what you see in-game.
     *
     * @return self
     */
    public function setShowInExplorer($show_in_explorer)
    {
        $this->container['show_in_explorer'] = $show_in_explorer;

        return $this;
    }

    /**
     * Gets show_in_milestones
     *
     * @return bool|null
     */
    public function getShowInMilestones()
    {
        return $this->container['show_in_milestones'];
    }

    /**
     * Sets show_in_milestones
     *
     * @param bool|null $show_in_milestones Determines whether we'll show this Milestone in the user's personal Milestones list.
     *
     * @return self
     */
    public function setShowInMilestones($show_in_milestones)
    {
        $this->container['show_in_milestones'] = $show_in_milestones;

        return $this;
    }

    /**
     * Gets explore_prioritizes_activity_image
     *
     * @return bool|null
     */
    public function getExplorePrioritizesActivityImage()
    {
        return $this->container['explore_prioritizes_activity_image'];
    }

    /**
     * Sets explore_prioritizes_activity_image
     *
     * @param bool|null $explore_prioritizes_activity_image If TRUE, \"Explore Destiny\" (the front page of BNet and the companion app) prioritize using the activity image over any overriding Quest or Milestone image provided. This unfortunate hack is brought to you by Trials of The Nine.
     *
     * @return self
     */
    public function setExplorePrioritizesActivityImage($explore_prioritizes_activity_image)
    {
        $this->container['explore_prioritizes_activity_image'] = $explore_prioritizes_activity_image;

        return $this;
    }

    /**
     * Gets has_predictable_dates
     *
     * @return bool|null
     */
    public function getHasPredictableDates()
    {
        return $this->container['has_predictable_dates'];
    }

    /**
     * Sets has_predictable_dates
     *
     * @param bool|null $has_predictable_dates A shortcut for clients - and the server - to understand whether we can predict the start and end dates for this event. In practice, there are multiple ways that an event could have predictable date ranges, but not all events will be able to be predicted via any mechanism (for instance, events that are manually triggered on and off)
     *
     * @return self
     */
    public function setHasPredictableDates($has_predictable_dates)
    {
        $this->container['has_predictable_dates'] = $has_predictable_dates;

        return $this;
    }

    /**
     * Gets quests
     *
     * @return map[string,\OpenAPI\Client\Model\DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition]|null
     */
    public function getQuests()
    {
        return $this->container['quests'];
    }

    /**
     * Sets quests
     *
     * @param map[string,\OpenAPI\Client\Model\DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition]|null $quests The full set of possible Quests that give the overview of the Milestone event/activity in question. Only one of these can be active at a time for a given Conceptual Milestone, but many of them may be \"available\" for the user to choose from. (for instance, with Milestones you can choose from the three available Quests, but only one can be active at a time) Keyed by the quest item.  As of Forsaken (~September 2018), Quest-style Milestones are being removed for many types of activities. There will likely be further revisions to the Milestone concept in the future.
     *
     * @return self
     */
    public function setQuests($quests)
    {
        $this->container['quests'] = $quests;

        return $this;
    }

    /**
     * Gets rewards
     *
     * @return map[string,\OpenAPI\Client\Model\DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition]|null
     */
    public function getRewards()
    {
        return $this->container['rewards'];
    }

    /**
     * Sets rewards
     *
     * @param map[string,\OpenAPI\Client\Model\DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition]|null $rewards If this milestone can provide rewards, this will define the categories into which the individual reward entries are placed.  This is keyed by the Category's hash, which is only guaranteed to be unique within a given Milestone.
     *
     * @return self
     */
    public function setRewards($rewards)
    {
        $this->container['rewards'] = $rewards;

        return $this;
    }

    /**
     * Gets vendors_display_title
     *
     * @return string|null
     */
    public function getVendorsDisplayTitle()
    {
        return $this->container['vendors_display_title'];
    }

    /**
     * Sets vendors_display_title
     *
     * @param string|null $vendors_display_title If you're going to show Vendors for the Milestone, you can use this as a localized \"header\" for the section where you show that vendor data. It'll provide a more context-relevant clue about what the vendor's role is in the Milestone.
     *
     * @return self
     */
    public function setVendorsDisplayTitle($vendors_display_title)
    {
        $this->container['vendors_display_title'] = $vendors_display_title;

        return $this;
    }

    /**
     * Gets vendors
     *
     * @return \OpenAPI\Client\Model\DestinyDefinitionsMilestonesDestinyMilestoneVendorDefinition[]|null
     */
    public function getVendors()
    {
        return $this->container['vendors'];
    }

    /**
     * Sets vendors
     *
     * @param \OpenAPI\Client\Model\DestinyDefinitionsMilestonesDestinyMilestoneVendorDefinition[]|null $vendors Sometimes, milestones will have rewards provided by Vendors. This definition gives the information needed to understand which vendors are relevant, the order in which they should be returned if order matters, and the conditions under which the Vendor is relevant to the user.
     *
     * @return self
     */
    public function setVendors($vendors)
    {
        $this->container['vendors'] = $vendors;

        return $this;
    }

    /**
     * Gets values
     *
     * @return map[string,\OpenAPI\Client\Model\DestinyDefinitionsMilestonesDestinyMilestoneValueDefinition]|null
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     *
     * @param map[string,\OpenAPI\Client\Model\DestinyDefinitionsMilestonesDestinyMilestoneValueDefinition]|null $values Sometimes, milestones will have arbitrary values associated with them that are of interest to us or to third party developers. This is the collection of those values' definitions, keyed by the identifier of the value and providing useful definition information such as localizable names and descriptions for the value.
     *
     * @return self
     */
    public function setValues($values)
    {
        $this->container['values'] = $values;

        return $this;
    }

    /**
     * Gets is_in_game_milestone
     *
     * @return bool|null
     */
    public function getIsInGameMilestone()
    {
        return $this->container['is_in_game_milestone'];
    }

    /**
     * Sets is_in_game_milestone
     *
     * @param bool|null $is_in_game_milestone Some milestones are explicit objectives that you can see and interact with in the game. Some milestones are more conceptual, built by BNet to help advise you on activities and events that happen in-game but that aren't explicitly shown in game as Milestones. If this is TRUE, you can see this as a milestone in the game. If this is FALSE, it's an event or activity you can participate in, but you won't see it as a Milestone in the game's UI.
     *
     * @return self
     */
    public function setIsInGameMilestone($is_in_game_milestone)
    {
        $this->container['is_in_game_milestone'] = $is_in_game_milestone;

        return $this;
    }

    /**
     * Gets activities
     *
     * @return \OpenAPI\Client\Model\DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition[]|null
     */
    public function getActivities()
    {
        return $this->container['activities'];
    }

    /**
     * Sets activities
     *
     * @param \OpenAPI\Client\Model\DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition[]|null $activities A Milestone can now be represented by one or more activities directly (without a backing Quest), and that activity can have many challenges, modifiers, and related to it.
     *
     * @return self
     */
    public function setActivities($activities)
    {
        $this->container['activities'] = $activities;

        return $this;
    }

    /**
     * Gets default_order
     *
     * @return int|null
     */
    public function getDefaultOrder()
    {
        return $this->container['default_order'];
    }

    /**
     * Sets default_order
     *
     * @param int|null $default_order default_order
     *
     * @return self
     */
    public function setDefaultOrder($default_order)
    {
        $this->container['default_order'] = $default_order;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return int|null
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param int|null $hash The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
     *
     * @return self
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int|null
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int|null $index The index of the entity as it was found in the investment tables.
     *
     * @return self
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets redacted
     *
     * @return bool|null
     */
    public function getRedacted()
    {
        return $this->container['redacted'];
    }

    /**
     * Sets redacted
     *
     * @param bool|null $redacted If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
     *
     * @return self
     */
    public function setRedacted($redacted)
    {
        $this->container['redacted'] = $redacted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


