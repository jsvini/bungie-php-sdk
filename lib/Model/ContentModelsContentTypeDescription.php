<?php
/**
 * ContentModelsContentTypeDescription
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ContentModelsContentTypeDescription Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ContentModelsContentTypeDescription implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Content.Models.ContentTypeDescription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'c_type' => 'string',
        'name' => 'string',
        'content_description' => 'string',
        'preview_image' => 'string',
        'priority' => 'int',
        'reminder' => 'string',
        'properties' => '\OpenAPI\Client\Model\ContentModelsContentTypeProperty[]',
        'tag_metadata' => '\OpenAPI\Client\Model\ContentModelsTagMetadataDefinition[]',
        'tag_metadata_items' => 'map[string,\OpenAPI\Client\Model\ContentModelsTagMetadataItem]',
        'usage_examples' => 'string[]',
        'show_in_content_editor' => 'bool',
        'type_of' => 'string',
        'bind_identifier_to_property' => 'string',
        'bound_regex' => 'string',
        'force_identifier_binding' => 'bool',
        'allow_comments' => 'bool',
        'auto_english_property_fallback' => 'bool',
        'bulk_uploadable' => 'bool',
        'previews' => '\OpenAPI\Client\Model\ContentModelsContentPreview[]',
        'suppress_cms_path' => 'bool',
        'property_sections' => '\OpenAPI\Client\Model\ContentModelsContentTypePropertySection[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'c_type' => null,
        'name' => null,
        'content_description' => null,
        'preview_image' => null,
        'priority' => 'int32',
        'reminder' => null,
        'properties' => null,
        'tag_metadata' => null,
        'tag_metadata_items' => null,
        'usage_examples' => null,
        'show_in_content_editor' => null,
        'type_of' => null,
        'bind_identifier_to_property' => null,
        'bound_regex' => null,
        'force_identifier_binding' => null,
        'allow_comments' => null,
        'auto_english_property_fallback' => null,
        'bulk_uploadable' => null,
        'previews' => null,
        'suppress_cms_path' => null,
        'property_sections' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'c_type' => 'cType',
        'name' => 'name',
        'content_description' => 'contentDescription',
        'preview_image' => 'previewImage',
        'priority' => 'priority',
        'reminder' => 'reminder',
        'properties' => 'properties',
        'tag_metadata' => 'tagMetadata',
        'tag_metadata_items' => 'tagMetadataItems',
        'usage_examples' => 'usageExamples',
        'show_in_content_editor' => 'showInContentEditor',
        'type_of' => 'typeOf',
        'bind_identifier_to_property' => 'bindIdentifierToProperty',
        'bound_regex' => 'boundRegex',
        'force_identifier_binding' => 'forceIdentifierBinding',
        'allow_comments' => 'allowComments',
        'auto_english_property_fallback' => 'autoEnglishPropertyFallback',
        'bulk_uploadable' => 'bulkUploadable',
        'previews' => 'previews',
        'suppress_cms_path' => 'suppressCmsPath',
        'property_sections' => 'propertySections'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'c_type' => 'setCType',
        'name' => 'setName',
        'content_description' => 'setContentDescription',
        'preview_image' => 'setPreviewImage',
        'priority' => 'setPriority',
        'reminder' => 'setReminder',
        'properties' => 'setProperties',
        'tag_metadata' => 'setTagMetadata',
        'tag_metadata_items' => 'setTagMetadataItems',
        'usage_examples' => 'setUsageExamples',
        'show_in_content_editor' => 'setShowInContentEditor',
        'type_of' => 'setTypeOf',
        'bind_identifier_to_property' => 'setBindIdentifierToProperty',
        'bound_regex' => 'setBoundRegex',
        'force_identifier_binding' => 'setForceIdentifierBinding',
        'allow_comments' => 'setAllowComments',
        'auto_english_property_fallback' => 'setAutoEnglishPropertyFallback',
        'bulk_uploadable' => 'setBulkUploadable',
        'previews' => 'setPreviews',
        'suppress_cms_path' => 'setSuppressCmsPath',
        'property_sections' => 'setPropertySections'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'c_type' => 'getCType',
        'name' => 'getName',
        'content_description' => 'getContentDescription',
        'preview_image' => 'getPreviewImage',
        'priority' => 'getPriority',
        'reminder' => 'getReminder',
        'properties' => 'getProperties',
        'tag_metadata' => 'getTagMetadata',
        'tag_metadata_items' => 'getTagMetadataItems',
        'usage_examples' => 'getUsageExamples',
        'show_in_content_editor' => 'getShowInContentEditor',
        'type_of' => 'getTypeOf',
        'bind_identifier_to_property' => 'getBindIdentifierToProperty',
        'bound_regex' => 'getBoundRegex',
        'force_identifier_binding' => 'getForceIdentifierBinding',
        'allow_comments' => 'getAllowComments',
        'auto_english_property_fallback' => 'getAutoEnglishPropertyFallback',
        'bulk_uploadable' => 'getBulkUploadable',
        'previews' => 'getPreviews',
        'suppress_cms_path' => 'getSuppressCmsPath',
        'property_sections' => 'getPropertySections'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['c_type'] = $data['c_type'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['content_description'] = $data['content_description'] ?? null;
        $this->container['preview_image'] = $data['preview_image'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['reminder'] = $data['reminder'] ?? null;
        $this->container['properties'] = $data['properties'] ?? null;
        $this->container['tag_metadata'] = $data['tag_metadata'] ?? null;
        $this->container['tag_metadata_items'] = $data['tag_metadata_items'] ?? null;
        $this->container['usage_examples'] = $data['usage_examples'] ?? null;
        $this->container['show_in_content_editor'] = $data['show_in_content_editor'] ?? null;
        $this->container['type_of'] = $data['type_of'] ?? null;
        $this->container['bind_identifier_to_property'] = $data['bind_identifier_to_property'] ?? null;
        $this->container['bound_regex'] = $data['bound_regex'] ?? null;
        $this->container['force_identifier_binding'] = $data['force_identifier_binding'] ?? null;
        $this->container['allow_comments'] = $data['allow_comments'] ?? null;
        $this->container['auto_english_property_fallback'] = $data['auto_english_property_fallback'] ?? null;
        $this->container['bulk_uploadable'] = $data['bulk_uploadable'] ?? null;
        $this->container['previews'] = $data['previews'] ?? null;
        $this->container['suppress_cms_path'] = $data['suppress_cms_path'] ?? null;
        $this->container['property_sections'] = $data['property_sections'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets c_type
     *
     * @return string|null
     */
    public function getCType()
    {
        return $this->container['c_type'];
    }

    /**
     * Sets c_type
     *
     * @param string|null $c_type c_type
     *
     * @return self
     */
    public function setCType($c_type)
    {
        $this->container['c_type'] = $c_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets content_description
     *
     * @return string|null
     */
    public function getContentDescription()
    {
        return $this->container['content_description'];
    }

    /**
     * Sets content_description
     *
     * @param string|null $content_description content_description
     *
     * @return self
     */
    public function setContentDescription($content_description)
    {
        $this->container['content_description'] = $content_description;

        return $this;
    }

    /**
     * Gets preview_image
     *
     * @return string|null
     */
    public function getPreviewImage()
    {
        return $this->container['preview_image'];
    }

    /**
     * Sets preview_image
     *
     * @param string|null $preview_image preview_image
     *
     * @return self
     */
    public function setPreviewImage($preview_image)
    {
        $this->container['preview_image'] = $preview_image;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority priority
     *
     * @return self
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets reminder
     *
     * @return string|null
     */
    public function getReminder()
    {
        return $this->container['reminder'];
    }

    /**
     * Sets reminder
     *
     * @param string|null $reminder reminder
     *
     * @return self
     */
    public function setReminder($reminder)
    {
        $this->container['reminder'] = $reminder;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \OpenAPI\Client\Model\ContentModelsContentTypeProperty[]|null
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \OpenAPI\Client\Model\ContentModelsContentTypeProperty[]|null $properties properties
     *
     * @return self
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets tag_metadata
     *
     * @return \OpenAPI\Client\Model\ContentModelsTagMetadataDefinition[]|null
     */
    public function getTagMetadata()
    {
        return $this->container['tag_metadata'];
    }

    /**
     * Sets tag_metadata
     *
     * @param \OpenAPI\Client\Model\ContentModelsTagMetadataDefinition[]|null $tag_metadata tag_metadata
     *
     * @return self
     */
    public function setTagMetadata($tag_metadata)
    {
        $this->container['tag_metadata'] = $tag_metadata;

        return $this;
    }

    /**
     * Gets tag_metadata_items
     *
     * @return map[string,\OpenAPI\Client\Model\ContentModelsTagMetadataItem]|null
     */
    public function getTagMetadataItems()
    {
        return $this->container['tag_metadata_items'];
    }

    /**
     * Sets tag_metadata_items
     *
     * @param map[string,\OpenAPI\Client\Model\ContentModelsTagMetadataItem]|null $tag_metadata_items tag_metadata_items
     *
     * @return self
     */
    public function setTagMetadataItems($tag_metadata_items)
    {
        $this->container['tag_metadata_items'] = $tag_metadata_items;

        return $this;
    }

    /**
     * Gets usage_examples
     *
     * @return string[]|null
     */
    public function getUsageExamples()
    {
        return $this->container['usage_examples'];
    }

    /**
     * Sets usage_examples
     *
     * @param string[]|null $usage_examples usage_examples
     *
     * @return self
     */
    public function setUsageExamples($usage_examples)
    {
        $this->container['usage_examples'] = $usage_examples;

        return $this;
    }

    /**
     * Gets show_in_content_editor
     *
     * @return bool|null
     */
    public function getShowInContentEditor()
    {
        return $this->container['show_in_content_editor'];
    }

    /**
     * Sets show_in_content_editor
     *
     * @param bool|null $show_in_content_editor show_in_content_editor
     *
     * @return self
     */
    public function setShowInContentEditor($show_in_content_editor)
    {
        $this->container['show_in_content_editor'] = $show_in_content_editor;

        return $this;
    }

    /**
     * Gets type_of
     *
     * @return string|null
     */
    public function getTypeOf()
    {
        return $this->container['type_of'];
    }

    /**
     * Sets type_of
     *
     * @param string|null $type_of type_of
     *
     * @return self
     */
    public function setTypeOf($type_of)
    {
        $this->container['type_of'] = $type_of;

        return $this;
    }

    /**
     * Gets bind_identifier_to_property
     *
     * @return string|null
     */
    public function getBindIdentifierToProperty()
    {
        return $this->container['bind_identifier_to_property'];
    }

    /**
     * Sets bind_identifier_to_property
     *
     * @param string|null $bind_identifier_to_property bind_identifier_to_property
     *
     * @return self
     */
    public function setBindIdentifierToProperty($bind_identifier_to_property)
    {
        $this->container['bind_identifier_to_property'] = $bind_identifier_to_property;

        return $this;
    }

    /**
     * Gets bound_regex
     *
     * @return string|null
     */
    public function getBoundRegex()
    {
        return $this->container['bound_regex'];
    }

    /**
     * Sets bound_regex
     *
     * @param string|null $bound_regex bound_regex
     *
     * @return self
     */
    public function setBoundRegex($bound_regex)
    {
        $this->container['bound_regex'] = $bound_regex;

        return $this;
    }

    /**
     * Gets force_identifier_binding
     *
     * @return bool|null
     */
    public function getForceIdentifierBinding()
    {
        return $this->container['force_identifier_binding'];
    }

    /**
     * Sets force_identifier_binding
     *
     * @param bool|null $force_identifier_binding force_identifier_binding
     *
     * @return self
     */
    public function setForceIdentifierBinding($force_identifier_binding)
    {
        $this->container['force_identifier_binding'] = $force_identifier_binding;

        return $this;
    }

    /**
     * Gets allow_comments
     *
     * @return bool|null
     */
    public function getAllowComments()
    {
        return $this->container['allow_comments'];
    }

    /**
     * Sets allow_comments
     *
     * @param bool|null $allow_comments allow_comments
     *
     * @return self
     */
    public function setAllowComments($allow_comments)
    {
        $this->container['allow_comments'] = $allow_comments;

        return $this;
    }

    /**
     * Gets auto_english_property_fallback
     *
     * @return bool|null
     */
    public function getAutoEnglishPropertyFallback()
    {
        return $this->container['auto_english_property_fallback'];
    }

    /**
     * Sets auto_english_property_fallback
     *
     * @param bool|null $auto_english_property_fallback auto_english_property_fallback
     *
     * @return self
     */
    public function setAutoEnglishPropertyFallback($auto_english_property_fallback)
    {
        $this->container['auto_english_property_fallback'] = $auto_english_property_fallback;

        return $this;
    }

    /**
     * Gets bulk_uploadable
     *
     * @return bool|null
     */
    public function getBulkUploadable()
    {
        return $this->container['bulk_uploadable'];
    }

    /**
     * Sets bulk_uploadable
     *
     * @param bool|null $bulk_uploadable bulk_uploadable
     *
     * @return self
     */
    public function setBulkUploadable($bulk_uploadable)
    {
        $this->container['bulk_uploadable'] = $bulk_uploadable;

        return $this;
    }

    /**
     * Gets previews
     *
     * @return \OpenAPI\Client\Model\ContentModelsContentPreview[]|null
     */
    public function getPreviews()
    {
        return $this->container['previews'];
    }

    /**
     * Sets previews
     *
     * @param \OpenAPI\Client\Model\ContentModelsContentPreview[]|null $previews previews
     *
     * @return self
     */
    public function setPreviews($previews)
    {
        $this->container['previews'] = $previews;

        return $this;
    }

    /**
     * Gets suppress_cms_path
     *
     * @return bool|null
     */
    public function getSuppressCmsPath()
    {
        return $this->container['suppress_cms_path'];
    }

    /**
     * Sets suppress_cms_path
     *
     * @param bool|null $suppress_cms_path suppress_cms_path
     *
     * @return self
     */
    public function setSuppressCmsPath($suppress_cms_path)
    {
        $this->container['suppress_cms_path'] = $suppress_cms_path;

        return $this;
    }

    /**
     * Gets property_sections
     *
     * @return \OpenAPI\Client\Model\ContentModelsContentTypePropertySection[]|null
     */
    public function getPropertySections()
    {
        return $this->container['property_sections'];
    }

    /**
     * Sets property_sections
     *
     * @param \OpenAPI\Client\Model\ContentModelsContentTypePropertySection[]|null $property_sections property_sections
     *
     * @return self
     */
    public function setPropertySections($property_sections)
    {
        $this->container['property_sections'] = $property_sections;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


