<?php
/**
 * FireteamFireteamSummary
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FireteamFireteamSummary Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class FireteamFireteamSummary implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Fireteam.FireteamSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fireteam_id' => 'int',
        'group_id' => 'int',
        'platform' => 'int',
        'activity_type' => 'int',
        'is_immediate' => 'bool',
        'scheduled_time' => '\DateTime',
        'owner_membership_id' => 'int',
        'player_slot_count' => 'int',
        'alternate_slot_count' => 'int',
        'available_player_slot_count' => 'int',
        'available_alternate_slot_count' => 'int',
        'title' => 'string',
        'date_created' => '\DateTime',
        'date_modified' => '\DateTime',
        'is_public' => 'bool',
        'locale' => 'string',
        'is_valid' => 'bool',
        'date_player_modified' => '\DateTime',
        'title_before_moderation' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fireteam_id' => 'int64',
        'group_id' => 'int64',
        'platform' => 'byte',
        'activity_type' => 'int32',
        'is_immediate' => null,
        'scheduled_time' => 'date-time',
        'owner_membership_id' => 'int64',
        'player_slot_count' => 'int32',
        'alternate_slot_count' => 'int32',
        'available_player_slot_count' => 'int32',
        'available_alternate_slot_count' => 'int32',
        'title' => null,
        'date_created' => 'date-time',
        'date_modified' => 'date-time',
        'is_public' => null,
        'locale' => null,
        'is_valid' => null,
        'date_player_modified' => 'date-time',
        'title_before_moderation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fireteam_id' => 'fireteamId',
        'group_id' => 'groupId',
        'platform' => 'platform',
        'activity_type' => 'activityType',
        'is_immediate' => 'isImmediate',
        'scheduled_time' => 'scheduledTime',
        'owner_membership_id' => 'ownerMembershipId',
        'player_slot_count' => 'playerSlotCount',
        'alternate_slot_count' => 'alternateSlotCount',
        'available_player_slot_count' => 'availablePlayerSlotCount',
        'available_alternate_slot_count' => 'availableAlternateSlotCount',
        'title' => 'title',
        'date_created' => 'dateCreated',
        'date_modified' => 'dateModified',
        'is_public' => 'isPublic',
        'locale' => 'locale',
        'is_valid' => 'isValid',
        'date_player_modified' => 'datePlayerModified',
        'title_before_moderation' => 'titleBeforeModeration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fireteam_id' => 'setFireteamId',
        'group_id' => 'setGroupId',
        'platform' => 'setPlatform',
        'activity_type' => 'setActivityType',
        'is_immediate' => 'setIsImmediate',
        'scheduled_time' => 'setScheduledTime',
        'owner_membership_id' => 'setOwnerMembershipId',
        'player_slot_count' => 'setPlayerSlotCount',
        'alternate_slot_count' => 'setAlternateSlotCount',
        'available_player_slot_count' => 'setAvailablePlayerSlotCount',
        'available_alternate_slot_count' => 'setAvailableAlternateSlotCount',
        'title' => 'setTitle',
        'date_created' => 'setDateCreated',
        'date_modified' => 'setDateModified',
        'is_public' => 'setIsPublic',
        'locale' => 'setLocale',
        'is_valid' => 'setIsValid',
        'date_player_modified' => 'setDatePlayerModified',
        'title_before_moderation' => 'setTitleBeforeModeration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fireteam_id' => 'getFireteamId',
        'group_id' => 'getGroupId',
        'platform' => 'getPlatform',
        'activity_type' => 'getActivityType',
        'is_immediate' => 'getIsImmediate',
        'scheduled_time' => 'getScheduledTime',
        'owner_membership_id' => 'getOwnerMembershipId',
        'player_slot_count' => 'getPlayerSlotCount',
        'alternate_slot_count' => 'getAlternateSlotCount',
        'available_player_slot_count' => 'getAvailablePlayerSlotCount',
        'available_alternate_slot_count' => 'getAvailableAlternateSlotCount',
        'title' => 'getTitle',
        'date_created' => 'getDateCreated',
        'date_modified' => 'getDateModified',
        'is_public' => 'getIsPublic',
        'locale' => 'getLocale',
        'is_valid' => 'getIsValid',
        'date_player_modified' => 'getDatePlayerModified',
        'title_before_moderation' => 'getTitleBeforeModeration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fireteam_id'] = $data['fireteam_id'] ?? null;
        $this->container['group_id'] = $data['group_id'] ?? null;
        $this->container['platform'] = $data['platform'] ?? null;
        $this->container['activity_type'] = $data['activity_type'] ?? null;
        $this->container['is_immediate'] = $data['is_immediate'] ?? null;
        $this->container['scheduled_time'] = $data['scheduled_time'] ?? null;
        $this->container['owner_membership_id'] = $data['owner_membership_id'] ?? null;
        $this->container['player_slot_count'] = $data['player_slot_count'] ?? null;
        $this->container['alternate_slot_count'] = $data['alternate_slot_count'] ?? null;
        $this->container['available_player_slot_count'] = $data['available_player_slot_count'] ?? null;
        $this->container['available_alternate_slot_count'] = $data['available_alternate_slot_count'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['date_created'] = $data['date_created'] ?? null;
        $this->container['date_modified'] = $data['date_modified'] ?? null;
        $this->container['is_public'] = $data['is_public'] ?? null;
        $this->container['locale'] = $data['locale'] ?? null;
        $this->container['is_valid'] = $data['is_valid'] ?? null;
        $this->container['date_player_modified'] = $data['date_player_modified'] ?? null;
        $this->container['title_before_moderation'] = $data['title_before_moderation'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fireteam_id
     *
     * @return int|null
     */
    public function getFireteamId()
    {
        return $this->container['fireteam_id'];
    }

    /**
     * Sets fireteam_id
     *
     * @param int|null $fireteam_id fireteam_id
     *
     * @return self
     */
    public function setFireteamId($fireteam_id)
    {
        $this->container['fireteam_id'] = $fireteam_id;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return int|null
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param int|null $group_id group_id
     *
     * @return self
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return int|null
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param int|null $platform platform
     *
     * @return self
     */
    public function setPlatform($platform)
    {
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets activity_type
     *
     * @return int|null
     */
    public function getActivityType()
    {
        return $this->container['activity_type'];
    }

    /**
     * Sets activity_type
     *
     * @param int|null $activity_type activity_type
     *
     * @return self
     */
    public function setActivityType($activity_type)
    {
        $this->container['activity_type'] = $activity_type;

        return $this;
    }

    /**
     * Gets is_immediate
     *
     * @return bool|null
     */
    public function getIsImmediate()
    {
        return $this->container['is_immediate'];
    }

    /**
     * Sets is_immediate
     *
     * @param bool|null $is_immediate is_immediate
     *
     * @return self
     */
    public function setIsImmediate($is_immediate)
    {
        $this->container['is_immediate'] = $is_immediate;

        return $this;
    }

    /**
     * Gets scheduled_time
     *
     * @return \DateTime|null
     */
    public function getScheduledTime()
    {
        return $this->container['scheduled_time'];
    }

    /**
     * Sets scheduled_time
     *
     * @param \DateTime|null $scheduled_time scheduled_time
     *
     * @return self
     */
    public function setScheduledTime($scheduled_time)
    {
        $this->container['scheduled_time'] = $scheduled_time;

        return $this;
    }

    /**
     * Gets owner_membership_id
     *
     * @return int|null
     */
    public function getOwnerMembershipId()
    {
        return $this->container['owner_membership_id'];
    }

    /**
     * Sets owner_membership_id
     *
     * @param int|null $owner_membership_id owner_membership_id
     *
     * @return self
     */
    public function setOwnerMembershipId($owner_membership_id)
    {
        $this->container['owner_membership_id'] = $owner_membership_id;

        return $this;
    }

    /**
     * Gets player_slot_count
     *
     * @return int|null
     */
    public function getPlayerSlotCount()
    {
        return $this->container['player_slot_count'];
    }

    /**
     * Sets player_slot_count
     *
     * @param int|null $player_slot_count player_slot_count
     *
     * @return self
     */
    public function setPlayerSlotCount($player_slot_count)
    {
        $this->container['player_slot_count'] = $player_slot_count;

        return $this;
    }

    /**
     * Gets alternate_slot_count
     *
     * @return int|null
     */
    public function getAlternateSlotCount()
    {
        return $this->container['alternate_slot_count'];
    }

    /**
     * Sets alternate_slot_count
     *
     * @param int|null $alternate_slot_count alternate_slot_count
     *
     * @return self
     */
    public function setAlternateSlotCount($alternate_slot_count)
    {
        $this->container['alternate_slot_count'] = $alternate_slot_count;

        return $this;
    }

    /**
     * Gets available_player_slot_count
     *
     * @return int|null
     */
    public function getAvailablePlayerSlotCount()
    {
        return $this->container['available_player_slot_count'];
    }

    /**
     * Sets available_player_slot_count
     *
     * @param int|null $available_player_slot_count available_player_slot_count
     *
     * @return self
     */
    public function setAvailablePlayerSlotCount($available_player_slot_count)
    {
        $this->container['available_player_slot_count'] = $available_player_slot_count;

        return $this;
    }

    /**
     * Gets available_alternate_slot_count
     *
     * @return int|null
     */
    public function getAvailableAlternateSlotCount()
    {
        return $this->container['available_alternate_slot_count'];
    }

    /**
     * Sets available_alternate_slot_count
     *
     * @param int|null $available_alternate_slot_count available_alternate_slot_count
     *
     * @return self
     */
    public function setAvailableAlternateSlotCount($available_alternate_slot_count)
    {
        $this->container['available_alternate_slot_count'] = $available_alternate_slot_count;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_modified
     *
     * @return \DateTime|null
     */
    public function getDateModified()
    {
        return $this->container['date_modified'];
    }

    /**
     * Sets date_modified
     *
     * @param \DateTime|null $date_modified date_modified
     *
     * @return self
     */
    public function setDateModified($date_modified)
    {
        $this->container['date_modified'] = $date_modified;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool|null
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool|null $is_public is_public
     *
     * @return self
     */
    public function setIsPublic($is_public)
    {
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale locale
     *
     * @return self
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets is_valid
     *
     * @return bool|null
     */
    public function getIsValid()
    {
        return $this->container['is_valid'];
    }

    /**
     * Sets is_valid
     *
     * @param bool|null $is_valid is_valid
     *
     * @return self
     */
    public function setIsValid($is_valid)
    {
        $this->container['is_valid'] = $is_valid;

        return $this;
    }

    /**
     * Gets date_player_modified
     *
     * @return \DateTime|null
     */
    public function getDatePlayerModified()
    {
        return $this->container['date_player_modified'];
    }

    /**
     * Sets date_player_modified
     *
     * @param \DateTime|null $date_player_modified date_player_modified
     *
     * @return self
     */
    public function setDatePlayerModified($date_player_modified)
    {
        $this->container['date_player_modified'] = $date_player_modified;

        return $this;
    }

    /**
     * Gets title_before_moderation
     *
     * @return string|null
     */
    public function getTitleBeforeModeration()
    {
        return $this->container['title_before_moderation'];
    }

    /**
     * Sets title_before_moderation
     *
     * @param string|null $title_before_moderation title_before_moderation
     *
     * @return self
     */
    public function setTitleBeforeModeration($title_before_moderation)
    {
        $this->container['title_before_moderation'] = $title_before_moderation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


