<?php
/**
 * DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition Class Doc Comment
 *
 * @category Class
 * @description The definition for an \&quot;inventory flyout\&quot;: a UI screen where we show you part of an otherwise hidden vendor inventory: like the Vault inventory buckets.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.DestinyVendorInventoryFlyoutDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'locked_description' => 'string',
        'display_properties' => 'DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition',
        'buckets' => '\OpenAPI\Client\Model\DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition[]',
        'flyout_id' => 'int',
        'suppress_newness' => 'bool',
        'equipment_slot_hash' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'locked_description' => null,
        'display_properties' => null,
        'buckets' => null,
        'flyout_id' => 'uint32',
        'suppress_newness' => null,
        'equipment_slot_hash' => 'uint32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'locked_description' => 'lockedDescription',
        'display_properties' => 'displayProperties',
        'buckets' => 'buckets',
        'flyout_id' => 'flyoutId',
        'suppress_newness' => 'suppressNewness',
        'equipment_slot_hash' => 'equipmentSlotHash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'locked_description' => 'setLockedDescription',
        'display_properties' => 'setDisplayProperties',
        'buckets' => 'setBuckets',
        'flyout_id' => 'setFlyoutId',
        'suppress_newness' => 'setSuppressNewness',
        'equipment_slot_hash' => 'setEquipmentSlotHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'locked_description' => 'getLockedDescription',
        'display_properties' => 'getDisplayProperties',
        'buckets' => 'getBuckets',
        'flyout_id' => 'getFlyoutId',
        'suppress_newness' => 'getSuppressNewness',
        'equipment_slot_hash' => 'getEquipmentSlotHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['locked_description'] = $data['locked_description'] ?? null;
        $this->container['display_properties'] = $data['display_properties'] ?? null;
        $this->container['buckets'] = $data['buckets'] ?? null;
        $this->container['flyout_id'] = $data['flyout_id'] ?? null;
        $this->container['suppress_newness'] = $data['suppress_newness'] ?? null;
        $this->container['equipment_slot_hash'] = $data['equipment_slot_hash'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets locked_description
     *
     * @return string|null
     */
    public function getLockedDescription()
    {
        return $this->container['locked_description'];
    }

    /**
     * Sets locked_description
     *
     * @param string|null $locked_description If the flyout is locked, this is the reason why.
     *
     * @return self
     */
    public function setLockedDescription($locked_description)
    {
        $this->container['locked_description'] = $locked_description;

        return $this;
    }

    /**
     * Gets display_properties
     *
     * @return DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null
     */
    public function getDisplayProperties()
    {
        return $this->container['display_properties'];
    }

    /**
     * Sets display_properties
     *
     * @param DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null $display_properties The title and other common properties of the flyout.
     *
     * @return self
     */
    public function setDisplayProperties($display_properties)
    {
        $this->container['display_properties'] = $display_properties;

        return $this;
    }

    /**
     * Gets buckets
     *
     * @return \OpenAPI\Client\Model\DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition[]|null
     */
    public function getBuckets()
    {
        return $this->container['buckets'];
    }

    /**
     * Sets buckets
     *
     * @param \OpenAPI\Client\Model\DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition[]|null $buckets A list of inventory buckets and other metadata to show on the screen.
     *
     * @return self
     */
    public function setBuckets($buckets)
    {
        $this->container['buckets'] = $buckets;

        return $this;
    }

    /**
     * Gets flyout_id
     *
     * @return int|null
     */
    public function getFlyoutId()
    {
        return $this->container['flyout_id'];
    }

    /**
     * Sets flyout_id
     *
     * @param int|null $flyout_id An identifier for the flyout, in case anything else needs to refer to them.
     *
     * @return self
     */
    public function setFlyoutId($flyout_id)
    {
        $this->container['flyout_id'] = $flyout_id;

        return $this;
    }

    /**
     * Gets suppress_newness
     *
     * @return bool|null
     */
    public function getSuppressNewness()
    {
        return $this->container['suppress_newness'];
    }

    /**
     * Sets suppress_newness
     *
     * @param bool|null $suppress_newness If this is true, don't show any of the glistening \"this is a new item\" UI elements, like we show on the inventory items themselves in in-game UI.
     *
     * @return self
     */
    public function setSuppressNewness($suppress_newness)
    {
        $this->container['suppress_newness'] = $suppress_newness;

        return $this;
    }

    /**
     * Gets equipment_slot_hash
     *
     * @return int|null
     */
    public function getEquipmentSlotHash()
    {
        return $this->container['equipment_slot_hash'];
    }

    /**
     * Sets equipment_slot_hash
     *
     * @param int|null $equipment_slot_hash If this flyout is meant to show you the contents of the player's equipment slot, this is the slot to show.
     *
     * @return self
     */
    public function setEquipmentSlotHash($equipment_slot_hash)
    {
        $this->container['equipment_slot_hash'] = $equipment_slot_hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


