<?php
/**
 * DestinyDefinitionsSeasonsDestinySeasonDefinition
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyDefinitionsSeasonsDestinySeasonDefinition Class Doc Comment
 *
 * @category Class
 * @description Defines a canonical \&quot;Season\&quot; of Destiny: a range of a few months where the game highlights certain challenges, provides new loot, has new Clan-related rewards and celebrates various seasonal events.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyDefinitionsSeasonsDestinySeasonDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.Seasons.DestinySeasonDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'display_properties' => '\OpenAPI\Client\Model\DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition',
        'background_image_path' => 'string',
        'season_number' => 'int',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'season_pass_hash' => 'int',
        'season_pass_progression_hash' => 'int',
        'artifact_item_hash' => 'int',
        'seal_presentation_node_hash' => 'int',
        'hash' => 'int',
        'index' => 'int',
        'redacted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'display_properties' => null,
        'background_image_path' => null,
        'season_number' => 'int32',
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'season_pass_hash' => 'uint32',
        'season_pass_progression_hash' => 'uint32',
        'artifact_item_hash' => 'uint32',
        'seal_presentation_node_hash' => 'uint32',
        'hash' => 'uint32',
        'index' => 'int32',
        'redacted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_properties' => 'displayProperties',
        'background_image_path' => 'backgroundImagePath',
        'season_number' => 'seasonNumber',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'season_pass_hash' => 'seasonPassHash',
        'season_pass_progression_hash' => 'seasonPassProgressionHash',
        'artifact_item_hash' => 'artifactItemHash',
        'seal_presentation_node_hash' => 'sealPresentationNodeHash',
        'hash' => 'hash',
        'index' => 'index',
        'redacted' => 'redacted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_properties' => 'setDisplayProperties',
        'background_image_path' => 'setBackgroundImagePath',
        'season_number' => 'setSeasonNumber',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'season_pass_hash' => 'setSeasonPassHash',
        'season_pass_progression_hash' => 'setSeasonPassProgressionHash',
        'artifact_item_hash' => 'setArtifactItemHash',
        'seal_presentation_node_hash' => 'setSealPresentationNodeHash',
        'hash' => 'setHash',
        'index' => 'setIndex',
        'redacted' => 'setRedacted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_properties' => 'getDisplayProperties',
        'background_image_path' => 'getBackgroundImagePath',
        'season_number' => 'getSeasonNumber',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'season_pass_hash' => 'getSeasonPassHash',
        'season_pass_progression_hash' => 'getSeasonPassProgressionHash',
        'artifact_item_hash' => 'getArtifactItemHash',
        'seal_presentation_node_hash' => 'getSealPresentationNodeHash',
        'hash' => 'getHash',
        'index' => 'getIndex',
        'redacted' => 'getRedacted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['display_properties'] = $data['display_properties'] ?? null;
        $this->container['background_image_path'] = $data['background_image_path'] ?? null;
        $this->container['season_number'] = $data['season_number'] ?? null;
        $this->container['start_date'] = $data['start_date'] ?? null;
        $this->container['end_date'] = $data['end_date'] ?? null;
        $this->container['season_pass_hash'] = $data['season_pass_hash'] ?? null;
        $this->container['season_pass_progression_hash'] = $data['season_pass_progression_hash'] ?? null;
        $this->container['artifact_item_hash'] = $data['artifact_item_hash'] ?? null;
        $this->container['seal_presentation_node_hash'] = $data['seal_presentation_node_hash'] ?? null;
        $this->container['hash'] = $data['hash'] ?? null;
        $this->container['index'] = $data['index'] ?? null;
        $this->container['redacted'] = $data['redacted'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets display_properties
     *
     * @return \OpenAPI\Client\Model\DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null
     */
    public function getDisplayProperties()
    {
        return $this->container['display_properties'];
    }

    /**
     * Sets display_properties
     *
     * @param \OpenAPI\Client\Model\DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null $display_properties display_properties
     *
     * @return self
     */
    public function setDisplayProperties($display_properties)
    {
        $this->container['display_properties'] = $display_properties;

        return $this;
    }

    /**
     * Gets background_image_path
     *
     * @return string|null
     */
    public function getBackgroundImagePath()
    {
        return $this->container['background_image_path'];
    }

    /**
     * Sets background_image_path
     *
     * @param string|null $background_image_path background_image_path
     *
     * @return self
     */
    public function setBackgroundImagePath($background_image_path)
    {
        $this->container['background_image_path'] = $background_image_path;

        return $this;
    }

    /**
     * Gets season_number
     *
     * @return int|null
     */
    public function getSeasonNumber()
    {
        return $this->container['season_number'];
    }

    /**
     * Sets season_number
     *
     * @param int|null $season_number season_number
     *
     * @return self
     */
    public function setSeasonNumber($season_number)
    {
        $this->container['season_number'] = $season_number;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets season_pass_hash
     *
     * @return int|null
     */
    public function getSeasonPassHash()
    {
        return $this->container['season_pass_hash'];
    }

    /**
     * Sets season_pass_hash
     *
     * @param int|null $season_pass_hash season_pass_hash
     *
     * @return self
     */
    public function setSeasonPassHash($season_pass_hash)
    {
        $this->container['season_pass_hash'] = $season_pass_hash;

        return $this;
    }

    /**
     * Gets season_pass_progression_hash
     *
     * @return int|null
     */
    public function getSeasonPassProgressionHash()
    {
        return $this->container['season_pass_progression_hash'];
    }

    /**
     * Sets season_pass_progression_hash
     *
     * @param int|null $season_pass_progression_hash season_pass_progression_hash
     *
     * @return self
     */
    public function setSeasonPassProgressionHash($season_pass_progression_hash)
    {
        $this->container['season_pass_progression_hash'] = $season_pass_progression_hash;

        return $this;
    }

    /**
     * Gets artifact_item_hash
     *
     * @return int|null
     */
    public function getArtifactItemHash()
    {
        return $this->container['artifact_item_hash'];
    }

    /**
     * Sets artifact_item_hash
     *
     * @param int|null $artifact_item_hash artifact_item_hash
     *
     * @return self
     */
    public function setArtifactItemHash($artifact_item_hash)
    {
        $this->container['artifact_item_hash'] = $artifact_item_hash;

        return $this;
    }

    /**
     * Gets seal_presentation_node_hash
     *
     * @return int|null
     */
    public function getSealPresentationNodeHash()
    {
        return $this->container['seal_presentation_node_hash'];
    }

    /**
     * Sets seal_presentation_node_hash
     *
     * @param int|null $seal_presentation_node_hash seal_presentation_node_hash
     *
     * @return self
     */
    public function setSealPresentationNodeHash($seal_presentation_node_hash)
    {
        $this->container['seal_presentation_node_hash'] = $seal_presentation_node_hash;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return int|null
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param int|null $hash The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
     *
     * @return self
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int|null
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int|null $index The index of the entity as it was found in the investment tables.
     *
     * @return self
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets redacted
     *
     * @return bool|null
     */
    public function getRedacted()
    {
        return $this->container['redacted'];
    }

    /**
     * Sets redacted
     *
     * @param bool|null $redacted If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
     *
     * @return self
     */
    public function setRedacted($redacted)
    {
        $this->container['redacted'] = $redacted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


