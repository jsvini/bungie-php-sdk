<?php
/**
 * DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry Class Doc Comment
 *
 * @category Class
 * @description This represents a single \&quot;thing\&quot; being tracked by the player.  This can point to many types of entities, but only a subset of them will actually have a valid hash identifier for whatever it is being pointed to.  It&#39;s up to you to interpret what it means when various combinations of these entries have values being tracked.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Components.Profiles.DestinyProfileTransitoryTrackingEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'location_hash' => 'int',
        'item_hash' => 'int',
        'objective_hash' => 'int',
        'activity_hash' => 'int',
        'questline_item_hash' => 'int',
        'tracked_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'location_hash' => 'uint32',
        'item_hash' => 'uint32',
        'objective_hash' => 'uint32',
        'activity_hash' => 'uint32',
        'questline_item_hash' => 'uint32',
        'tracked_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'location_hash' => 'locationHash',
        'item_hash' => 'itemHash',
        'objective_hash' => 'objectiveHash',
        'activity_hash' => 'activityHash',
        'questline_item_hash' => 'questlineItemHash',
        'tracked_date' => 'trackedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'location_hash' => 'setLocationHash',
        'item_hash' => 'setItemHash',
        'objective_hash' => 'setObjectiveHash',
        'activity_hash' => 'setActivityHash',
        'questline_item_hash' => 'setQuestlineItemHash',
        'tracked_date' => 'setTrackedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'location_hash' => 'getLocationHash',
        'item_hash' => 'getItemHash',
        'objective_hash' => 'getObjectiveHash',
        'activity_hash' => 'getActivityHash',
        'questline_item_hash' => 'getQuestlineItemHash',
        'tracked_date' => 'getTrackedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['location_hash'] = $data['location_hash'] ?? null;
        $this->container['item_hash'] = $data['item_hash'] ?? null;
        $this->container['objective_hash'] = $data['objective_hash'] ?? null;
        $this->container['activity_hash'] = $data['activity_hash'] ?? null;
        $this->container['questline_item_hash'] = $data['questline_item_hash'] ?? null;
        $this->container['tracked_date'] = $data['tracked_date'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets location_hash
     *
     * @return int|null
     */
    public function getLocationHash()
    {
        return $this->container['location_hash'];
    }

    /**
     * Sets location_hash
     *
     * @param int|null $location_hash OPTIONAL - If this is tracking a DestinyLocationDefinition, this is the identifier for that location.
     *
     * @return self
     */
    public function setLocationHash($location_hash)
    {
        $this->container['location_hash'] = $location_hash;

        return $this;
    }

    /**
     * Gets item_hash
     *
     * @return int|null
     */
    public function getItemHash()
    {
        return $this->container['item_hash'];
    }

    /**
     * Sets item_hash
     *
     * @param int|null $item_hash OPTIONAL - If this is tracking the status of a DestinyInventoryItemDefinition, this is the identifier for that item.
     *
     * @return self
     */
    public function setItemHash($item_hash)
    {
        $this->container['item_hash'] = $item_hash;

        return $this;
    }

    /**
     * Gets objective_hash
     *
     * @return int|null
     */
    public function getObjectiveHash()
    {
        return $this->container['objective_hash'];
    }

    /**
     * Sets objective_hash
     *
     * @param int|null $objective_hash OPTIONAL - If this is tracking the status of a DestinyObjectiveDefinition, this is the identifier for that objective.
     *
     * @return self
     */
    public function setObjectiveHash($objective_hash)
    {
        $this->container['objective_hash'] = $objective_hash;

        return $this;
    }

    /**
     * Gets activity_hash
     *
     * @return int|null
     */
    public function getActivityHash()
    {
        return $this->container['activity_hash'];
    }

    /**
     * Sets activity_hash
     *
     * @param int|null $activity_hash OPTIONAL - If this is tracking the status of a DestinyActivityDefinition, this is the identifier for that activity.
     *
     * @return self
     */
    public function setActivityHash($activity_hash)
    {
        $this->container['activity_hash'] = $activity_hash;

        return $this;
    }

    /**
     * Gets questline_item_hash
     *
     * @return int|null
     */
    public function getQuestlineItemHash()
    {
        return $this->container['questline_item_hash'];
    }

    /**
     * Sets questline_item_hash
     *
     * @param int|null $questline_item_hash OPTIONAL - If this is tracking the status of a quest, this is the identifier for the DestinyInventoryItemDefinition that containst that questline data.
     *
     * @return self
     */
    public function setQuestlineItemHash($questline_item_hash)
    {
        $this->container['questline_item_hash'] = $questline_item_hash;

        return $this;
    }

    /**
     * Gets tracked_date
     *
     * @return \DateTime|null
     */
    public function getTrackedDate()
    {
        return $this->container['tracked_date'];
    }

    /**
     * Sets tracked_date
     *
     * @param \DateTime|null $tracked_date OPTIONAL - I've got to level with you, I don't really know what this is. Is it when you started tracking it? Is it only populated for tracked items that have time limits?  I don't know, but we can get at it - when I get time to actually test what it is, I'll update this. In the meantime, bask in the mysterious data.
     *
     * @return self
     */
    public function setTrackedDate($tracked_date)
    {
        $this->container['tracked_date'] = $tracked_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


