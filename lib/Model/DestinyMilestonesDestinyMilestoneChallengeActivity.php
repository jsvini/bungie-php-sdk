<?php
/**
 * DestinyMilestonesDestinyMilestoneChallengeActivity
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyMilestonesDestinyMilestoneChallengeActivity Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyMilestonesDestinyMilestoneChallengeActivity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Milestones.DestinyMilestoneChallengeActivity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'activity_hash' => 'int',
        'challenges' => '\OpenAPI\Client\Model\DestinyChallengesDestinyChallengeStatus[]',
        'modifier_hashes' => 'int[]',
        'boolean_activity_options' => 'map[string,bool]',
        'loadout_requirement_index' => 'int',
        'phases' => '\OpenAPI\Client\Model\DestinyMilestonesDestinyMilestoneActivityPhase[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'activity_hash' => 'uint32',
        'challenges' => null,
        'modifier_hashes' => 'uint32',
        'boolean_activity_options' => null,
        'loadout_requirement_index' => 'int32',
        'phases' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activity_hash' => 'activityHash',
        'challenges' => 'challenges',
        'modifier_hashes' => 'modifierHashes',
        'boolean_activity_options' => 'booleanActivityOptions',
        'loadout_requirement_index' => 'loadoutRequirementIndex',
        'phases' => 'phases'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activity_hash' => 'setActivityHash',
        'challenges' => 'setChallenges',
        'modifier_hashes' => 'setModifierHashes',
        'boolean_activity_options' => 'setBooleanActivityOptions',
        'loadout_requirement_index' => 'setLoadoutRequirementIndex',
        'phases' => 'setPhases'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activity_hash' => 'getActivityHash',
        'challenges' => 'getChallenges',
        'modifier_hashes' => 'getModifierHashes',
        'boolean_activity_options' => 'getBooleanActivityOptions',
        'loadout_requirement_index' => 'getLoadoutRequirementIndex',
        'phases' => 'getPhases'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activity_hash'] = $data['activity_hash'] ?? null;
        $this->container['challenges'] = $data['challenges'] ?? null;
        $this->container['modifier_hashes'] = $data['modifier_hashes'] ?? null;
        $this->container['boolean_activity_options'] = $data['boolean_activity_options'] ?? null;
        $this->container['loadout_requirement_index'] = $data['loadout_requirement_index'] ?? null;
        $this->container['phases'] = $data['phases'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activity_hash
     *
     * @return int|null
     */
    public function getActivityHash()
    {
        return $this->container['activity_hash'];
    }

    /**
     * Sets activity_hash
     *
     * @param int|null $activity_hash activity_hash
     *
     * @return self
     */
    public function setActivityHash($activity_hash)
    {
        $this->container['activity_hash'] = $activity_hash;

        return $this;
    }

    /**
     * Gets challenges
     *
     * @return \OpenAPI\Client\Model\DestinyChallengesDestinyChallengeStatus[]|null
     */
    public function getChallenges()
    {
        return $this->container['challenges'];
    }

    /**
     * Sets challenges
     *
     * @param \OpenAPI\Client\Model\DestinyChallengesDestinyChallengeStatus[]|null $challenges challenges
     *
     * @return self
     */
    public function setChallenges($challenges)
    {
        $this->container['challenges'] = $challenges;

        return $this;
    }

    /**
     * Gets modifier_hashes
     *
     * @return int[]|null
     */
    public function getModifierHashes()
    {
        return $this->container['modifier_hashes'];
    }

    /**
     * Sets modifier_hashes
     *
     * @param int[]|null $modifier_hashes If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data.  Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what's really live.
     *
     * @return self
     */
    public function setModifierHashes($modifier_hashes)
    {
        $this->container['modifier_hashes'] = $modifier_hashes;

        return $this;
    }

    /**
     * Gets boolean_activity_options
     *
     * @return map[string,bool]|null
     */
    public function getBooleanActivityOptions()
    {
        return $this->container['boolean_activity_options'];
    }

    /**
     * Sets boolean_activity_options
     *
     * @param map[string,bool]|null $boolean_activity_options The set of activity options for this activity, keyed by an identifier that's unique for this activity (not guaranteed to be unique between or across all activities, though should be unique for every *variant* of a given *conceptual* activity: for instance, the original D2 Raid has many variant DestinyActivityDefinitions. While other activities could potentially have the same option hashes, for any given D2 base Raid variant the hash will be unique).  As a concrete example of this data, the hashes you get for Raids will correspond to the currently active \"Challenge Mode\".  We don't have any human readable information for these, but saavy 3rd party app users could manually associate the key (a hash identifier for the \"option\" that is enabled/disabled) and the value (whether it's enabled or disabled presently)  On our side, we don't necessarily even know what these are used for (the game designers know, but we don't), and we have no human readable data for them. In order to use them, you will have to do some experimentation.
     *
     * @return self
     */
    public function setBooleanActivityOptions($boolean_activity_options)
    {
        $this->container['boolean_activity_options'] = $boolean_activity_options;

        return $this;
    }

    /**
     * Gets loadout_requirement_index
     *
     * @return int|null
     */
    public function getLoadoutRequirementIndex()
    {
        return $this->container['loadout_requirement_index'];
    }

    /**
     * Sets loadout_requirement_index
     *
     * @param int|null $loadout_requirement_index If returned, this is the index into the DestinyActivityDefinition's \"loadouts\" property, indicating the currently active loadout requirements.
     *
     * @return self
     */
    public function setLoadoutRequirementIndex($loadout_requirement_index)
    {
        $this->container['loadout_requirement_index'] = $loadout_requirement_index;

        return $this;
    }

    /**
     * Gets phases
     *
     * @return \OpenAPI\Client\Model\DestinyMilestonesDestinyMilestoneActivityPhase[]|null
     */
    public function getPhases()
    {
        return $this->container['phases'];
    }

    /**
     * Sets phases
     *
     * @param \OpenAPI\Client\Model\DestinyMilestonesDestinyMilestoneActivityPhase[]|null $phases If the Activity has discrete \"phases\" that we can track, that info will be here. Otherwise, this value will be NULL. Note that this is a list and not a dictionary: the order implies the ascending order of phases or progression in this activity.
     *
     * @return self
     */
    public function setPhases($phases)
    {
        $this->container['phases'] = $phases;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


