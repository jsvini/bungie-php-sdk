<?php
/**
 * DestinyDefinitionsPresentationDestinyPresentationNodeDefinition
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyDefinitionsPresentationDestinyPresentationNodeDefinition Class Doc Comment
 *
 * @category Class
 * @description A PresentationNode is an entity that represents a logical grouping of other entities visually/organizationally.  For now, Presentation Nodes may contain the following... but it may be used for more in the future:  - Collectibles - Records (Or, as the public will call them, \&quot;Triumphs.\&quot; Don&#39;t ask me why we&#39;re overloading the term \&quot;Triumph\&quot;, it still hurts me to think about it) - Metrics (aka Stat Trackers) - Other Presentation Nodes, allowing a tree of Presentation Nodes to be created  Part of me wants to break these into conceptual definitions per entity being collected, but the possibility of these different types being mixed in the same UI and the possibility that it could actually be more useful to return the \&quot;bare metal\&quot; presentation node concept has resulted in me deciding against that for the time being.  We&#39;ll see if I come to regret this as well.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyDefinitionsPresentationDestinyPresentationNodeDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.Presentation.DestinyPresentationNodeDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'display_properties' => '\OpenAPI\Client\Model\DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition',
        'original_icon' => 'string',
        'root_view_icon' => 'string',
        'node_type' => 'int',
        'scope' => 'int',
        'objective_hash' => 'int',
        'completion_record_hash' => 'int',
        'children' => 'DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock',
        'display_style' => 'int',
        'screen_style' => 'int',
        'requirements' => 'DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock',
        'disable_child_subscreen_navigation' => 'bool',
        'max_category_record_score' => 'int',
        'presentation_node_type' => 'int',
        'trait_ids' => 'string[]',
        'trait_hashes' => 'int[]',
        'parent_node_hashes' => 'int[]',
        'hash' => 'int',
        'index' => 'int',
        'redacted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'display_properties' => null,
        'original_icon' => null,
        'root_view_icon' => null,
        'node_type' => 'int32',
        'scope' => 'int32',
        'objective_hash' => 'uint32',
        'completion_record_hash' => 'uint32',
        'children' => null,
        'display_style' => 'int32',
        'screen_style' => 'int32',
        'requirements' => null,
        'disable_child_subscreen_navigation' => null,
        'max_category_record_score' => 'int32',
        'presentation_node_type' => 'int32',
        'trait_ids' => null,
        'trait_hashes' => 'uint32',
        'parent_node_hashes' => 'uint32',
        'hash' => 'uint32',
        'index' => 'int32',
        'redacted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_properties' => 'displayProperties',
        'original_icon' => 'originalIcon',
        'root_view_icon' => 'rootViewIcon',
        'node_type' => 'nodeType',
        'scope' => 'scope',
        'objective_hash' => 'objectiveHash',
        'completion_record_hash' => 'completionRecordHash',
        'children' => 'children',
        'display_style' => 'displayStyle',
        'screen_style' => 'screenStyle',
        'requirements' => 'requirements',
        'disable_child_subscreen_navigation' => 'disableChildSubscreenNavigation',
        'max_category_record_score' => 'maxCategoryRecordScore',
        'presentation_node_type' => 'presentationNodeType',
        'trait_ids' => 'traitIds',
        'trait_hashes' => 'traitHashes',
        'parent_node_hashes' => 'parentNodeHashes',
        'hash' => 'hash',
        'index' => 'index',
        'redacted' => 'redacted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_properties' => 'setDisplayProperties',
        'original_icon' => 'setOriginalIcon',
        'root_view_icon' => 'setRootViewIcon',
        'node_type' => 'setNodeType',
        'scope' => 'setScope',
        'objective_hash' => 'setObjectiveHash',
        'completion_record_hash' => 'setCompletionRecordHash',
        'children' => 'setChildren',
        'display_style' => 'setDisplayStyle',
        'screen_style' => 'setScreenStyle',
        'requirements' => 'setRequirements',
        'disable_child_subscreen_navigation' => 'setDisableChildSubscreenNavigation',
        'max_category_record_score' => 'setMaxCategoryRecordScore',
        'presentation_node_type' => 'setPresentationNodeType',
        'trait_ids' => 'setTraitIds',
        'trait_hashes' => 'setTraitHashes',
        'parent_node_hashes' => 'setParentNodeHashes',
        'hash' => 'setHash',
        'index' => 'setIndex',
        'redacted' => 'setRedacted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_properties' => 'getDisplayProperties',
        'original_icon' => 'getOriginalIcon',
        'root_view_icon' => 'getRootViewIcon',
        'node_type' => 'getNodeType',
        'scope' => 'getScope',
        'objective_hash' => 'getObjectiveHash',
        'completion_record_hash' => 'getCompletionRecordHash',
        'children' => 'getChildren',
        'display_style' => 'getDisplayStyle',
        'screen_style' => 'getScreenStyle',
        'requirements' => 'getRequirements',
        'disable_child_subscreen_navigation' => 'getDisableChildSubscreenNavigation',
        'max_category_record_score' => 'getMaxCategoryRecordScore',
        'presentation_node_type' => 'getPresentationNodeType',
        'trait_ids' => 'getTraitIds',
        'trait_hashes' => 'getTraitHashes',
        'parent_node_hashes' => 'getParentNodeHashes',
        'hash' => 'getHash',
        'index' => 'getIndex',
        'redacted' => 'getRedacted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['display_properties'] = $data['display_properties'] ?? null;
        $this->container['original_icon'] = $data['original_icon'] ?? null;
        $this->container['root_view_icon'] = $data['root_view_icon'] ?? null;
        $this->container['node_type'] = $data['node_type'] ?? null;
        $this->container['scope'] = $data['scope'] ?? null;
        $this->container['objective_hash'] = $data['objective_hash'] ?? null;
        $this->container['completion_record_hash'] = $data['completion_record_hash'] ?? null;
        $this->container['children'] = $data['children'] ?? null;
        $this->container['display_style'] = $data['display_style'] ?? null;
        $this->container['screen_style'] = $data['screen_style'] ?? null;
        $this->container['requirements'] = $data['requirements'] ?? null;
        $this->container['disable_child_subscreen_navigation'] = $data['disable_child_subscreen_navigation'] ?? null;
        $this->container['max_category_record_score'] = $data['max_category_record_score'] ?? null;
        $this->container['presentation_node_type'] = $data['presentation_node_type'] ?? null;
        $this->container['trait_ids'] = $data['trait_ids'] ?? null;
        $this->container['trait_hashes'] = $data['trait_hashes'] ?? null;
        $this->container['parent_node_hashes'] = $data['parent_node_hashes'] ?? null;
        $this->container['hash'] = $data['hash'] ?? null;
        $this->container['index'] = $data['index'] ?? null;
        $this->container['redacted'] = $data['redacted'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets display_properties
     *
     * @return \OpenAPI\Client\Model\DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null
     */
    public function getDisplayProperties()
    {
        return $this->container['display_properties'];
    }

    /**
     * Sets display_properties
     *
     * @param \OpenAPI\Client\Model\DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null $display_properties display_properties
     *
     * @return self
     */
    public function setDisplayProperties($display_properties)
    {
        $this->container['display_properties'] = $display_properties;

        return $this;
    }

    /**
     * Gets original_icon
     *
     * @return string|null
     */
    public function getOriginalIcon()
    {
        return $this->container['original_icon'];
    }

    /**
     * Sets original_icon
     *
     * @param string|null $original_icon The original icon for this presentation node, before we futzed with it.
     *
     * @return self
     */
    public function setOriginalIcon($original_icon)
    {
        $this->container['original_icon'] = $original_icon;

        return $this;
    }

    /**
     * Gets root_view_icon
     *
     * @return string|null
     */
    public function getRootViewIcon()
    {
        return $this->container['root_view_icon'];
    }

    /**
     * Sets root_view_icon
     *
     * @param string|null $root_view_icon Some presentation nodes are meant to be explicitly shown on the \"root\" or \"entry\" screens for the feature to which they are related. You should use this icon when showing them on such a view, if you have a similar \"entry point\" view in your UI. If you don't have a UI, then I guess it doesn't matter either way does it?
     *
     * @return self
     */
    public function setRootViewIcon($root_view_icon)
    {
        $this->container['root_view_icon'] = $root_view_icon;

        return $this;
    }

    /**
     * Gets node_type
     *
     * @return int|null
     */
    public function getNodeType()
    {
        return $this->container['node_type'];
    }

    /**
     * Sets node_type
     *
     * @param int|null $node_type node_type
     *
     * @return self
     */
    public function setNodeType($node_type)
    {
        $this->container['node_type'] = $node_type;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return int|null
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param int|null $scope Indicates whether this presentation node's state is determined on a per-character or on an account-wide basis.
     *
     * @return self
     */
    public function setScope($scope)
    {
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets objective_hash
     *
     * @return int|null
     */
    public function getObjectiveHash()
    {
        return $this->container['objective_hash'];
    }

    /**
     * Sets objective_hash
     *
     * @param int|null $objective_hash If this presentation node shows a related objective (for instance, if it tracks the progress of its children), the objective being tracked is indicated here.
     *
     * @return self
     */
    public function setObjectiveHash($objective_hash)
    {
        $this->container['objective_hash'] = $objective_hash;

        return $this;
    }

    /**
     * Gets completion_record_hash
     *
     * @return int|null
     */
    public function getCompletionRecordHash()
    {
        return $this->container['completion_record_hash'];
    }

    /**
     * Sets completion_record_hash
     *
     * @param int|null $completion_record_hash If this presentation node has an associated \"Record\" that you can accomplish for completing its children, this is the identifier of that Record.
     *
     * @return self
     */
    public function setCompletionRecordHash($completion_record_hash)
    {
        $this->container['completion_record_hash'] = $completion_record_hash;

        return $this;
    }

    /**
     * Gets children
     *
     * @return DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock|null
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     *
     * @param DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock|null $children The child entities contained by this presentation node.
     *
     * @return self
     */
    public function setChildren($children)
    {
        $this->container['children'] = $children;

        return $this;
    }

    /**
     * Gets display_style
     *
     * @return int|null
     */
    public function getDisplayStyle()
    {
        return $this->container['display_style'];
    }

    /**
     * Sets display_style
     *
     * @param int|null $display_style A hint for how to display this presentation node when it's shown in a list.
     *
     * @return self
     */
    public function setDisplayStyle($display_style)
    {
        $this->container['display_style'] = $display_style;

        return $this;
    }

    /**
     * Gets screen_style
     *
     * @return int|null
     */
    public function getScreenStyle()
    {
        return $this->container['screen_style'];
    }

    /**
     * Sets screen_style
     *
     * @param int|null $screen_style A hint for how to display this presentation node when it's shown in its own detail screen.
     *
     * @return self
     */
    public function setScreenStyle($screen_style)
    {
        $this->container['screen_style'] = $screen_style;

        return $this;
    }

    /**
     * Gets requirements
     *
     * @return DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock|null
     */
    public function getRequirements()
    {
        return $this->container['requirements'];
    }

    /**
     * Sets requirements
     *
     * @param DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock|null $requirements The requirements for being able to interact with this presentation node and its children.
     *
     * @return self
     */
    public function setRequirements($requirements)
    {
        $this->container['requirements'] = $requirements;

        return $this;
    }

    /**
     * Gets disable_child_subscreen_navigation
     *
     * @return bool|null
     */
    public function getDisableChildSubscreenNavigation()
    {
        return $this->container['disable_child_subscreen_navigation'];
    }

    /**
     * Sets disable_child_subscreen_navigation
     *
     * @param bool|null $disable_child_subscreen_navigation If this presentation node has children, but the game doesn't let you inspect the details of those children, that is indicated here.
     *
     * @return self
     */
    public function setDisableChildSubscreenNavigation($disable_child_subscreen_navigation)
    {
        $this->container['disable_child_subscreen_navigation'] = $disable_child_subscreen_navigation;

        return $this;
    }

    /**
     * Gets max_category_record_score
     *
     * @return int|null
     */
    public function getMaxCategoryRecordScore()
    {
        return $this->container['max_category_record_score'];
    }

    /**
     * Sets max_category_record_score
     *
     * @param int|null $max_category_record_score max_category_record_score
     *
     * @return self
     */
    public function setMaxCategoryRecordScore($max_category_record_score)
    {
        $this->container['max_category_record_score'] = $max_category_record_score;

        return $this;
    }

    /**
     * Gets presentation_node_type
     *
     * @return int|null
     */
    public function getPresentationNodeType()
    {
        return $this->container['presentation_node_type'];
    }

    /**
     * Sets presentation_node_type
     *
     * @param int|null $presentation_node_type presentation_node_type
     *
     * @return self
     */
    public function setPresentationNodeType($presentation_node_type)
    {
        $this->container['presentation_node_type'] = $presentation_node_type;

        return $this;
    }

    /**
     * Gets trait_ids
     *
     * @return string[]|null
     */
    public function getTraitIds()
    {
        return $this->container['trait_ids'];
    }

    /**
     * Sets trait_ids
     *
     * @param string[]|null $trait_ids trait_ids
     *
     * @return self
     */
    public function setTraitIds($trait_ids)
    {
        $this->container['trait_ids'] = $trait_ids;

        return $this;
    }

    /**
     * Gets trait_hashes
     *
     * @return int[]|null
     */
    public function getTraitHashes()
    {
        return $this->container['trait_hashes'];
    }

    /**
     * Sets trait_hashes
     *
     * @param int[]|null $trait_hashes trait_hashes
     *
     * @return self
     */
    public function setTraitHashes($trait_hashes)
    {
        $this->container['trait_hashes'] = $trait_hashes;

        return $this;
    }

    /**
     * Gets parent_node_hashes
     *
     * @return int[]|null
     */
    public function getParentNodeHashes()
    {
        return $this->container['parent_node_hashes'];
    }

    /**
     * Sets parent_node_hashes
     *
     * @param int[]|null $parent_node_hashes A quick reference to presentation nodes that have this node as a child. Presentation nodes can be parented under multiple parents.
     *
     * @return self
     */
    public function setParentNodeHashes($parent_node_hashes)
    {
        $this->container['parent_node_hashes'] = $parent_node_hashes;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return int|null
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param int|null $hash The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
     *
     * @return self
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int|null
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int|null $index The index of the entity as it was found in the investment tables.
     *
     * @return self
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets redacted
     *
     * @return bool|null
     */
    public function getRedacted()
    {
        return $this->container['redacted'];
    }

    /**
     * Sets redacted
     *
     * @param bool|null $redacted If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
     *
     * @return self
     */
    public function setRedacted($redacted)
    {
        $this->container['redacted'] = $redacted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


