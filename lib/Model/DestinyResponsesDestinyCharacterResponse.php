<?php
/**
 * DestinyResponsesDestinyCharacterResponse
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyResponsesDestinyCharacterResponse Class Doc Comment
 *
 * @category Class
 * @description The response contract for GetDestinyCharacter, with components that can be returned for character and item-level data.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyResponsesDestinyCharacterResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Responses.DestinyCharacterResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'inventory' => 'SingleComponentResponseOfDestinyInventoryComponent',
        'character' => 'SingleComponentResponseOfDestinyCharacterComponent',
        'progressions' => 'SingleComponentResponseOfDestinyCharacterProgressionComponent',
        'render_data' => 'SingleComponentResponseOfDestinyCharacterRenderComponent',
        'activities' => 'SingleComponentResponseOfDestinyCharacterActivitiesComponent',
        'equipment' => 'SingleComponentResponseOfDestinyInventoryComponent',
        'kiosks' => 'SingleComponentResponseOfDestinyKiosksComponent',
        'plug_sets' => 'SingleComponentResponseOfDestinyPlugSetsComponent',
        'presentation_nodes' => 'SingleComponentResponseOfDestinyPresentationNodesComponent',
        'records' => 'SingleComponentResponseOfDestinyCharacterRecordsComponent',
        'collectibles' => 'SingleComponentResponseOfDestinyCollectiblesComponent',
        'item_components' => 'DestinyItemComponentSetOfint64',
        'uninstanced_item_components' => 'DestinyBaseItemComponentSetOfuint32',
        'currency_lookups' => 'SingleComponentResponseOfDestinyCurrenciesComponent'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'inventory' => null,
        'character' => null,
        'progressions' => null,
        'render_data' => null,
        'activities' => null,
        'equipment' => null,
        'kiosks' => null,
        'plug_sets' => null,
        'presentation_nodes' => null,
        'records' => null,
        'collectibles' => null,
        'item_components' => null,
        'uninstanced_item_components' => null,
        'currency_lookups' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inventory' => 'inventory',
        'character' => 'character',
        'progressions' => 'progressions',
        'render_data' => 'renderData',
        'activities' => 'activities',
        'equipment' => 'equipment',
        'kiosks' => 'kiosks',
        'plug_sets' => 'plugSets',
        'presentation_nodes' => 'presentationNodes',
        'records' => 'records',
        'collectibles' => 'collectibles',
        'item_components' => 'itemComponents',
        'uninstanced_item_components' => 'uninstancedItemComponents',
        'currency_lookups' => 'currencyLookups'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inventory' => 'setInventory',
        'character' => 'setCharacter',
        'progressions' => 'setProgressions',
        'render_data' => 'setRenderData',
        'activities' => 'setActivities',
        'equipment' => 'setEquipment',
        'kiosks' => 'setKiosks',
        'plug_sets' => 'setPlugSets',
        'presentation_nodes' => 'setPresentationNodes',
        'records' => 'setRecords',
        'collectibles' => 'setCollectibles',
        'item_components' => 'setItemComponents',
        'uninstanced_item_components' => 'setUninstancedItemComponents',
        'currency_lookups' => 'setCurrencyLookups'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inventory' => 'getInventory',
        'character' => 'getCharacter',
        'progressions' => 'getProgressions',
        'render_data' => 'getRenderData',
        'activities' => 'getActivities',
        'equipment' => 'getEquipment',
        'kiosks' => 'getKiosks',
        'plug_sets' => 'getPlugSets',
        'presentation_nodes' => 'getPresentationNodes',
        'records' => 'getRecords',
        'collectibles' => 'getCollectibles',
        'item_components' => 'getItemComponents',
        'uninstanced_item_components' => 'getUninstancedItemComponents',
        'currency_lookups' => 'getCurrencyLookups'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['inventory'] = $data['inventory'] ?? null;
        $this->container['character'] = $data['character'] ?? null;
        $this->container['progressions'] = $data['progressions'] ?? null;
        $this->container['render_data'] = $data['render_data'] ?? null;
        $this->container['activities'] = $data['activities'] ?? null;
        $this->container['equipment'] = $data['equipment'] ?? null;
        $this->container['kiosks'] = $data['kiosks'] ?? null;
        $this->container['plug_sets'] = $data['plug_sets'] ?? null;
        $this->container['presentation_nodes'] = $data['presentation_nodes'] ?? null;
        $this->container['records'] = $data['records'] ?? null;
        $this->container['collectibles'] = $data['collectibles'] ?? null;
        $this->container['item_components'] = $data['item_components'] ?? null;
        $this->container['uninstanced_item_components'] = $data['uninstanced_item_components'] ?? null;
        $this->container['currency_lookups'] = $data['currency_lookups'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inventory
     *
     * @return SingleComponentResponseOfDestinyInventoryComponent|null
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param SingleComponentResponseOfDestinyInventoryComponent|null $inventory The character-level non-equipped inventory items.  COMPONENT TYPE: CharacterInventories
     *
     * @return self
     */
    public function setInventory($inventory)
    {
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets character
     *
     * @return SingleComponentResponseOfDestinyCharacterComponent|null
     */
    public function getCharacter()
    {
        return $this->container['character'];
    }

    /**
     * Sets character
     *
     * @param SingleComponentResponseOfDestinyCharacterComponent|null $character Base information about the character in question.  COMPONENT TYPE: Characters
     *
     * @return self
     */
    public function setCharacter($character)
    {
        $this->container['character'] = $character;

        return $this;
    }

    /**
     * Gets progressions
     *
     * @return SingleComponentResponseOfDestinyCharacterProgressionComponent|null
     */
    public function getProgressions()
    {
        return $this->container['progressions'];
    }

    /**
     * Sets progressions
     *
     * @param SingleComponentResponseOfDestinyCharacterProgressionComponent|null $progressions Character progression data, including Milestones.  COMPONENT TYPE: CharacterProgressions
     *
     * @return self
     */
    public function setProgressions($progressions)
    {
        $this->container['progressions'] = $progressions;

        return $this;
    }

    /**
     * Gets render_data
     *
     * @return SingleComponentResponseOfDestinyCharacterRenderComponent|null
     */
    public function getRenderData()
    {
        return $this->container['render_data'];
    }

    /**
     * Sets render_data
     *
     * @param SingleComponentResponseOfDestinyCharacterRenderComponent|null $render_data Character rendering data - a minimal set of information about equipment and dyes used for rendering.  COMPONENT TYPE: CharacterRenderData
     *
     * @return self
     */
    public function setRenderData($render_data)
    {
        $this->container['render_data'] = $render_data;

        return $this;
    }

    /**
     * Gets activities
     *
     * @return SingleComponentResponseOfDestinyCharacterActivitiesComponent|null
     */
    public function getActivities()
    {
        return $this->container['activities'];
    }

    /**
     * Sets activities
     *
     * @param SingleComponentResponseOfDestinyCharacterActivitiesComponent|null $activities Activity data - info about current activities available to the player.  COMPONENT TYPE: CharacterActivities
     *
     * @return self
     */
    public function setActivities($activities)
    {
        $this->container['activities'] = $activities;

        return $this;
    }

    /**
     * Gets equipment
     *
     * @return SingleComponentResponseOfDestinyInventoryComponent|null
     */
    public function getEquipment()
    {
        return $this->container['equipment'];
    }

    /**
     * Sets equipment
     *
     * @param SingleComponentResponseOfDestinyInventoryComponent|null $equipment Equipped items on the character.  COMPONENT TYPE: CharacterEquipment
     *
     * @return self
     */
    public function setEquipment($equipment)
    {
        $this->container['equipment'] = $equipment;

        return $this;
    }

    /**
     * Gets kiosks
     *
     * @return SingleComponentResponseOfDestinyKiosksComponent|null
     */
    public function getKiosks()
    {
        return $this->container['kiosks'];
    }

    /**
     * Sets kiosks
     *
     * @param SingleComponentResponseOfDestinyKiosksComponent|null $kiosks Items available from Kiosks that are available to this specific character.   COMPONENT TYPE: Kiosks
     *
     * @return self
     */
    public function setKiosks($kiosks)
    {
        $this->container['kiosks'] = $kiosks;

        return $this;
    }

    /**
     * Gets plug_sets
     *
     * @return SingleComponentResponseOfDestinyPlugSetsComponent|null
     */
    public function getPlugSets()
    {
        return $this->container['plug_sets'];
    }

    /**
     * Sets plug_sets
     *
     * @param SingleComponentResponseOfDestinyPlugSetsComponent|null $plug_sets When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states that are scoped to this character.  This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.  COMPONENT TYPE: ItemSockets
     *
     * @return self
     */
    public function setPlugSets($plug_sets)
    {
        $this->container['plug_sets'] = $plug_sets;

        return $this;
    }

    /**
     * Gets presentation_nodes
     *
     * @return SingleComponentResponseOfDestinyPresentationNodesComponent|null
     */
    public function getPresentationNodes()
    {
        return $this->container['presentation_nodes'];
    }

    /**
     * Sets presentation_nodes
     *
     * @param SingleComponentResponseOfDestinyPresentationNodesComponent|null $presentation_nodes COMPONENT TYPE: PresentationNodes
     *
     * @return self
     */
    public function setPresentationNodes($presentation_nodes)
    {
        $this->container['presentation_nodes'] = $presentation_nodes;

        return $this;
    }

    /**
     * Gets records
     *
     * @return SingleComponentResponseOfDestinyCharacterRecordsComponent|null
     */
    public function getRecords()
    {
        return $this->container['records'];
    }

    /**
     * Sets records
     *
     * @param SingleComponentResponseOfDestinyCharacterRecordsComponent|null $records COMPONENT TYPE: Records
     *
     * @return self
     */
    public function setRecords($records)
    {
        $this->container['records'] = $records;

        return $this;
    }

    /**
     * Gets collectibles
     *
     * @return SingleComponentResponseOfDestinyCollectiblesComponent|null
     */
    public function getCollectibles()
    {
        return $this->container['collectibles'];
    }

    /**
     * Sets collectibles
     *
     * @param SingleComponentResponseOfDestinyCollectiblesComponent|null $collectibles COMPONENT TYPE: Collectibles
     *
     * @return self
     */
    public function setCollectibles($collectibles)
    {
        $this->container['collectibles'] = $collectibles;

        return $this;
    }

    /**
     * Gets item_components
     *
     * @return DestinyItemComponentSetOfint64|null
     */
    public function getItemComponents()
    {
        return $this->container['item_components'];
    }

    /**
     * Sets item_components
     *
     * @param DestinyItemComponentSetOfint64|null $item_components The set of components belonging to the player's instanced items.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
     *
     * @return self
     */
    public function setItemComponents($item_components)
    {
        $this->container['item_components'] = $item_components;

        return $this;
    }

    /**
     * Gets uninstanced_item_components
     *
     * @return DestinyBaseItemComponentSetOfuint32|null
     */
    public function getUninstancedItemComponents()
    {
        return $this->container['uninstanced_item_components'];
    }

    /**
     * Sets uninstanced_item_components
     *
     * @param DestinyBaseItemComponentSetOfuint32|null $uninstanced_item_components The set of components belonging to the player's UNinstanced items. Because apparently now those too can have information relevant to the character's state.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
     *
     * @return self
     */
    public function setUninstancedItemComponents($uninstanced_item_components)
    {
        $this->container['uninstanced_item_components'] = $uninstanced_item_components;

        return $this;
    }

    /**
     * Gets currency_lookups
     *
     * @return SingleComponentResponseOfDestinyCurrenciesComponent|null
     */
    public function getCurrencyLookups()
    {
        return $this->container['currency_lookups'];
    }

    /**
     * Sets currency_lookups
     *
     * @param SingleComponentResponseOfDestinyCurrenciesComponent|null $currency_lookups A \"lookup\" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.  COMPONENT TYPE: CurrencyLookups
     *
     * @return self
     */
    public function setCurrencyLookups($currency_lookups)
    {
        $this->container['currency_lookups'] = $currency_lookups;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


