<?php
/**
 * DestinyHistoricalStatsDestinyPlayer
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyHistoricalStatsDestinyPlayer Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyHistoricalStatsDestinyPlayer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.HistoricalStats.DestinyPlayer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'destiny_user_info' => 'UserUserInfoCard',
        'character_class' => 'string',
        'class_hash' => 'int',
        'race_hash' => 'int',
        'gender_hash' => 'int',
        'character_level' => 'int',
        'light_level' => 'int',
        'bungie_net_user_info' => 'UserUserInfoCard',
        'clan_name' => 'string',
        'clan_tag' => 'string',
        'emblem_hash' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'destiny_user_info' => null,
        'character_class' => null,
        'class_hash' => 'uint32',
        'race_hash' => 'uint32',
        'gender_hash' => 'uint32',
        'character_level' => 'int32',
        'light_level' => 'int32',
        'bungie_net_user_info' => null,
        'clan_name' => null,
        'clan_tag' => null,
        'emblem_hash' => 'uint32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'destiny_user_info' => 'destinyUserInfo',
        'character_class' => 'characterClass',
        'class_hash' => 'classHash',
        'race_hash' => 'raceHash',
        'gender_hash' => 'genderHash',
        'character_level' => 'characterLevel',
        'light_level' => 'lightLevel',
        'bungie_net_user_info' => 'bungieNetUserInfo',
        'clan_name' => 'clanName',
        'clan_tag' => 'clanTag',
        'emblem_hash' => 'emblemHash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'destiny_user_info' => 'setDestinyUserInfo',
        'character_class' => 'setCharacterClass',
        'class_hash' => 'setClassHash',
        'race_hash' => 'setRaceHash',
        'gender_hash' => 'setGenderHash',
        'character_level' => 'setCharacterLevel',
        'light_level' => 'setLightLevel',
        'bungie_net_user_info' => 'setBungieNetUserInfo',
        'clan_name' => 'setClanName',
        'clan_tag' => 'setClanTag',
        'emblem_hash' => 'setEmblemHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'destiny_user_info' => 'getDestinyUserInfo',
        'character_class' => 'getCharacterClass',
        'class_hash' => 'getClassHash',
        'race_hash' => 'getRaceHash',
        'gender_hash' => 'getGenderHash',
        'character_level' => 'getCharacterLevel',
        'light_level' => 'getLightLevel',
        'bungie_net_user_info' => 'getBungieNetUserInfo',
        'clan_name' => 'getClanName',
        'clan_tag' => 'getClanTag',
        'emblem_hash' => 'getEmblemHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['destiny_user_info'] = $data['destiny_user_info'] ?? null;
        $this->container['character_class'] = $data['character_class'] ?? null;
        $this->container['class_hash'] = $data['class_hash'] ?? null;
        $this->container['race_hash'] = $data['race_hash'] ?? null;
        $this->container['gender_hash'] = $data['gender_hash'] ?? null;
        $this->container['character_level'] = $data['character_level'] ?? null;
        $this->container['light_level'] = $data['light_level'] ?? null;
        $this->container['bungie_net_user_info'] = $data['bungie_net_user_info'] ?? null;
        $this->container['clan_name'] = $data['clan_name'] ?? null;
        $this->container['clan_tag'] = $data['clan_tag'] ?? null;
        $this->container['emblem_hash'] = $data['emblem_hash'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets destiny_user_info
     *
     * @return UserUserInfoCard|null
     */
    public function getDestinyUserInfo()
    {
        return $this->container['destiny_user_info'];
    }

    /**
     * Sets destiny_user_info
     *
     * @param UserUserInfoCard|null $destiny_user_info Details about the player as they are known in game (platform display name, Destiny emblem)
     *
     * @return self
     */
    public function setDestinyUserInfo($destiny_user_info)
    {
        $this->container['destiny_user_info'] = $destiny_user_info;

        return $this;
    }

    /**
     * Gets character_class
     *
     * @return string|null
     */
    public function getCharacterClass()
    {
        return $this->container['character_class'];
    }

    /**
     * Sets character_class
     *
     * @param string|null $character_class Class of the character if applicable and available.
     *
     * @return self
     */
    public function setCharacterClass($character_class)
    {
        $this->container['character_class'] = $character_class;

        return $this;
    }

    /**
     * Gets class_hash
     *
     * @return int|null
     */
    public function getClassHash()
    {
        return $this->container['class_hash'];
    }

    /**
     * Sets class_hash
     *
     * @param int|null $class_hash class_hash
     *
     * @return self
     */
    public function setClassHash($class_hash)
    {
        $this->container['class_hash'] = $class_hash;

        return $this;
    }

    /**
     * Gets race_hash
     *
     * @return int|null
     */
    public function getRaceHash()
    {
        return $this->container['race_hash'];
    }

    /**
     * Sets race_hash
     *
     * @param int|null $race_hash race_hash
     *
     * @return self
     */
    public function setRaceHash($race_hash)
    {
        $this->container['race_hash'] = $race_hash;

        return $this;
    }

    /**
     * Gets gender_hash
     *
     * @return int|null
     */
    public function getGenderHash()
    {
        return $this->container['gender_hash'];
    }

    /**
     * Sets gender_hash
     *
     * @param int|null $gender_hash gender_hash
     *
     * @return self
     */
    public function setGenderHash($gender_hash)
    {
        $this->container['gender_hash'] = $gender_hash;

        return $this;
    }

    /**
     * Gets character_level
     *
     * @return int|null
     */
    public function getCharacterLevel()
    {
        return $this->container['character_level'];
    }

    /**
     * Sets character_level
     *
     * @param int|null $character_level Level of the character if available. Zero if it is not available.
     *
     * @return self
     */
    public function setCharacterLevel($character_level)
    {
        $this->container['character_level'] = $character_level;

        return $this;
    }

    /**
     * Gets light_level
     *
     * @return int|null
     */
    public function getLightLevel()
    {
        return $this->container['light_level'];
    }

    /**
     * Sets light_level
     *
     * @param int|null $light_level Light Level of the character if available. Zero if it is not available.
     *
     * @return self
     */
    public function setLightLevel($light_level)
    {
        $this->container['light_level'] = $light_level;

        return $this;
    }

    /**
     * Gets bungie_net_user_info
     *
     * @return UserUserInfoCard|null
     */
    public function getBungieNetUserInfo()
    {
        return $this->container['bungie_net_user_info'];
    }

    /**
     * Sets bungie_net_user_info
     *
     * @param UserUserInfoCard|null $bungie_net_user_info Details about the player as they are known on BungieNet. This will be undefined if the player has marked their credential private, or does not have a BungieNet account.
     *
     * @return self
     */
    public function setBungieNetUserInfo($bungie_net_user_info)
    {
        $this->container['bungie_net_user_info'] = $bungie_net_user_info;

        return $this;
    }

    /**
     * Gets clan_name
     *
     * @return string|null
     */
    public function getClanName()
    {
        return $this->container['clan_name'];
    }

    /**
     * Sets clan_name
     *
     * @param string|null $clan_name Current clan name for the player. This value may be null or an empty string if the user does not have a clan.
     *
     * @return self
     */
    public function setClanName($clan_name)
    {
        $this->container['clan_name'] = $clan_name;

        return $this;
    }

    /**
     * Gets clan_tag
     *
     * @return string|null
     */
    public function getClanTag()
    {
        return $this->container['clan_tag'];
    }

    /**
     * Sets clan_tag
     *
     * @param string|null $clan_tag Current clan tag for the player. This value may be null or an empty string if the user does not have a clan.
     *
     * @return self
     */
    public function setClanTag($clan_tag)
    {
        $this->container['clan_tag'] = $clan_tag;

        return $this;
    }

    /**
     * Gets emblem_hash
     *
     * @return int|null
     */
    public function getEmblemHash()
    {
        return $this->container['emblem_hash'];
    }

    /**
     * Sets emblem_hash
     *
     * @param int|null $emblem_hash If we know the emblem's hash, this can be used to look up the player's emblem at the time of a match when receiving PGCR data, or otherwise their currently equipped emblem (if we are able to obtain it).
     *
     * @return self
     */
    public function setEmblemHash($emblem_hash)
    {
        $this->container['emblem_hash'] = $emblem_hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


