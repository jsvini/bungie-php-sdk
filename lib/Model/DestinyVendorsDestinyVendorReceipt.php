<?php
/**
 * DestinyVendorsDestinyVendorReceipt
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyVendorsDestinyVendorReceipt Class Doc Comment
 *
 * @category Class
 * @description If a character purchased an item that is refundable, a Vendor Receipt will be created on the user&#39;s Destiny Profile. These expire after a configurable period of time, but until then can be used to get refunds on items. BNet does not provide the ability to refund a purchase *yet*, but you know.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyVendorsDestinyVendorReceipt implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Vendors.DestinyVendorReceipt';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'currency_paid' => '\OpenAPI\Client\Model\DestinyDestinyItemQuantity[]',
        'item_received' => 'DestinyDestinyItemQuantity',
        'license_unlock_hash' => 'int',
        'purchased_by_character_id' => 'int',
        'refund_policy' => 'int',
        'sequence_number' => 'int',
        'time_to_expiration' => 'int',
        'expires_on' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'currency_paid' => null,
        'item_received' => null,
        'license_unlock_hash' => 'uint32',
        'purchased_by_character_id' => 'int64',
        'refund_policy' => 'int32',
        'sequence_number' => 'int32',
        'time_to_expiration' => 'int64',
        'expires_on' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency_paid' => 'currencyPaid',
        'item_received' => 'itemReceived',
        'license_unlock_hash' => 'licenseUnlockHash',
        'purchased_by_character_id' => 'purchasedByCharacterId',
        'refund_policy' => 'refundPolicy',
        'sequence_number' => 'sequenceNumber',
        'time_to_expiration' => 'timeToExpiration',
        'expires_on' => 'expiresOn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency_paid' => 'setCurrencyPaid',
        'item_received' => 'setItemReceived',
        'license_unlock_hash' => 'setLicenseUnlockHash',
        'purchased_by_character_id' => 'setPurchasedByCharacterId',
        'refund_policy' => 'setRefundPolicy',
        'sequence_number' => 'setSequenceNumber',
        'time_to_expiration' => 'setTimeToExpiration',
        'expires_on' => 'setExpiresOn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency_paid' => 'getCurrencyPaid',
        'item_received' => 'getItemReceived',
        'license_unlock_hash' => 'getLicenseUnlockHash',
        'purchased_by_character_id' => 'getPurchasedByCharacterId',
        'refund_policy' => 'getRefundPolicy',
        'sequence_number' => 'getSequenceNumber',
        'time_to_expiration' => 'getTimeToExpiration',
        'expires_on' => 'getExpiresOn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currency_paid'] = $data['currency_paid'] ?? null;
        $this->container['item_received'] = $data['item_received'] ?? null;
        $this->container['license_unlock_hash'] = $data['license_unlock_hash'] ?? null;
        $this->container['purchased_by_character_id'] = $data['purchased_by_character_id'] ?? null;
        $this->container['refund_policy'] = $data['refund_policy'] ?? null;
        $this->container['sequence_number'] = $data['sequence_number'] ?? null;
        $this->container['time_to_expiration'] = $data['time_to_expiration'] ?? null;
        $this->container['expires_on'] = $data['expires_on'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency_paid
     *
     * @return \OpenAPI\Client\Model\DestinyDestinyItemQuantity[]|null
     */
    public function getCurrencyPaid()
    {
        return $this->container['currency_paid'];
    }

    /**
     * Sets currency_paid
     *
     * @param \OpenAPI\Client\Model\DestinyDestinyItemQuantity[]|null $currency_paid The amount paid for the item, in terms of items that were consumed in the purchase and their quantity.
     *
     * @return self
     */
    public function setCurrencyPaid($currency_paid)
    {
        $this->container['currency_paid'] = $currency_paid;

        return $this;
    }

    /**
     * Gets item_received
     *
     * @return DestinyDestinyItemQuantity|null
     */
    public function getItemReceived()
    {
        return $this->container['item_received'];
    }

    /**
     * Sets item_received
     *
     * @param DestinyDestinyItemQuantity|null $item_received The item that was received, and its quantity.
     *
     * @return self
     */
    public function setItemReceived($item_received)
    {
        $this->container['item_received'] = $item_received;

        return $this;
    }

    /**
     * Gets license_unlock_hash
     *
     * @return int|null
     */
    public function getLicenseUnlockHash()
    {
        return $this->container['license_unlock_hash'];
    }

    /**
     * Sets license_unlock_hash
     *
     * @param int|null $license_unlock_hash The unlock flag used to determine whether you still have the purchased item.
     *
     * @return self
     */
    public function setLicenseUnlockHash($license_unlock_hash)
    {
        $this->container['license_unlock_hash'] = $license_unlock_hash;

        return $this;
    }

    /**
     * Gets purchased_by_character_id
     *
     * @return int|null
     */
    public function getPurchasedByCharacterId()
    {
        return $this->container['purchased_by_character_id'];
    }

    /**
     * Sets purchased_by_character_id
     *
     * @param int|null $purchased_by_character_id The ID of the character who made the purchase.
     *
     * @return self
     */
    public function setPurchasedByCharacterId($purchased_by_character_id)
    {
        $this->container['purchased_by_character_id'] = $purchased_by_character_id;

        return $this;
    }

    /**
     * Gets refund_policy
     *
     * @return int|null
     */
    public function getRefundPolicy()
    {
        return $this->container['refund_policy'];
    }

    /**
     * Sets refund_policy
     *
     * @param int|null $refund_policy Whether you can get a refund, and what happens in order for the refund to be received. See the DestinyVendorItemRefundPolicy enum for details.
     *
     * @return self
     */
    public function setRefundPolicy($refund_policy)
    {
        $this->container['refund_policy'] = $refund_policy;

        return $this;
    }

    /**
     * Gets sequence_number
     *
     * @return int|null
     */
    public function getSequenceNumber()
    {
        return $this->container['sequence_number'];
    }

    /**
     * Sets sequence_number
     *
     * @param int|null $sequence_number The identifier of this receipt.
     *
     * @return self
     */
    public function setSequenceNumber($sequence_number)
    {
        $this->container['sequence_number'] = $sequence_number;

        return $this;
    }

    /**
     * Gets time_to_expiration
     *
     * @return int|null
     */
    public function getTimeToExpiration()
    {
        return $this->container['time_to_expiration'];
    }

    /**
     * Sets time_to_expiration
     *
     * @param int|null $time_to_expiration The seconds since epoch at which this receipt is rendered invalid.
     *
     * @return self
     */
    public function setTimeToExpiration($time_to_expiration)
    {
        $this->container['time_to_expiration'] = $time_to_expiration;

        return $this;
    }

    /**
     * Gets expires_on
     *
     * @return \DateTime|null
     */
    public function getExpiresOn()
    {
        return $this->container['expires_on'];
    }

    /**
     * Sets expires_on
     *
     * @param \DateTime|null $expires_on The date at which this receipt is rendered invalid.
     *
     * @return self
     */
    public function setExpiresOn($expires_on)
    {
        $this->container['expires_on'] = $expires_on;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


