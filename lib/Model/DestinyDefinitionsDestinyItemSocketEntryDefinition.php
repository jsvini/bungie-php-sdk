<?php
/**
 * DestinyDefinitionsDestinyItemSocketEntryDefinition
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyDefinitionsDestinyItemSocketEntryDefinition Class Doc Comment
 *
 * @category Class
 * @description The definition information for a specific socket on an item. This will determine how the socket behaves in-game.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyDefinitionsDestinyItemSocketEntryDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.DestinyItemSocketEntryDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'socket_type_hash' => 'int',
        'single_initial_item_hash' => 'int',
        'reusable_plug_items' => '\OpenAPI\Client\Model\DestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition[]',
        'prevent_initialization_on_vendor_purchase' => 'bool',
        'hide_perks_in_item_tooltip' => 'bool',
        'plug_sources' => 'int',
        'reusable_plug_set_hash' => 'int',
        'randomized_plug_set_hash' => 'int',
        'default_visible' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'socket_type_hash' => 'uint32',
        'single_initial_item_hash' => 'uint32',
        'reusable_plug_items' => null,
        'prevent_initialization_on_vendor_purchase' => null,
        'hide_perks_in_item_tooltip' => null,
        'plug_sources' => 'int32',
        'reusable_plug_set_hash' => 'uint32',
        'randomized_plug_set_hash' => 'uint32',
        'default_visible' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'socket_type_hash' => 'socketTypeHash',
        'single_initial_item_hash' => 'singleInitialItemHash',
        'reusable_plug_items' => 'reusablePlugItems',
        'prevent_initialization_on_vendor_purchase' => 'preventInitializationOnVendorPurchase',
        'hide_perks_in_item_tooltip' => 'hidePerksInItemTooltip',
        'plug_sources' => 'plugSources',
        'reusable_plug_set_hash' => 'reusablePlugSetHash',
        'randomized_plug_set_hash' => 'randomizedPlugSetHash',
        'default_visible' => 'defaultVisible'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'socket_type_hash' => 'setSocketTypeHash',
        'single_initial_item_hash' => 'setSingleInitialItemHash',
        'reusable_plug_items' => 'setReusablePlugItems',
        'prevent_initialization_on_vendor_purchase' => 'setPreventInitializationOnVendorPurchase',
        'hide_perks_in_item_tooltip' => 'setHidePerksInItemTooltip',
        'plug_sources' => 'setPlugSources',
        'reusable_plug_set_hash' => 'setReusablePlugSetHash',
        'randomized_plug_set_hash' => 'setRandomizedPlugSetHash',
        'default_visible' => 'setDefaultVisible'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'socket_type_hash' => 'getSocketTypeHash',
        'single_initial_item_hash' => 'getSingleInitialItemHash',
        'reusable_plug_items' => 'getReusablePlugItems',
        'prevent_initialization_on_vendor_purchase' => 'getPreventInitializationOnVendorPurchase',
        'hide_perks_in_item_tooltip' => 'getHidePerksInItemTooltip',
        'plug_sources' => 'getPlugSources',
        'reusable_plug_set_hash' => 'getReusablePlugSetHash',
        'randomized_plug_set_hash' => 'getRandomizedPlugSetHash',
        'default_visible' => 'getDefaultVisible'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['socket_type_hash'] = $data['socket_type_hash'] ?? null;
        $this->container['single_initial_item_hash'] = $data['single_initial_item_hash'] ?? null;
        $this->container['reusable_plug_items'] = $data['reusable_plug_items'] ?? null;
        $this->container['prevent_initialization_on_vendor_purchase'] = $data['prevent_initialization_on_vendor_purchase'] ?? null;
        $this->container['hide_perks_in_item_tooltip'] = $data['hide_perks_in_item_tooltip'] ?? null;
        $this->container['plug_sources'] = $data['plug_sources'] ?? null;
        $this->container['reusable_plug_set_hash'] = $data['reusable_plug_set_hash'] ?? null;
        $this->container['randomized_plug_set_hash'] = $data['randomized_plug_set_hash'] ?? null;
        $this->container['default_visible'] = $data['default_visible'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets socket_type_hash
     *
     * @return int|null
     */
    public function getSocketTypeHash()
    {
        return $this->container['socket_type_hash'];
    }

    /**
     * Sets socket_type_hash
     *
     * @param int|null $socket_type_hash All sockets have a type, and this is the hash identifier for this particular type. Use it to look up the DestinySocketTypeDefinition: read there for more information on how socket types affect the behavior of the socket.
     *
     * @return self
     */
    public function setSocketTypeHash($socket_type_hash)
    {
        $this->container['socket_type_hash'] = $socket_type_hash;

        return $this;
    }

    /**
     * Gets single_initial_item_hash
     *
     * @return int|null
     */
    public function getSingleInitialItemHash()
    {
        return $this->container['single_initial_item_hash'];
    }

    /**
     * Sets single_initial_item_hash
     *
     * @param int|null $single_initial_item_hash If a valid hash, this is the hash identifier for the DestinyInventoryItemDefinition representing the Plug that will be initially inserted into the item on item creation. Otherwise, this Socket will either start without a plug inserted, or will have one randomly inserted.
     *
     * @return self
     */
    public function setSingleInitialItemHash($single_initial_item_hash)
    {
        $this->container['single_initial_item_hash'] = $single_initial_item_hash;

        return $this;
    }

    /**
     * Gets reusable_plug_items
     *
     * @return \OpenAPI\Client\Model\DestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition[]|null
     */
    public function getReusablePlugItems()
    {
        return $this->container['reusable_plug_items'];
    }

    /**
     * Sets reusable_plug_items
     *
     * @param \OpenAPI\Client\Model\DestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition[]|null $reusable_plug_items This is a list of pre-determined plugs that can *always* be plugged into this socket, without the character having the plug in their inventory.  If this list is populated, you will not be allowed to plug an arbitrary item in the socket: you will only be able to choose from one of these reusable plugs.
     *
     * @return self
     */
    public function setReusablePlugItems($reusable_plug_items)
    {
        $this->container['reusable_plug_items'] = $reusable_plug_items;

        return $this;
    }

    /**
     * Gets prevent_initialization_on_vendor_purchase
     *
     * @return bool|null
     */
    public function getPreventInitializationOnVendorPurchase()
    {
        return $this->container['prevent_initialization_on_vendor_purchase'];
    }

    /**
     * Sets prevent_initialization_on_vendor_purchase
     *
     * @param bool|null $prevent_initialization_on_vendor_purchase If this is true, then the socket will not be initialized with a plug if the item is purchased from a Vendor.  Remember that Vendors are much more than conceptual vendors: they include \"Collection Kiosks\" and other entities. See DestinyVendorDefinition for more information.
     *
     * @return self
     */
    public function setPreventInitializationOnVendorPurchase($prevent_initialization_on_vendor_purchase)
    {
        $this->container['prevent_initialization_on_vendor_purchase'] = $prevent_initialization_on_vendor_purchase;

        return $this;
    }

    /**
     * Gets hide_perks_in_item_tooltip
     *
     * @return bool|null
     */
    public function getHidePerksInItemTooltip()
    {
        return $this->container['hide_perks_in_item_tooltip'];
    }

    /**
     * Sets hide_perks_in_item_tooltip
     *
     * @param bool|null $hide_perks_in_item_tooltip If this is true, the perks provided by this socket shouldn't be shown in the item's tooltip. This might be useful if it's providing a hidden bonus, or if the bonus is less important than other benefits on the item.
     *
     * @return self
     */
    public function setHidePerksInItemTooltip($hide_perks_in_item_tooltip)
    {
        $this->container['hide_perks_in_item_tooltip'] = $hide_perks_in_item_tooltip;

        return $this;
    }

    /**
     * Gets plug_sources
     *
     * @return int|null
     */
    public function getPlugSources()
    {
        return $this->container['plug_sources'];
    }

    /**
     * Sets plug_sources
     *
     * @param int|null $plug_sources Indicates where you should go to get plugs for this socket. This will affect how you populate your UI, as well as what plugs are valid for this socket. It's an alternative to having to check for the existence of certain properties (reusablePlugItems for example) to infer where plugs should come from.
     *
     * @return self
     */
    public function setPlugSources($plug_sources)
    {
        $this->container['plug_sources'] = $plug_sources;

        return $this;
    }

    /**
     * Gets reusable_plug_set_hash
     *
     * @return int|null
     */
    public function getReusablePlugSetHash()
    {
        return $this->container['reusable_plug_set_hash'];
    }

    /**
     * Sets reusable_plug_set_hash
     *
     * @param int|null $reusable_plug_set_hash If this socket's plugs come from a reusable DestinyPlugSetDefinition, this is the identifier for that set. We added this concept to reduce some major duplication that's going to come from sockets as replacements for what was once implemented as large sets of items and kiosks (like Emotes).   As of Shadowkeep, these will come up much more frequently and be driven by game content rather than custom curation.
     *
     * @return self
     */
    public function setReusablePlugSetHash($reusable_plug_set_hash)
    {
        $this->container['reusable_plug_set_hash'] = $reusable_plug_set_hash;

        return $this;
    }

    /**
     * Gets randomized_plug_set_hash
     *
     * @return int|null
     */
    public function getRandomizedPlugSetHash()
    {
        return $this->container['randomized_plug_set_hash'];
    }

    /**
     * Sets randomized_plug_set_hash
     *
     * @param int|null $randomized_plug_set_hash This field replaces \"randomizedPlugItems\" as of Shadowkeep launch. If a socket has randomized plugs, this is a pointer to the set of plugs that could be used, as defined in DestinyPlugSetDefinition.   If null, the item has no randomized plugs.
     *
     * @return self
     */
    public function setRandomizedPlugSetHash($randomized_plug_set_hash)
    {
        $this->container['randomized_plug_set_hash'] = $randomized_plug_set_hash;

        return $this;
    }

    /**
     * Gets default_visible
     *
     * @return bool|null
     */
    public function getDefaultVisible()
    {
        return $this->container['default_visible'];
    }

    /**
     * Sets default_visible
     *
     * @param bool|null $default_visible If true, then this socket is visible in the item's \"default\" state. If you have an instance, you should always check the runtime state, as that can override this visibility setting: but if you're looking at the item on a conceptual level, this property can be useful for hiding data such as legacy sockets - which remain defined on items for infrastructure purposes, but can be confusing for users to see.
     *
     * @return self
     */
    public function setDefaultVisible($default_visible)
    {
        $this->container['default_visible'] = $default_visible;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


