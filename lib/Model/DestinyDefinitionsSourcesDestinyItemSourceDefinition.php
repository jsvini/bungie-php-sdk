<?php
/**
 * DestinyDefinitionsSourcesDestinyItemSourceDefinition
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyDefinitionsSourcesDestinyItemSourceDefinition Class Doc Comment
 *
 * @category Class
 * @description Properties of a DestinyInventoryItemDefinition that store all of the information we were able to discern about how the item spawns, and where you can find the item.  Items will have many of these sources, one per level at which it spawns, to try and give more granular data about where items spawn for specific level ranges.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyDefinitionsSourcesDestinyItemSourceDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.Sources.DestinyItemSourceDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'level' => 'int',
        'min_quality' => 'int',
        'max_quality' => 'int',
        'min_level_required' => 'int',
        'max_level_required' => 'int',
        'computed_stats' => 'map[string,\OpenAPI\Client\Model\DestinyDefinitionsDestinyInventoryItemStatDefinition]',
        'source_hashes' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'level' => 'int32',
        'min_quality' => 'int32',
        'max_quality' => 'int32',
        'min_level_required' => 'int32',
        'max_level_required' => 'int32',
        'computed_stats' => null,
        'source_hashes' => 'uint32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'level' => 'level',
        'min_quality' => 'minQuality',
        'max_quality' => 'maxQuality',
        'min_level_required' => 'minLevelRequired',
        'max_level_required' => 'maxLevelRequired',
        'computed_stats' => 'computedStats',
        'source_hashes' => 'sourceHashes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'level' => 'setLevel',
        'min_quality' => 'setMinQuality',
        'max_quality' => 'setMaxQuality',
        'min_level_required' => 'setMinLevelRequired',
        'max_level_required' => 'setMaxLevelRequired',
        'computed_stats' => 'setComputedStats',
        'source_hashes' => 'setSourceHashes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'level' => 'getLevel',
        'min_quality' => 'getMinQuality',
        'max_quality' => 'getMaxQuality',
        'min_level_required' => 'getMinLevelRequired',
        'max_level_required' => 'getMaxLevelRequired',
        'computed_stats' => 'getComputedStats',
        'source_hashes' => 'getSourceHashes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['level'] = $data['level'] ?? null;
        $this->container['min_quality'] = $data['min_quality'] ?? null;
        $this->container['max_quality'] = $data['max_quality'] ?? null;
        $this->container['min_level_required'] = $data['min_level_required'] ?? null;
        $this->container['max_level_required'] = $data['max_level_required'] ?? null;
        $this->container['computed_stats'] = $data['computed_stats'] ?? null;
        $this->container['source_hashes'] = $data['source_hashes'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets level
     *
     * @return int|null
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param int|null $level The level at which the item spawns. Essentially the Primary Key for this source data: there will be multiple of these source entries per item that has source data, grouped by the level at which the item spawns.
     *
     * @return self
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets min_quality
     *
     * @return int|null
     */
    public function getMinQuality()
    {
        return $this->container['min_quality'];
    }

    /**
     * Sets min_quality
     *
     * @param int|null $min_quality The minimum Quality at which the item spawns for this level. Examine DestinyInventoryItemDefinition for more information about what Quality means. Just don't ask Phaedrus about it, he'll never stop talking and you'll have to write a book about it.
     *
     * @return self
     */
    public function setMinQuality($min_quality)
    {
        $this->container['min_quality'] = $min_quality;

        return $this;
    }

    /**
     * Gets max_quality
     *
     * @return int|null
     */
    public function getMaxQuality()
    {
        return $this->container['max_quality'];
    }

    /**
     * Sets max_quality
     *
     * @param int|null $max_quality The maximum quality at which the item spawns for this level.
     *
     * @return self
     */
    public function setMaxQuality($max_quality)
    {
        $this->container['max_quality'] = $max_quality;

        return $this;
    }

    /**
     * Gets min_level_required
     *
     * @return int|null
     */
    public function getMinLevelRequired()
    {
        return $this->container['min_level_required'];
    }

    /**
     * Sets min_level_required
     *
     * @param int|null $min_level_required The minimum Character Level required for equipping the item when the item spawns at the item level defined on this DestinyItemSourceDefinition, as far as we saw in our processing.
     *
     * @return self
     */
    public function setMinLevelRequired($min_level_required)
    {
        $this->container['min_level_required'] = $min_level_required;

        return $this;
    }

    /**
     * Gets max_level_required
     *
     * @return int|null
     */
    public function getMaxLevelRequired()
    {
        return $this->container['max_level_required'];
    }

    /**
     * Sets max_level_required
     *
     * @param int|null $max_level_required The maximum Character Level required for equipping the item when the item spawns at the item level defined on this DestinyItemSourceDefinition, as far as we saw in our processing.
     *
     * @return self
     */
    public function setMaxLevelRequired($max_level_required)
    {
        $this->container['max_level_required'] = $max_level_required;

        return $this;
    }

    /**
     * Gets computed_stats
     *
     * @return map[string,\OpenAPI\Client\Model\DestinyDefinitionsDestinyInventoryItemStatDefinition]|null
     */
    public function getComputedStats()
    {
        return $this->container['computed_stats'];
    }

    /**
     * Sets computed_stats
     *
     * @param map[string,\OpenAPI\Client\Model\DestinyDefinitionsDestinyInventoryItemStatDefinition]|null $computed_stats The stats computed for this level/quality range.
     *
     * @return self
     */
    public function setComputedStats($computed_stats)
    {
        $this->container['computed_stats'] = $computed_stats;

        return $this;
    }

    /**
     * Gets source_hashes
     *
     * @return int[]|null
     */
    public function getSourceHashes()
    {
        return $this->container['source_hashes'];
    }

    /**
     * Sets source_hashes
     *
     * @param int[]|null $source_hashes The DestinyRewardSourceDefinitions found that can spawn the item at this level.
     *
     * @return self
     */
    public function setSourceHashes($source_hashes)
    {
        $this->container['source_hashes'] = $source_hashes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


