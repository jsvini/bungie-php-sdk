<?php
/**
 * DestinyEntitiesVendorsDestinyVendorSaleItemComponent
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyEntitiesVendorsDestinyVendorSaleItemComponent Class Doc Comment
 *
 * @category Class
 * @description Request this component if you want the details about an item being sold in relation to the character making the request: whether the character can buy it, whether they can afford it, and other data related to purchasing the item.  Note that if you want instance, stats, etc... data for the item, you&#39;ll have to request additional components such as ItemInstances, ItemPerks etc... and acquire them from the DestinyVendorResponse&#39;s \&quot;items\&quot; property.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyEntitiesVendorsDestinyVendorSaleItemComponent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Entities.Vendors.DestinyVendorSaleItemComponent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sale_status' => 'int',
        'required_unlocks' => 'int[]',
        'unlock_statuses' => '\OpenAPI\Client\Model\DestinyDestinyUnlockStatus[]',
        'failure_indexes' => 'int[]',
        'augments' => 'int',
        'vendor_item_index' => 'int',
        'item_hash' => 'int',
        'override_style_item_hash' => 'int',
        'quantity' => 'int',
        'costs' => '\OpenAPI\Client\Model\DestinyDestinyItemQuantity[]',
        'override_next_refresh_date' => '\DateTime',
        'api_purchasable' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sale_status' => 'int32',
        'required_unlocks' => 'uint32',
        'unlock_statuses' => null,
        'failure_indexes' => 'int32',
        'augments' => 'int32',
        'vendor_item_index' => 'int32',
        'item_hash' => 'uint32',
        'override_style_item_hash' => 'uint32',
        'quantity' => 'int32',
        'costs' => null,
        'override_next_refresh_date' => 'date-time',
        'api_purchasable' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sale_status' => 'saleStatus',
        'required_unlocks' => 'requiredUnlocks',
        'unlock_statuses' => 'unlockStatuses',
        'failure_indexes' => 'failureIndexes',
        'augments' => 'augments',
        'vendor_item_index' => 'vendorItemIndex',
        'item_hash' => 'itemHash',
        'override_style_item_hash' => 'overrideStyleItemHash',
        'quantity' => 'quantity',
        'costs' => 'costs',
        'override_next_refresh_date' => 'overrideNextRefreshDate',
        'api_purchasable' => 'apiPurchasable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sale_status' => 'setSaleStatus',
        'required_unlocks' => 'setRequiredUnlocks',
        'unlock_statuses' => 'setUnlockStatuses',
        'failure_indexes' => 'setFailureIndexes',
        'augments' => 'setAugments',
        'vendor_item_index' => 'setVendorItemIndex',
        'item_hash' => 'setItemHash',
        'override_style_item_hash' => 'setOverrideStyleItemHash',
        'quantity' => 'setQuantity',
        'costs' => 'setCosts',
        'override_next_refresh_date' => 'setOverrideNextRefreshDate',
        'api_purchasable' => 'setApiPurchasable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sale_status' => 'getSaleStatus',
        'required_unlocks' => 'getRequiredUnlocks',
        'unlock_statuses' => 'getUnlockStatuses',
        'failure_indexes' => 'getFailureIndexes',
        'augments' => 'getAugments',
        'vendor_item_index' => 'getVendorItemIndex',
        'item_hash' => 'getItemHash',
        'override_style_item_hash' => 'getOverrideStyleItemHash',
        'quantity' => 'getQuantity',
        'costs' => 'getCosts',
        'override_next_refresh_date' => 'getOverrideNextRefreshDate',
        'api_purchasable' => 'getApiPurchasable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sale_status'] = $data['sale_status'] ?? null;
        $this->container['required_unlocks'] = $data['required_unlocks'] ?? null;
        $this->container['unlock_statuses'] = $data['unlock_statuses'] ?? null;
        $this->container['failure_indexes'] = $data['failure_indexes'] ?? null;
        $this->container['augments'] = $data['augments'] ?? null;
        $this->container['vendor_item_index'] = $data['vendor_item_index'] ?? null;
        $this->container['item_hash'] = $data['item_hash'] ?? null;
        $this->container['override_style_item_hash'] = $data['override_style_item_hash'] ?? null;
        $this->container['quantity'] = $data['quantity'] ?? null;
        $this->container['costs'] = $data['costs'] ?? null;
        $this->container['override_next_refresh_date'] = $data['override_next_refresh_date'] ?? null;
        $this->container['api_purchasable'] = $data['api_purchasable'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sale_status
     *
     * @return int|null
     */
    public function getSaleStatus()
    {
        return $this->container['sale_status'];
    }

    /**
     * Sets sale_status
     *
     * @param int|null $sale_status A flag indicating whether the requesting character can buy the item, and if not the reasons why the character can't buy it.
     *
     * @return self
     */
    public function setSaleStatus($sale_status)
    {
        $this->container['sale_status'] = $sale_status;

        return $this;
    }

    /**
     * Gets required_unlocks
     *
     * @return int[]|null
     */
    public function getRequiredUnlocks()
    {
        return $this->container['required_unlocks'];
    }

    /**
     * Sets required_unlocks
     *
     * @param int[]|null $required_unlocks If you can't buy the item due to a complex character state, these will be hashes for DestinyUnlockDefinitions that you can check to see messages regarding the failure (if the unlocks have human readable information: it is not guaranteed that Unlocks will have human readable strings, and your application will have to handle that)  Prefer using failureIndexes instead. These are provided for informational purposes, but have largely been supplanted by failureIndexes.
     *
     * @return self
     */
    public function setRequiredUnlocks($required_unlocks)
    {
        $this->container['required_unlocks'] = $required_unlocks;

        return $this;
    }

    /**
     * Gets unlock_statuses
     *
     * @return \OpenAPI\Client\Model\DestinyDestinyUnlockStatus[]|null
     */
    public function getUnlockStatuses()
    {
        return $this->container['unlock_statuses'];
    }

    /**
     * Sets unlock_statuses
     *
     * @param \OpenAPI\Client\Model\DestinyDestinyUnlockStatus[]|null $unlock_statuses If any complex unlock states are checked in determining purchasability, these will be returned here along with the status of the unlock check.  Prefer using failureIndexes instead. These are provided for informational purposes, but have largely been supplanted by failureIndexes.
     *
     * @return self
     */
    public function setUnlockStatuses($unlock_statuses)
    {
        $this->container['unlock_statuses'] = $unlock_statuses;

        return $this;
    }

    /**
     * Gets failure_indexes
     *
     * @return int[]|null
     */
    public function getFailureIndexes()
    {
        return $this->container['failure_indexes'];
    }

    /**
     * Sets failure_indexes
     *
     * @param int[]|null $failure_indexes Indexes in to the \"failureStrings\" lookup table in DestinyVendorDefinition for the given Vendor. Gives some more reliable failure information for why you can't purchase an item.  It is preferred to use these over requiredUnlocks and unlockStatuses: the latter are provided mostly in case someone can do something interesting with it that I didn't anticipate.
     *
     * @return self
     */
    public function setFailureIndexes($failure_indexes)
    {
        $this->container['failure_indexes'] = $failure_indexes;

        return $this;
    }

    /**
     * Gets augments
     *
     * @return int|null
     */
    public function getAugments()
    {
        return $this->container['augments'];
    }

    /**
     * Sets augments
     *
     * @param int|null $augments A flags enumeration value representing the current state of any \"state modifiers\" on the item being sold. These are meant to correspond with some sort of visual indicator as to the augmentation: for instance, if an item is on sale or if you already own the item in question.  Determining how you want to represent these in your own app (or if you even want to) is an exercise left for the reader.
     *
     * @return self
     */
    public function setAugments($augments)
    {
        $this->container['augments'] = $augments;

        return $this;
    }

    /**
     * Gets vendor_item_index
     *
     * @return int|null
     */
    public function getVendorItemIndex()
    {
        return $this->container['vendor_item_index'];
    }

    /**
     * Sets vendor_item_index
     *
     * @param int|null $vendor_item_index The index into the DestinyVendorDefinition.itemList property. Note that this means Vendor data *is* Content Version dependent: make sure you have the latest content before you use Vendor data, or these indexes may mismatch.   Most systems avoid this problem, but Vendors is one area where we are unable to reasonably avoid content dependency at the moment.
     *
     * @return self
     */
    public function setVendorItemIndex($vendor_item_index)
    {
        $this->container['vendor_item_index'] = $vendor_item_index;

        return $this;
    }

    /**
     * Gets item_hash
     *
     * @return int|null
     */
    public function getItemHash()
    {
        return $this->container['item_hash'];
    }

    /**
     * Sets item_hash
     *
     * @param int|null $item_hash The hash of the item being sold, as a quick shortcut for looking up the DestinyInventoryItemDefinition of the sale item.
     *
     * @return self
     */
    public function setItemHash($item_hash)
    {
        $this->container['item_hash'] = $item_hash;

        return $this;
    }

    /**
     * Gets override_style_item_hash
     *
     * @return int|null
     */
    public function getOverrideStyleItemHash()
    {
        return $this->container['override_style_item_hash'];
    }

    /**
     * Sets override_style_item_hash
     *
     * @param int|null $override_style_item_hash If populated, this is the hash of the item whose icon (and other secondary styles, but *not* the human readable strings) should override whatever icons/styles are on the item being sold.  If you don't do this, certain items whose styles are being overridden by socketed items - such as the \"Recycle Shader\" item - would show whatever their default icon/style is, and it wouldn't be pretty or look accurate.
     *
     * @return self
     */
    public function setOverrideStyleItemHash($override_style_item_hash)
    {
        $this->container['override_style_item_hash'] = $override_style_item_hash;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity How much of the item you'll be getting.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets costs
     *
     * @return \OpenAPI\Client\Model\DestinyDestinyItemQuantity[]|null
     */
    public function getCosts()
    {
        return $this->container['costs'];
    }

    /**
     * Sets costs
     *
     * @param \OpenAPI\Client\Model\DestinyDestinyItemQuantity[]|null $costs A summary of the current costs of the item.
     *
     * @return self
     */
    public function setCosts($costs)
    {
        $this->container['costs'] = $costs;

        return $this;
    }

    /**
     * Gets override_next_refresh_date
     *
     * @return \DateTime|null
     */
    public function getOverrideNextRefreshDate()
    {
        return $this->container['override_next_refresh_date'];
    }

    /**
     * Sets override_next_refresh_date
     *
     * @param \DateTime|null $override_next_refresh_date If this item has its own custom date where it may be removed from the Vendor's rotation, this is that date.  Note that there's not actually any guarantee that it will go away: it could be chosen again and end up still being in the Vendor's sale items! But this is the next date where that test will occur, and is also the date that the game shows for availability on things like Bounties being sold. So it's the best we can give.
     *
     * @return self
     */
    public function setOverrideNextRefreshDate($override_next_refresh_date)
    {
        $this->container['override_next_refresh_date'] = $override_next_refresh_date;

        return $this;
    }

    /**
     * Gets api_purchasable
     *
     * @return bool|null
     */
    public function getApiPurchasable()
    {
        return $this->container['api_purchasable'];
    }

    /**
     * Sets api_purchasable
     *
     * @param bool|null $api_purchasable If true, this item can be purchased through the Bungie.net API.
     *
     * @return self
     */
    public function setApiPurchasable($api_purchasable)
    {
        $this->container['api_purchasable'] = $api_purchasable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


