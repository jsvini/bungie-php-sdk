<?php
/**
 * ForumForumRecruitmentDetail
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ForumForumRecruitmentDetail Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ForumForumRecruitmentDetail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Forum.ForumRecruitmentDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'topic_id' => 'int',
        'microphone_required' => 'bool',
        'intensity' => 'int',
        'tone' => 'int',
        'approved' => 'bool',
        'conversation_id' => 'int',
        'player_slots_total' => 'int',
        'player_slots_remaining' => 'int',
        'fireteam' => '\OpenAPI\Client\Model\UserGeneralUser[]',
        'kicked_player_ids' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'topic_id' => 'int64',
        'microphone_required' => null,
        'intensity' => 'byte',
        'tone' => 'byte',
        'approved' => null,
        'conversation_id' => 'int64',
        'player_slots_total' => 'int32',
        'player_slots_remaining' => 'int32',
        'fireteam' => null,
        'kicked_player_ids' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'topic_id' => 'topicId',
        'microphone_required' => 'microphoneRequired',
        'intensity' => 'intensity',
        'tone' => 'tone',
        'approved' => 'approved',
        'conversation_id' => 'conversationId',
        'player_slots_total' => 'playerSlotsTotal',
        'player_slots_remaining' => 'playerSlotsRemaining',
        'fireteam' => 'Fireteam',
        'kicked_player_ids' => 'kickedPlayerIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'topic_id' => 'setTopicId',
        'microphone_required' => 'setMicrophoneRequired',
        'intensity' => 'setIntensity',
        'tone' => 'setTone',
        'approved' => 'setApproved',
        'conversation_id' => 'setConversationId',
        'player_slots_total' => 'setPlayerSlotsTotal',
        'player_slots_remaining' => 'setPlayerSlotsRemaining',
        'fireteam' => 'setFireteam',
        'kicked_player_ids' => 'setKickedPlayerIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'topic_id' => 'getTopicId',
        'microphone_required' => 'getMicrophoneRequired',
        'intensity' => 'getIntensity',
        'tone' => 'getTone',
        'approved' => 'getApproved',
        'conversation_id' => 'getConversationId',
        'player_slots_total' => 'getPlayerSlotsTotal',
        'player_slots_remaining' => 'getPlayerSlotsRemaining',
        'fireteam' => 'getFireteam',
        'kicked_player_ids' => 'getKickedPlayerIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['topic_id'] = $data['topic_id'] ?? null;
        $this->container['microphone_required'] = $data['microphone_required'] ?? null;
        $this->container['intensity'] = $data['intensity'] ?? null;
        $this->container['tone'] = $data['tone'] ?? null;
        $this->container['approved'] = $data['approved'] ?? null;
        $this->container['conversation_id'] = $data['conversation_id'] ?? null;
        $this->container['player_slots_total'] = $data['player_slots_total'] ?? null;
        $this->container['player_slots_remaining'] = $data['player_slots_remaining'] ?? null;
        $this->container['fireteam'] = $data['fireteam'] ?? null;
        $this->container['kicked_player_ids'] = $data['kicked_player_ids'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets topic_id
     *
     * @return int|null
     */
    public function getTopicId()
    {
        return $this->container['topic_id'];
    }

    /**
     * Sets topic_id
     *
     * @param int|null $topic_id topic_id
     *
     * @return self
     */
    public function setTopicId($topic_id)
    {
        $this->container['topic_id'] = $topic_id;

        return $this;
    }

    /**
     * Gets microphone_required
     *
     * @return bool|null
     */
    public function getMicrophoneRequired()
    {
        return $this->container['microphone_required'];
    }

    /**
     * Sets microphone_required
     *
     * @param bool|null $microphone_required microphone_required
     *
     * @return self
     */
    public function setMicrophoneRequired($microphone_required)
    {
        $this->container['microphone_required'] = $microphone_required;

        return $this;
    }

    /**
     * Gets intensity
     *
     * @return int|null
     */
    public function getIntensity()
    {
        return $this->container['intensity'];
    }

    /**
     * Sets intensity
     *
     * @param int|null $intensity intensity
     *
     * @return self
     */
    public function setIntensity($intensity)
    {
        $this->container['intensity'] = $intensity;

        return $this;
    }

    /**
     * Gets tone
     *
     * @return int|null
     */
    public function getTone()
    {
        return $this->container['tone'];
    }

    /**
     * Sets tone
     *
     * @param int|null $tone tone
     *
     * @return self
     */
    public function setTone($tone)
    {
        $this->container['tone'] = $tone;

        return $this;
    }

    /**
     * Gets approved
     *
     * @return bool|null
     */
    public function getApproved()
    {
        return $this->container['approved'];
    }

    /**
     * Sets approved
     *
     * @param bool|null $approved approved
     *
     * @return self
     */
    public function setApproved($approved)
    {
        $this->container['approved'] = $approved;

        return $this;
    }

    /**
     * Gets conversation_id
     *
     * @return int|null
     */
    public function getConversationId()
    {
        return $this->container['conversation_id'];
    }

    /**
     * Sets conversation_id
     *
     * @param int|null $conversation_id conversation_id
     *
     * @return self
     */
    public function setConversationId($conversation_id)
    {
        $this->container['conversation_id'] = $conversation_id;

        return $this;
    }

    /**
     * Gets player_slots_total
     *
     * @return int|null
     */
    public function getPlayerSlotsTotal()
    {
        return $this->container['player_slots_total'];
    }

    /**
     * Sets player_slots_total
     *
     * @param int|null $player_slots_total player_slots_total
     *
     * @return self
     */
    public function setPlayerSlotsTotal($player_slots_total)
    {
        $this->container['player_slots_total'] = $player_slots_total;

        return $this;
    }

    /**
     * Gets player_slots_remaining
     *
     * @return int|null
     */
    public function getPlayerSlotsRemaining()
    {
        return $this->container['player_slots_remaining'];
    }

    /**
     * Sets player_slots_remaining
     *
     * @param int|null $player_slots_remaining player_slots_remaining
     *
     * @return self
     */
    public function setPlayerSlotsRemaining($player_slots_remaining)
    {
        $this->container['player_slots_remaining'] = $player_slots_remaining;

        return $this;
    }

    /**
     * Gets fireteam
     *
     * @return \OpenAPI\Client\Model\UserGeneralUser[]|null
     */
    public function getFireteam()
    {
        return $this->container['fireteam'];
    }

    /**
     * Sets fireteam
     *
     * @param \OpenAPI\Client\Model\UserGeneralUser[]|null $fireteam fireteam
     *
     * @return self
     */
    public function setFireteam($fireteam)
    {
        $this->container['fireteam'] = $fireteam;

        return $this;
    }

    /**
     * Gets kicked_player_ids
     *
     * @return int[]|null
     */
    public function getKickedPlayerIds()
    {
        return $this->container['kicked_player_ids'];
    }

    /**
     * Sets kicked_player_ids
     *
     * @param int[]|null $kicked_player_ids kicked_player_ids
     *
     * @return self
     */
    public function setKickedPlayerIds($kicked_player_ids)
    {
        $this->container['kicked_player_ids'] = $kicked_player_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


