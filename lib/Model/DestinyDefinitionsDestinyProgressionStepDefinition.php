<?php
/**
 * DestinyDefinitionsDestinyProgressionStepDefinition
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyDefinitionsDestinyProgressionStepDefinition Class Doc Comment
 *
 * @category Class
 * @description This defines a single Step in a progression (which roughly equates to a level. See DestinyProgressionDefinition for caveats).
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyDefinitionsDestinyProgressionStepDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.DestinyProgressionStepDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'step_name' => 'string',
        'display_effect_type' => 'int',
        'progress_total' => 'int',
        'reward_items' => '\OpenAPI\Client\Model\DestinyDestinyItemQuantity[]',
        'icon' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'step_name' => null,
        'display_effect_type' => 'int32',
        'progress_total' => 'int32',
        'reward_items' => null,
        'icon' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'step_name' => 'stepName',
        'display_effect_type' => 'displayEffectType',
        'progress_total' => 'progressTotal',
        'reward_items' => 'rewardItems',
        'icon' => 'icon'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'step_name' => 'setStepName',
        'display_effect_type' => 'setDisplayEffectType',
        'progress_total' => 'setProgressTotal',
        'reward_items' => 'setRewardItems',
        'icon' => 'setIcon'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'step_name' => 'getStepName',
        'display_effect_type' => 'getDisplayEffectType',
        'progress_total' => 'getProgressTotal',
        'reward_items' => 'getRewardItems',
        'icon' => 'getIcon'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['step_name'] = $data['step_name'] ?? null;
        $this->container['display_effect_type'] = $data['display_effect_type'] ?? null;
        $this->container['progress_total'] = $data['progress_total'] ?? null;
        $this->container['reward_items'] = $data['reward_items'] ?? null;
        $this->container['icon'] = $data['icon'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets step_name
     *
     * @return string|null
     */
    public function getStepName()
    {
        return $this->container['step_name'];
    }

    /**
     * Sets step_name
     *
     * @param string|null $step_name Very rarely, Progressions will have localized text describing the Level of the progression. This will be that localized text, if it exists. Otherwise, the standard appears to be to simply show the level numerically.
     *
     * @return self
     */
    public function setStepName($step_name)
    {
        $this->container['step_name'] = $step_name;

        return $this;
    }

    /**
     * Gets display_effect_type
     *
     * @return int|null
     */
    public function getDisplayEffectType()
    {
        return $this->container['display_effect_type'];
    }

    /**
     * Sets display_effect_type
     *
     * @param int|null $display_effect_type This appears to be, when you \"level up\", whether a visual effect will display and on what entity. See DestinyProgressionStepDisplayEffect for slightly more info.
     *
     * @return self
     */
    public function setDisplayEffectType($display_effect_type)
    {
        $this->container['display_effect_type'] = $display_effect_type;

        return $this;
    }

    /**
     * Gets progress_total
     *
     * @return int|null
     */
    public function getProgressTotal()
    {
        return $this->container['progress_total'];
    }

    /**
     * Sets progress_total
     *
     * @param int|null $progress_total The total amount of progression points/\"experience\" you will need to initially reach this step. If this is the last step and the progression is repeating indefinitely (DestinyProgressionDefinition.repeatLastStep), this will also be the progress needed to level it up further by repeating this step again.
     *
     * @return self
     */
    public function setProgressTotal($progress_total)
    {
        $this->container['progress_total'] = $progress_total;

        return $this;
    }

    /**
     * Gets reward_items
     *
     * @return \OpenAPI\Client\Model\DestinyDestinyItemQuantity[]|null
     */
    public function getRewardItems()
    {
        return $this->container['reward_items'];
    }

    /**
     * Sets reward_items
     *
     * @param \OpenAPI\Client\Model\DestinyDestinyItemQuantity[]|null $reward_items A listing of items rewarded as a result of reaching this level.
     *
     * @return self
     */
    public function setRewardItems($reward_items)
    {
        $this->container['reward_items'] = $reward_items;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string|null
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string|null $icon If this progression step has a specific icon related to it, this is the icon to show.
     *
     * @return self
     */
    public function setIcon($icon)
    {
        $this->container['icon'] = $icon;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


