<?php
/**
 * DestinyDefinitionsSocketsDestinySocketTypeDefinition
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyDefinitionsSocketsDestinySocketTypeDefinition Class Doc Comment
 *
 * @category Class
 * @description All Sockets have a \&quot;Type\&quot;: a set of common properties that determine when the socket allows Plugs to be inserted, what Categories of Plugs can be inserted, and whether the socket is even visible at all given the current game/character/account state.  See DestinyInventoryItemDefinition for more information about Socketed items and Plugs.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyDefinitionsSocketsDestinySocketTypeDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.Sockets.DestinySocketTypeDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'display_properties' => 'DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition',
        'insert_action' => 'DestinyDefinitionsSocketsDestinyInsertPlugActionDefinition',
        'plug_whitelist' => '\OpenAPI\Client\Model\DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition[]',
        'socket_category_hash' => 'int',
        'visibility' => 'int',
        'always_randomize_sockets' => 'bool',
        'is_preview_enabled' => 'bool',
        'hide_duplicate_reusable_plugs' => 'bool',
        'overrides_ui_appearance' => 'bool',
        'avoid_duplicates_on_initialization' => 'bool',
        'currency_scalars' => '\OpenAPI\Client\Model\DestinyDefinitionsSocketsDestinySocketTypeScalarMaterialRequirementEntry[]',
        'hash' => 'int',
        'index' => 'int',
        'redacted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'display_properties' => null,
        'insert_action' => null,
        'plug_whitelist' => null,
        'socket_category_hash' => 'uint32',
        'visibility' => 'int32',
        'always_randomize_sockets' => null,
        'is_preview_enabled' => null,
        'hide_duplicate_reusable_plugs' => null,
        'overrides_ui_appearance' => null,
        'avoid_duplicates_on_initialization' => null,
        'currency_scalars' => null,
        'hash' => 'uint32',
        'index' => 'int32',
        'redacted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_properties' => 'displayProperties',
        'insert_action' => 'insertAction',
        'plug_whitelist' => 'plugWhitelist',
        'socket_category_hash' => 'socketCategoryHash',
        'visibility' => 'visibility',
        'always_randomize_sockets' => 'alwaysRandomizeSockets',
        'is_preview_enabled' => 'isPreviewEnabled',
        'hide_duplicate_reusable_plugs' => 'hideDuplicateReusablePlugs',
        'overrides_ui_appearance' => 'overridesUiAppearance',
        'avoid_duplicates_on_initialization' => 'avoidDuplicatesOnInitialization',
        'currency_scalars' => 'currencyScalars',
        'hash' => 'hash',
        'index' => 'index',
        'redacted' => 'redacted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_properties' => 'setDisplayProperties',
        'insert_action' => 'setInsertAction',
        'plug_whitelist' => 'setPlugWhitelist',
        'socket_category_hash' => 'setSocketCategoryHash',
        'visibility' => 'setVisibility',
        'always_randomize_sockets' => 'setAlwaysRandomizeSockets',
        'is_preview_enabled' => 'setIsPreviewEnabled',
        'hide_duplicate_reusable_plugs' => 'setHideDuplicateReusablePlugs',
        'overrides_ui_appearance' => 'setOverridesUiAppearance',
        'avoid_duplicates_on_initialization' => 'setAvoidDuplicatesOnInitialization',
        'currency_scalars' => 'setCurrencyScalars',
        'hash' => 'setHash',
        'index' => 'setIndex',
        'redacted' => 'setRedacted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_properties' => 'getDisplayProperties',
        'insert_action' => 'getInsertAction',
        'plug_whitelist' => 'getPlugWhitelist',
        'socket_category_hash' => 'getSocketCategoryHash',
        'visibility' => 'getVisibility',
        'always_randomize_sockets' => 'getAlwaysRandomizeSockets',
        'is_preview_enabled' => 'getIsPreviewEnabled',
        'hide_duplicate_reusable_plugs' => 'getHideDuplicateReusablePlugs',
        'overrides_ui_appearance' => 'getOverridesUiAppearance',
        'avoid_duplicates_on_initialization' => 'getAvoidDuplicatesOnInitialization',
        'currency_scalars' => 'getCurrencyScalars',
        'hash' => 'getHash',
        'index' => 'getIndex',
        'redacted' => 'getRedacted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['display_properties'] = $data['display_properties'] ?? null;
        $this->container['insert_action'] = $data['insert_action'] ?? null;
        $this->container['plug_whitelist'] = $data['plug_whitelist'] ?? null;
        $this->container['socket_category_hash'] = $data['socket_category_hash'] ?? null;
        $this->container['visibility'] = $data['visibility'] ?? null;
        $this->container['always_randomize_sockets'] = $data['always_randomize_sockets'] ?? null;
        $this->container['is_preview_enabled'] = $data['is_preview_enabled'] ?? null;
        $this->container['hide_duplicate_reusable_plugs'] = $data['hide_duplicate_reusable_plugs'] ?? null;
        $this->container['overrides_ui_appearance'] = $data['overrides_ui_appearance'] ?? null;
        $this->container['avoid_duplicates_on_initialization'] = $data['avoid_duplicates_on_initialization'] ?? null;
        $this->container['currency_scalars'] = $data['currency_scalars'] ?? null;
        $this->container['hash'] = $data['hash'] ?? null;
        $this->container['index'] = $data['index'] ?? null;
        $this->container['redacted'] = $data['redacted'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets display_properties
     *
     * @return DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null
     */
    public function getDisplayProperties()
    {
        return $this->container['display_properties'];
    }

    /**
     * Sets display_properties
     *
     * @param DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null $display_properties There are fields for this display data, but they appear to be unpopulated as of now. I am not sure where in the UI these would show if they even were populated, but I will continue to return this data in case it becomes useful.
     *
     * @return self
     */
    public function setDisplayProperties($display_properties)
    {
        $this->container['display_properties'] = $display_properties;

        return $this;
    }

    /**
     * Gets insert_action
     *
     * @return DestinyDefinitionsSocketsDestinyInsertPlugActionDefinition|null
     */
    public function getInsertAction()
    {
        return $this->container['insert_action'];
    }

    /**
     * Sets insert_action
     *
     * @param DestinyDefinitionsSocketsDestinyInsertPlugActionDefinition|null $insert_action Defines what happens when a plug is inserted into sockets of this type.
     *
     * @return self
     */
    public function setInsertAction($insert_action)
    {
        $this->container['insert_action'] = $insert_action;

        return $this;
    }

    /**
     * Gets plug_whitelist
     *
     * @return \OpenAPI\Client\Model\DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition[]|null
     */
    public function getPlugWhitelist()
    {
        return $this->container['plug_whitelist'];
    }

    /**
     * Sets plug_whitelist
     *
     * @param \OpenAPI\Client\Model\DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition[]|null $plug_whitelist A list of Plug \"Categories\" that are allowed to be plugged into sockets of this type.  These should be compared against a given plug item's DestinyInventoryItemDefinition.plug.plugCategoryHash, which indicates the plug item's category.  If the plug's category matches any whitelisted plug, or if the whitelist is empty, it is allowed to be inserted.
     *
     * @return self
     */
    public function setPlugWhitelist($plug_whitelist)
    {
        $this->container['plug_whitelist'] = $plug_whitelist;

        return $this;
    }

    /**
     * Gets socket_category_hash
     *
     * @return int|null
     */
    public function getSocketCategoryHash()
    {
        return $this->container['socket_category_hash'];
    }

    /**
     * Sets socket_category_hash
     *
     * @param int|null $socket_category_hash socket_category_hash
     *
     * @return self
     */
    public function setSocketCategoryHash($socket_category_hash)
    {
        $this->container['socket_category_hash'] = $socket_category_hash;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return int|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param int|null $visibility Sometimes a socket isn't visible. These are some of the conditions under which sockets of this type are not visible. Unfortunately, the truth of visibility is much, much more complex. Best to rely on the live data for whether the socket is visible and enabled.
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets always_randomize_sockets
     *
     * @return bool|null
     */
    public function getAlwaysRandomizeSockets()
    {
        return $this->container['always_randomize_sockets'];
    }

    /**
     * Sets always_randomize_sockets
     *
     * @param bool|null $always_randomize_sockets always_randomize_sockets
     *
     * @return self
     */
    public function setAlwaysRandomizeSockets($always_randomize_sockets)
    {
        $this->container['always_randomize_sockets'] = $always_randomize_sockets;

        return $this;
    }

    /**
     * Gets is_preview_enabled
     *
     * @return bool|null
     */
    public function getIsPreviewEnabled()
    {
        return $this->container['is_preview_enabled'];
    }

    /**
     * Sets is_preview_enabled
     *
     * @param bool|null $is_preview_enabled is_preview_enabled
     *
     * @return self
     */
    public function setIsPreviewEnabled($is_preview_enabled)
    {
        $this->container['is_preview_enabled'] = $is_preview_enabled;

        return $this;
    }

    /**
     * Gets hide_duplicate_reusable_plugs
     *
     * @return bool|null
     */
    public function getHideDuplicateReusablePlugs()
    {
        return $this->container['hide_duplicate_reusable_plugs'];
    }

    /**
     * Sets hide_duplicate_reusable_plugs
     *
     * @param bool|null $hide_duplicate_reusable_plugs hide_duplicate_reusable_plugs
     *
     * @return self
     */
    public function setHideDuplicateReusablePlugs($hide_duplicate_reusable_plugs)
    {
        $this->container['hide_duplicate_reusable_plugs'] = $hide_duplicate_reusable_plugs;

        return $this;
    }

    /**
     * Gets overrides_ui_appearance
     *
     * @return bool|null
     */
    public function getOverridesUiAppearance()
    {
        return $this->container['overrides_ui_appearance'];
    }

    /**
     * Sets overrides_ui_appearance
     *
     * @param bool|null $overrides_ui_appearance This property indicates if the socket type determines whether Emblem icons and nameplates should be overridden by the inserted plug item's icon and nameplate.
     *
     * @return self
     */
    public function setOverridesUiAppearance($overrides_ui_appearance)
    {
        $this->container['overrides_ui_appearance'] = $overrides_ui_appearance;

        return $this;
    }

    /**
     * Gets avoid_duplicates_on_initialization
     *
     * @return bool|null
     */
    public function getAvoidDuplicatesOnInitialization()
    {
        return $this->container['avoid_duplicates_on_initialization'];
    }

    /**
     * Sets avoid_duplicates_on_initialization
     *
     * @param bool|null $avoid_duplicates_on_initialization avoid_duplicates_on_initialization
     *
     * @return self
     */
    public function setAvoidDuplicatesOnInitialization($avoid_duplicates_on_initialization)
    {
        $this->container['avoid_duplicates_on_initialization'] = $avoid_duplicates_on_initialization;

        return $this;
    }

    /**
     * Gets currency_scalars
     *
     * @return \OpenAPI\Client\Model\DestinyDefinitionsSocketsDestinySocketTypeScalarMaterialRequirementEntry[]|null
     */
    public function getCurrencyScalars()
    {
        return $this->container['currency_scalars'];
    }

    /**
     * Sets currency_scalars
     *
     * @param \OpenAPI\Client\Model\DestinyDefinitionsSocketsDestinySocketTypeScalarMaterialRequirementEntry[]|null $currency_scalars currency_scalars
     *
     * @return self
     */
    public function setCurrencyScalars($currency_scalars)
    {
        $this->container['currency_scalars'] = $currency_scalars;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return int|null
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param int|null $hash The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
     *
     * @return self
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int|null
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int|null $index The index of the entity as it was found in the investment tables.
     *
     * @return self
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets redacted
     *
     * @return bool|null
     */
    public function getRedacted()
    {
        return $this->container['redacted'];
    }

    /**
     * Sets redacted
     *
     * @param bool|null $redacted If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
     *
     * @return self
     */
    public function setRedacted($redacted)
    {
        $this->container['redacted'] = $redacted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


