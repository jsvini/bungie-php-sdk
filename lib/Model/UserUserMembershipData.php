<?php
/**
 * UserUserMembershipData
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UserUserMembershipData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class UserUserMembershipData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'User.UserMembershipData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'destiny_memberships' => '\OpenAPI\Client\Model\GroupsV2GroupUserInfoCard[]',
        'primary_membership_id' => 'int',
        'bungie_net_user' => '\OpenAPI\Client\Model\UserGeneralUser'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'destiny_memberships' => null,
        'primary_membership_id' => 'int64',
        'bungie_net_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'destiny_memberships' => 'destinyMemberships',
        'primary_membership_id' => 'primaryMembershipId',
        'bungie_net_user' => 'bungieNetUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'destiny_memberships' => 'setDestinyMemberships',
        'primary_membership_id' => 'setPrimaryMembershipId',
        'bungie_net_user' => 'setBungieNetUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'destiny_memberships' => 'getDestinyMemberships',
        'primary_membership_id' => 'getPrimaryMembershipId',
        'bungie_net_user' => 'getBungieNetUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['destiny_memberships'] = $data['destiny_memberships'] ?? null;
        $this->container['primary_membership_id'] = $data['primary_membership_id'] ?? null;
        $this->container['bungie_net_user'] = $data['bungie_net_user'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets destiny_memberships
     *
     * @return \OpenAPI\Client\Model\GroupsV2GroupUserInfoCard[]|null
     */
    public function getDestinyMemberships()
    {
        return $this->container['destiny_memberships'];
    }

    /**
     * Sets destiny_memberships
     *
     * @param \OpenAPI\Client\Model\GroupsV2GroupUserInfoCard[]|null $destiny_memberships this allows you to see destiny memberships that are visible and linked to this account (regardless of whether or not they have characters on the world server)
     *
     * @return self
     */
    public function setDestinyMemberships($destiny_memberships)
    {
        $this->container['destiny_memberships'] = $destiny_memberships;

        return $this;
    }

    /**
     * Gets primary_membership_id
     *
     * @return int|null
     */
    public function getPrimaryMembershipId()
    {
        return $this->container['primary_membership_id'];
    }

    /**
     * Sets primary_membership_id
     *
     * @param int|null $primary_membership_id If this property is populated, it will have the membership ID of the account considered to be \"primary\" in this user's cross save relationship.   If null, this user has no cross save relationship, nor primary account.
     *
     * @return self
     */
    public function setPrimaryMembershipId($primary_membership_id)
    {
        $this->container['primary_membership_id'] = $primary_membership_id;

        return $this;
    }

    /**
     * Gets bungie_net_user
     *
     * @return \OpenAPI\Client\Model\UserGeneralUser|null
     */
    public function getBungieNetUser()
    {
        return $this->container['bungie_net_user'];
    }

    /**
     * Sets bungie_net_user
     *
     * @param \OpenAPI\Client\Model\UserGeneralUser|null $bungie_net_user bungie_net_user
     *
     * @return self
     */
    public function setBungieNetUser($bungie_net_user)
    {
        $this->container['bungie_net_user'] = $bungie_net_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


