<?php
/**
 * DestinyResponsesDestinyProfileResponse
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyResponsesDestinyProfileResponse Class Doc Comment
 *
 * @category Class
 * @description The response for GetDestinyProfile, with components for character and item-level data.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyResponsesDestinyProfileResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Responses.DestinyProfileResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'vendor_receipts' => 'SingleComponentResponseOfDestinyVendorReceiptsComponent',
        'profile_inventory' => 'SingleComponentResponseOfDestinyInventoryComponent',
        'profile_currencies' => 'SingleComponentResponseOfDestinyInventoryComponent',
        'profile' => 'SingleComponentResponseOfDestinyProfileComponent',
        'platform_silver' => 'SingleComponentResponseOfDestinyPlatformSilverComponent',
        'profile_kiosks' => 'SingleComponentResponseOfDestinyKiosksComponent',
        'profile_plug_sets' => 'SingleComponentResponseOfDestinyPlugSetsComponent',
        'profile_progression' => 'SingleComponentResponseOfDestinyProfileProgressionComponent',
        'profile_presentation_nodes' => 'SingleComponentResponseOfDestinyPresentationNodesComponent',
        'profile_records' => 'SingleComponentResponseOfDestinyProfileRecordsComponent',
        'profile_collectibles' => 'SingleComponentResponseOfDestinyProfileCollectiblesComponent',
        'profile_transitory_data' => 'SingleComponentResponseOfDestinyProfileTransitoryComponent',
        'metrics' => 'SingleComponentResponseOfDestinyMetricsComponent',
        'characters' => 'DictionaryComponentResponseOfint64AndDestinyCharacterComponent',
        'character_inventories' => 'DictionaryComponentResponseOfint64AndDestinyInventoryComponent',
        'character_progressions' => 'DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent',
        'character_render_data' => 'DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent',
        'character_activities' => 'DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent',
        'character_equipment' => 'DictionaryComponentResponseOfint64AndDestinyInventoryComponent',
        'character_kiosks' => 'DictionaryComponentResponseOfint64AndDestinyKiosksComponent',
        'character_plug_sets' => 'DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent',
        'character_uninstanced_item_components' => 'map[string,\OpenAPI\Client\Model\DestinyBaseItemComponentSetOfuint32]',
        'character_presentation_nodes' => 'DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent',
        'character_records' => 'DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent',
        'character_collectibles' => 'DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent',
        'item_components' => 'DestinyItemComponentSetOfint64',
        'character_currency_lookups' => 'DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'vendor_receipts' => null,
        'profile_inventory' => null,
        'profile_currencies' => null,
        'profile' => null,
        'platform_silver' => null,
        'profile_kiosks' => null,
        'profile_plug_sets' => null,
        'profile_progression' => null,
        'profile_presentation_nodes' => null,
        'profile_records' => null,
        'profile_collectibles' => null,
        'profile_transitory_data' => null,
        'metrics' => null,
        'characters' => null,
        'character_inventories' => null,
        'character_progressions' => null,
        'character_render_data' => null,
        'character_activities' => null,
        'character_equipment' => null,
        'character_kiosks' => null,
        'character_plug_sets' => null,
        'character_uninstanced_item_components' => null,
        'character_presentation_nodes' => null,
        'character_records' => null,
        'character_collectibles' => null,
        'item_components' => null,
        'character_currency_lookups' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vendor_receipts' => 'vendorReceipts',
        'profile_inventory' => 'profileInventory',
        'profile_currencies' => 'profileCurrencies',
        'profile' => 'profile',
        'platform_silver' => 'platformSilver',
        'profile_kiosks' => 'profileKiosks',
        'profile_plug_sets' => 'profilePlugSets',
        'profile_progression' => 'profileProgression',
        'profile_presentation_nodes' => 'profilePresentationNodes',
        'profile_records' => 'profileRecords',
        'profile_collectibles' => 'profileCollectibles',
        'profile_transitory_data' => 'profileTransitoryData',
        'metrics' => 'metrics',
        'characters' => 'characters',
        'character_inventories' => 'characterInventories',
        'character_progressions' => 'characterProgressions',
        'character_render_data' => 'characterRenderData',
        'character_activities' => 'characterActivities',
        'character_equipment' => 'characterEquipment',
        'character_kiosks' => 'characterKiosks',
        'character_plug_sets' => 'characterPlugSets',
        'character_uninstanced_item_components' => 'characterUninstancedItemComponents',
        'character_presentation_nodes' => 'characterPresentationNodes',
        'character_records' => 'characterRecords',
        'character_collectibles' => 'characterCollectibles',
        'item_components' => 'itemComponents',
        'character_currency_lookups' => 'characterCurrencyLookups'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vendor_receipts' => 'setVendorReceipts',
        'profile_inventory' => 'setProfileInventory',
        'profile_currencies' => 'setProfileCurrencies',
        'profile' => 'setProfile',
        'platform_silver' => 'setPlatformSilver',
        'profile_kiosks' => 'setProfileKiosks',
        'profile_plug_sets' => 'setProfilePlugSets',
        'profile_progression' => 'setProfileProgression',
        'profile_presentation_nodes' => 'setProfilePresentationNodes',
        'profile_records' => 'setProfileRecords',
        'profile_collectibles' => 'setProfileCollectibles',
        'profile_transitory_data' => 'setProfileTransitoryData',
        'metrics' => 'setMetrics',
        'characters' => 'setCharacters',
        'character_inventories' => 'setCharacterInventories',
        'character_progressions' => 'setCharacterProgressions',
        'character_render_data' => 'setCharacterRenderData',
        'character_activities' => 'setCharacterActivities',
        'character_equipment' => 'setCharacterEquipment',
        'character_kiosks' => 'setCharacterKiosks',
        'character_plug_sets' => 'setCharacterPlugSets',
        'character_uninstanced_item_components' => 'setCharacterUninstancedItemComponents',
        'character_presentation_nodes' => 'setCharacterPresentationNodes',
        'character_records' => 'setCharacterRecords',
        'character_collectibles' => 'setCharacterCollectibles',
        'item_components' => 'setItemComponents',
        'character_currency_lookups' => 'setCharacterCurrencyLookups'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vendor_receipts' => 'getVendorReceipts',
        'profile_inventory' => 'getProfileInventory',
        'profile_currencies' => 'getProfileCurrencies',
        'profile' => 'getProfile',
        'platform_silver' => 'getPlatformSilver',
        'profile_kiosks' => 'getProfileKiosks',
        'profile_plug_sets' => 'getProfilePlugSets',
        'profile_progression' => 'getProfileProgression',
        'profile_presentation_nodes' => 'getProfilePresentationNodes',
        'profile_records' => 'getProfileRecords',
        'profile_collectibles' => 'getProfileCollectibles',
        'profile_transitory_data' => 'getProfileTransitoryData',
        'metrics' => 'getMetrics',
        'characters' => 'getCharacters',
        'character_inventories' => 'getCharacterInventories',
        'character_progressions' => 'getCharacterProgressions',
        'character_render_data' => 'getCharacterRenderData',
        'character_activities' => 'getCharacterActivities',
        'character_equipment' => 'getCharacterEquipment',
        'character_kiosks' => 'getCharacterKiosks',
        'character_plug_sets' => 'getCharacterPlugSets',
        'character_uninstanced_item_components' => 'getCharacterUninstancedItemComponents',
        'character_presentation_nodes' => 'getCharacterPresentationNodes',
        'character_records' => 'getCharacterRecords',
        'character_collectibles' => 'getCharacterCollectibles',
        'item_components' => 'getItemComponents',
        'character_currency_lookups' => 'getCharacterCurrencyLookups'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vendor_receipts'] = $data['vendor_receipts'] ?? null;
        $this->container['profile_inventory'] = $data['profile_inventory'] ?? null;
        $this->container['profile_currencies'] = $data['profile_currencies'] ?? null;
        $this->container['profile'] = $data['profile'] ?? null;
        $this->container['platform_silver'] = $data['platform_silver'] ?? null;
        $this->container['profile_kiosks'] = $data['profile_kiosks'] ?? null;
        $this->container['profile_plug_sets'] = $data['profile_plug_sets'] ?? null;
        $this->container['profile_progression'] = $data['profile_progression'] ?? null;
        $this->container['profile_presentation_nodes'] = $data['profile_presentation_nodes'] ?? null;
        $this->container['profile_records'] = $data['profile_records'] ?? null;
        $this->container['profile_collectibles'] = $data['profile_collectibles'] ?? null;
        $this->container['profile_transitory_data'] = $data['profile_transitory_data'] ?? null;
        $this->container['metrics'] = $data['metrics'] ?? null;
        $this->container['characters'] = $data['characters'] ?? null;
        $this->container['character_inventories'] = $data['character_inventories'] ?? null;
        $this->container['character_progressions'] = $data['character_progressions'] ?? null;
        $this->container['character_render_data'] = $data['character_render_data'] ?? null;
        $this->container['character_activities'] = $data['character_activities'] ?? null;
        $this->container['character_equipment'] = $data['character_equipment'] ?? null;
        $this->container['character_kiosks'] = $data['character_kiosks'] ?? null;
        $this->container['character_plug_sets'] = $data['character_plug_sets'] ?? null;
        $this->container['character_uninstanced_item_components'] = $data['character_uninstanced_item_components'] ?? null;
        $this->container['character_presentation_nodes'] = $data['character_presentation_nodes'] ?? null;
        $this->container['character_records'] = $data['character_records'] ?? null;
        $this->container['character_collectibles'] = $data['character_collectibles'] ?? null;
        $this->container['item_components'] = $data['item_components'] ?? null;
        $this->container['character_currency_lookups'] = $data['character_currency_lookups'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vendor_receipts
     *
     * @return SingleComponentResponseOfDestinyVendorReceiptsComponent|null
     */
    public function getVendorReceipts()
    {
        return $this->container['vendor_receipts'];
    }

    /**
     * Sets vendor_receipts
     *
     * @param SingleComponentResponseOfDestinyVendorReceiptsComponent|null $vendor_receipts Recent, refundable purchases you have made from vendors. When will you use it? Couldn't say...  COMPONENT TYPE: VendorReceipts
     *
     * @return self
     */
    public function setVendorReceipts($vendor_receipts)
    {
        $this->container['vendor_receipts'] = $vendor_receipts;

        return $this;
    }

    /**
     * Gets profile_inventory
     *
     * @return SingleComponentResponseOfDestinyInventoryComponent|null
     */
    public function getProfileInventory()
    {
        return $this->container['profile_inventory'];
    }

    /**
     * Sets profile_inventory
     *
     * @param SingleComponentResponseOfDestinyInventoryComponent|null $profile_inventory The profile-level inventory of the Destiny Profile.  COMPONENT TYPE: ProfileInventories
     *
     * @return self
     */
    public function setProfileInventory($profile_inventory)
    {
        $this->container['profile_inventory'] = $profile_inventory;

        return $this;
    }

    /**
     * Gets profile_currencies
     *
     * @return SingleComponentResponseOfDestinyInventoryComponent|null
     */
    public function getProfileCurrencies()
    {
        return $this->container['profile_currencies'];
    }

    /**
     * Sets profile_currencies
     *
     * @param SingleComponentResponseOfDestinyInventoryComponent|null $profile_currencies The profile-level currencies owned by the Destiny Profile.  COMPONENT TYPE: ProfileCurrencies
     *
     * @return self
     */
    public function setProfileCurrencies($profile_currencies)
    {
        $this->container['profile_currencies'] = $profile_currencies;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return SingleComponentResponseOfDestinyProfileComponent|null
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param SingleComponentResponseOfDestinyProfileComponent|null $profile The basic information about the Destiny Profile (formerly \"Account\").  COMPONENT TYPE: Profiles
     *
     * @return self
     */
    public function setProfile($profile)
    {
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets platform_silver
     *
     * @return SingleComponentResponseOfDestinyPlatformSilverComponent|null
     */
    public function getPlatformSilver()
    {
        return $this->container['platform_silver'];
    }

    /**
     * Sets platform_silver
     *
     * @param SingleComponentResponseOfDestinyPlatformSilverComponent|null $platform_silver Silver quantities for any platform on which this Profile plays destiny.   COMPONENT TYPE: PlatformSilver
     *
     * @return self
     */
    public function setPlatformSilver($platform_silver)
    {
        $this->container['platform_silver'] = $platform_silver;

        return $this;
    }

    /**
     * Gets profile_kiosks
     *
     * @return SingleComponentResponseOfDestinyKiosksComponent|null
     */
    public function getProfileKiosks()
    {
        return $this->container['profile_kiosks'];
    }

    /**
     * Sets profile_kiosks
     *
     * @param SingleComponentResponseOfDestinyKiosksComponent|null $profile_kiosks Items available from Kiosks that are available Profile-wide (i.e. across all characters)  This component returns information about what Kiosk items are available to you on a *Profile* level. It is theoretically possible for Kiosks to have items gated by specific Character as well. If you ever have those, you will find them on the characterKiosks property.  COMPONENT TYPE: Kiosks
     *
     * @return self
     */
    public function setProfileKiosks($profile_kiosks)
    {
        $this->container['profile_kiosks'] = $profile_kiosks;

        return $this;
    }

    /**
     * Gets profile_plug_sets
     *
     * @return SingleComponentResponseOfDestinyPlugSetsComponent|null
     */
    public function getProfilePlugSets()
    {
        return $this->container['profile_plug_sets'];
    }

    /**
     * Sets profile_plug_sets
     *
     * @param SingleComponentResponseOfDestinyPlugSetsComponent|null $profile_plug_sets When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states that are profile-scoped.  This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.  COMPONENT TYPE: ItemSockets
     *
     * @return self
     */
    public function setProfilePlugSets($profile_plug_sets)
    {
        $this->container['profile_plug_sets'] = $profile_plug_sets;

        return $this;
    }

    /**
     * Gets profile_progression
     *
     * @return SingleComponentResponseOfDestinyProfileProgressionComponent|null
     */
    public function getProfileProgression()
    {
        return $this->container['profile_progression'];
    }

    /**
     * Sets profile_progression
     *
     * @param SingleComponentResponseOfDestinyProfileProgressionComponent|null $profile_progression When we have progression information - such as Checklists - that may apply profile-wide, it will be returned here rather than in the per-character progression data.  COMPONENT TYPE: ProfileProgression
     *
     * @return self
     */
    public function setProfileProgression($profile_progression)
    {
        $this->container['profile_progression'] = $profile_progression;

        return $this;
    }

    /**
     * Gets profile_presentation_nodes
     *
     * @return SingleComponentResponseOfDestinyPresentationNodesComponent|null
     */
    public function getProfilePresentationNodes()
    {
        return $this->container['profile_presentation_nodes'];
    }

    /**
     * Sets profile_presentation_nodes
     *
     * @param SingleComponentResponseOfDestinyPresentationNodesComponent|null $profile_presentation_nodes COMPONENT TYPE: PresentationNodes
     *
     * @return self
     */
    public function setProfilePresentationNodes($profile_presentation_nodes)
    {
        $this->container['profile_presentation_nodes'] = $profile_presentation_nodes;

        return $this;
    }

    /**
     * Gets profile_records
     *
     * @return SingleComponentResponseOfDestinyProfileRecordsComponent|null
     */
    public function getProfileRecords()
    {
        return $this->container['profile_records'];
    }

    /**
     * Sets profile_records
     *
     * @param SingleComponentResponseOfDestinyProfileRecordsComponent|null $profile_records COMPONENT TYPE: Records
     *
     * @return self
     */
    public function setProfileRecords($profile_records)
    {
        $this->container['profile_records'] = $profile_records;

        return $this;
    }

    /**
     * Gets profile_collectibles
     *
     * @return SingleComponentResponseOfDestinyProfileCollectiblesComponent|null
     */
    public function getProfileCollectibles()
    {
        return $this->container['profile_collectibles'];
    }

    /**
     * Sets profile_collectibles
     *
     * @param SingleComponentResponseOfDestinyProfileCollectiblesComponent|null $profile_collectibles COMPONENT TYPE: Collectibles
     *
     * @return self
     */
    public function setProfileCollectibles($profile_collectibles)
    {
        $this->container['profile_collectibles'] = $profile_collectibles;

        return $this;
    }

    /**
     * Gets profile_transitory_data
     *
     * @return SingleComponentResponseOfDestinyProfileTransitoryComponent|null
     */
    public function getProfileTransitoryData()
    {
        return $this->container['profile_transitory_data'];
    }

    /**
     * Sets profile_transitory_data
     *
     * @param SingleComponentResponseOfDestinyProfileTransitoryComponent|null $profile_transitory_data COMPONENT TYPE: Transitory
     *
     * @return self
     */
    public function setProfileTransitoryData($profile_transitory_data)
    {
        $this->container['profile_transitory_data'] = $profile_transitory_data;

        return $this;
    }

    /**
     * Gets metrics
     *
     * @return SingleComponentResponseOfDestinyMetricsComponent|null
     */
    public function getMetrics()
    {
        return $this->container['metrics'];
    }

    /**
     * Sets metrics
     *
     * @param SingleComponentResponseOfDestinyMetricsComponent|null $metrics COMPONENT TYPE: Metrics
     *
     * @return self
     */
    public function setMetrics($metrics)
    {
        $this->container['metrics'] = $metrics;

        return $this;
    }

    /**
     * Gets characters
     *
     * @return DictionaryComponentResponseOfint64AndDestinyCharacterComponent|null
     */
    public function getCharacters()
    {
        return $this->container['characters'];
    }

    /**
     * Sets characters
     *
     * @param DictionaryComponentResponseOfint64AndDestinyCharacterComponent|null $characters Basic information about each character, keyed by the CharacterId.  COMPONENT TYPE: Characters
     *
     * @return self
     */
    public function setCharacters($characters)
    {
        $this->container['characters'] = $characters;

        return $this;
    }

    /**
     * Gets character_inventories
     *
     * @return DictionaryComponentResponseOfint64AndDestinyInventoryComponent|null
     */
    public function getCharacterInventories()
    {
        return $this->container['character_inventories'];
    }

    /**
     * Sets character_inventories
     *
     * @param DictionaryComponentResponseOfint64AndDestinyInventoryComponent|null $character_inventories The character-level non-equipped inventory items, keyed by the Character's Id.  COMPONENT TYPE: CharacterInventories
     *
     * @return self
     */
    public function setCharacterInventories($character_inventories)
    {
        $this->container['character_inventories'] = $character_inventories;

        return $this;
    }

    /**
     * Gets character_progressions
     *
     * @return DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent|null
     */
    public function getCharacterProgressions()
    {
        return $this->container['character_progressions'];
    }

    /**
     * Sets character_progressions
     *
     * @param DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent|null $character_progressions Character-level progression data, keyed by the Character's Id.  COMPONENT TYPE: CharacterProgressions
     *
     * @return self
     */
    public function setCharacterProgressions($character_progressions)
    {
        $this->container['character_progressions'] = $character_progressions;

        return $this;
    }

    /**
     * Gets character_render_data
     *
     * @return DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent|null
     */
    public function getCharacterRenderData()
    {
        return $this->container['character_render_data'];
    }

    /**
     * Sets character_render_data
     *
     * @param DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent|null $character_render_data Character rendering data - a minimal set of info needed to render a character in 3D - keyed by the Character's Id.  COMPONENT TYPE: CharacterRenderData
     *
     * @return self
     */
    public function setCharacterRenderData($character_render_data)
    {
        $this->container['character_render_data'] = $character_render_data;

        return $this;
    }

    /**
     * Gets character_activities
     *
     * @return DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent|null
     */
    public function getCharacterActivities()
    {
        return $this->container['character_activities'];
    }

    /**
     * Sets character_activities
     *
     * @param DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent|null $character_activities Character activity data - the activities available to this character and its status, keyed by the Character's Id.  COMPONENT TYPE: CharacterActivities
     *
     * @return self
     */
    public function setCharacterActivities($character_activities)
    {
        $this->container['character_activities'] = $character_activities;

        return $this;
    }

    /**
     * Gets character_equipment
     *
     * @return DictionaryComponentResponseOfint64AndDestinyInventoryComponent|null
     */
    public function getCharacterEquipment()
    {
        return $this->container['character_equipment'];
    }

    /**
     * Sets character_equipment
     *
     * @param DictionaryComponentResponseOfint64AndDestinyInventoryComponent|null $character_equipment The character's equipped items, keyed by the Character's Id.  COMPONENT TYPE: CharacterEquipment
     *
     * @return self
     */
    public function setCharacterEquipment($character_equipment)
    {
        $this->container['character_equipment'] = $character_equipment;

        return $this;
    }

    /**
     * Gets character_kiosks
     *
     * @return DictionaryComponentResponseOfint64AndDestinyKiosksComponent|null
     */
    public function getCharacterKiosks()
    {
        return $this->container['character_kiosks'];
    }

    /**
     * Sets character_kiosks
     *
     * @param DictionaryComponentResponseOfint64AndDestinyKiosksComponent|null $character_kiosks Items available from Kiosks that are available to a specific character as opposed to the account as a whole. It must be combined with data from the profileKiosks property to get a full picture of the character's available items to check out of a kiosk.  This component returns information about what Kiosk items are available to you on a *Character* level. Usually, kiosk items will be earned for the entire Profile (all characters) at once. To find those, look in the profileKiosks property.  COMPONENT TYPE: Kiosks
     *
     * @return self
     */
    public function setCharacterKiosks($character_kiosks)
    {
        $this->container['character_kiosks'] = $character_kiosks;

        return $this;
    }

    /**
     * Gets character_plug_sets
     *
     * @return DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent|null
     */
    public function getCharacterPlugSets()
    {
        return $this->container['character_plug_sets'];
    }

    /**
     * Sets character_plug_sets
     *
     * @param DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent|null $character_plug_sets When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states, per character, that are character-scoped.  This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.  COMPONENT TYPE: ItemSockets
     *
     * @return self
     */
    public function setCharacterPlugSets($character_plug_sets)
    {
        $this->container['character_plug_sets'] = $character_plug_sets;

        return $this;
    }

    /**
     * Gets character_uninstanced_item_components
     *
     * @return map[string,\OpenAPI\Client\Model\DestinyBaseItemComponentSetOfuint32]|null
     */
    public function getCharacterUninstancedItemComponents()
    {
        return $this->container['character_uninstanced_item_components'];
    }

    /**
     * Sets character_uninstanced_item_components
     *
     * @param map[string,\OpenAPI\Client\Model\DestinyBaseItemComponentSetOfuint32]|null $character_uninstanced_item_components Do you ever get the feeling that a system was designed *too* flexibly? That it can be used in so many different ways that you end up being unable to provide an easy to use abstraction for the mess that's happening under the surface?  Let's talk about character-specific data that might be related to items without instances. These two statements are totally unrelated, I promise.  At some point during D2, it was decided that items - such as Bounties - could be given to characters and *not* have instance data, but that *could* display and even use relevant state information on your account and character.  Up to now, any item that had meaningful dependencies on character or account state had to be instanced, and thus \"itemComponents\" was all that you needed: it was keyed by item's instance IDs and provided the stateful information you needed inside.  Unfortunately, we don't live in such a magical world anymore. This is information held on a per-character basis about non-instanced items that the characters have in their inventory - or that reference character-specific state information even if it's in Account-level inventory - and the values related to that item's state in relation to the given character.  To give a concrete example, look at a Moments of Triumph bounty. They exist in a character's inventory, and show/care about a character's progression toward completing the bounty. But the bounty itself is a non-instanced item, like a mod or a currency. This returns that data for the characters who have the bounty in their inventory.  I'm not crying, you're crying Okay we're both crying but it's going to be okay I promise Actually I shouldn't promise that, I don't know if it's going to be okay
     *
     * @return self
     */
    public function setCharacterUninstancedItemComponents($character_uninstanced_item_components)
    {
        $this->container['character_uninstanced_item_components'] = $character_uninstanced_item_components;

        return $this;
    }

    /**
     * Gets character_presentation_nodes
     *
     * @return DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent|null
     */
    public function getCharacterPresentationNodes()
    {
        return $this->container['character_presentation_nodes'];
    }

    /**
     * Sets character_presentation_nodes
     *
     * @param DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent|null $character_presentation_nodes COMPONENT TYPE: PresentationNodes
     *
     * @return self
     */
    public function setCharacterPresentationNodes($character_presentation_nodes)
    {
        $this->container['character_presentation_nodes'] = $character_presentation_nodes;

        return $this;
    }

    /**
     * Gets character_records
     *
     * @return DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent|null
     */
    public function getCharacterRecords()
    {
        return $this->container['character_records'];
    }

    /**
     * Sets character_records
     *
     * @param DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent|null $character_records COMPONENT TYPE: Records
     *
     * @return self
     */
    public function setCharacterRecords($character_records)
    {
        $this->container['character_records'] = $character_records;

        return $this;
    }

    /**
     * Gets character_collectibles
     *
     * @return DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent|null
     */
    public function getCharacterCollectibles()
    {
        return $this->container['character_collectibles'];
    }

    /**
     * Sets character_collectibles
     *
     * @param DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent|null $character_collectibles COMPONENT TYPE: Collectibles
     *
     * @return self
     */
    public function setCharacterCollectibles($character_collectibles)
    {
        $this->container['character_collectibles'] = $character_collectibles;

        return $this;
    }

    /**
     * Gets item_components
     *
     * @return DestinyItemComponentSetOfint64|null
     */
    public function getItemComponents()
    {
        return $this->container['item_components'];
    }

    /**
     * Sets item_components
     *
     * @param DestinyItemComponentSetOfint64|null $item_components Information about instanced items across all returned characters, keyed by the item's instance ID.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
     *
     * @return self
     */
    public function setItemComponents($item_components)
    {
        $this->container['item_components'] = $item_components;

        return $this;
    }

    /**
     * Gets character_currency_lookups
     *
     * @return DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent|null
     */
    public function getCharacterCurrencyLookups()
    {
        return $this->container['character_currency_lookups'];
    }

    /**
     * Sets character_currency_lookups
     *
     * @param DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent|null $character_currency_lookups A \"lookup\" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.  COMPONENT TYPE: CurrencyLookups
     *
     * @return self
     */
    public function setCharacterCurrencyLookups($character_currency_lookups)
    {
        $this->container['character_currency_lookups'] = $character_currency_lookups;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


