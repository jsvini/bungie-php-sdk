<?php
/**
 * GlobalAlert
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GlobalAlert Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class GlobalAlert implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GlobalAlert';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'alert_key' => 'string',
        'alert_html' => 'string',
        'alert_timestamp' => '\DateTime',
        'alert_link' => 'string',
        'alert_level' => 'int',
        'alert_type' => 'int',
        'stream_info' => '\OpenAPI\Client\Model\StreamInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'alert_key' => null,
        'alert_html' => null,
        'alert_timestamp' => 'date-time',
        'alert_link' => null,
        'alert_level' => 'int32',
        'alert_type' => 'int32',
        'stream_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alert_key' => 'AlertKey',
        'alert_html' => 'AlertHtml',
        'alert_timestamp' => 'AlertTimestamp',
        'alert_link' => 'AlertLink',
        'alert_level' => 'AlertLevel',
        'alert_type' => 'AlertType',
        'stream_info' => 'StreamInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alert_key' => 'setAlertKey',
        'alert_html' => 'setAlertHtml',
        'alert_timestamp' => 'setAlertTimestamp',
        'alert_link' => 'setAlertLink',
        'alert_level' => 'setAlertLevel',
        'alert_type' => 'setAlertType',
        'stream_info' => 'setStreamInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alert_key' => 'getAlertKey',
        'alert_html' => 'getAlertHtml',
        'alert_timestamp' => 'getAlertTimestamp',
        'alert_link' => 'getAlertLink',
        'alert_level' => 'getAlertLevel',
        'alert_type' => 'getAlertType',
        'stream_info' => 'getStreamInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alert_key'] = $data['alert_key'] ?? null;
        $this->container['alert_html'] = $data['alert_html'] ?? null;
        $this->container['alert_timestamp'] = $data['alert_timestamp'] ?? null;
        $this->container['alert_link'] = $data['alert_link'] ?? null;
        $this->container['alert_level'] = $data['alert_level'] ?? null;
        $this->container['alert_type'] = $data['alert_type'] ?? null;
        $this->container['stream_info'] = $data['stream_info'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alert_key
     *
     * @return string|null
     */
    public function getAlertKey()
    {
        return $this->container['alert_key'];
    }

    /**
     * Sets alert_key
     *
     * @param string|null $alert_key alert_key
     *
     * @return self
     */
    public function setAlertKey($alert_key)
    {
        $this->container['alert_key'] = $alert_key;

        return $this;
    }

    /**
     * Gets alert_html
     *
     * @return string|null
     */
    public function getAlertHtml()
    {
        return $this->container['alert_html'];
    }

    /**
     * Sets alert_html
     *
     * @param string|null $alert_html alert_html
     *
     * @return self
     */
    public function setAlertHtml($alert_html)
    {
        $this->container['alert_html'] = $alert_html;

        return $this;
    }

    /**
     * Gets alert_timestamp
     *
     * @return \DateTime|null
     */
    public function getAlertTimestamp()
    {
        return $this->container['alert_timestamp'];
    }

    /**
     * Sets alert_timestamp
     *
     * @param \DateTime|null $alert_timestamp alert_timestamp
     *
     * @return self
     */
    public function setAlertTimestamp($alert_timestamp)
    {
        $this->container['alert_timestamp'] = $alert_timestamp;

        return $this;
    }

    /**
     * Gets alert_link
     *
     * @return string|null
     */
    public function getAlertLink()
    {
        return $this->container['alert_link'];
    }

    /**
     * Sets alert_link
     *
     * @param string|null $alert_link alert_link
     *
     * @return self
     */
    public function setAlertLink($alert_link)
    {
        $this->container['alert_link'] = $alert_link;

        return $this;
    }

    /**
     * Gets alert_level
     *
     * @return int|null
     */
    public function getAlertLevel()
    {
        return $this->container['alert_level'];
    }

    /**
     * Sets alert_level
     *
     * @param int|null $alert_level alert_level
     *
     * @return self
     */
    public function setAlertLevel($alert_level)
    {
        $this->container['alert_level'] = $alert_level;

        return $this;
    }

    /**
     * Gets alert_type
     *
     * @return int|null
     */
    public function getAlertType()
    {
        return $this->container['alert_type'];
    }

    /**
     * Sets alert_type
     *
     * @param int|null $alert_type alert_type
     *
     * @return self
     */
    public function setAlertType($alert_type)
    {
        $this->container['alert_type'] = $alert_type;

        return $this;
    }

    /**
     * Gets stream_info
     *
     * @return \OpenAPI\Client\Model\StreamInfo|null
     */
    public function getStreamInfo()
    {
        return $this->container['stream_info'];
    }

    /**
     * Sets stream_info
     *
     * @param \OpenAPI\Client\Model\StreamInfo|null $stream_info stream_info
     *
     * @return self
     */
    public function setStreamInfo($stream_info)
    {
        $this->container['stream_info'] = $stream_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


