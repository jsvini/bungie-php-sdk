<?php
/**
 * DestinyDefinitionsDestinyItemInventoryBlockDefinition
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyDefinitionsDestinyItemInventoryBlockDefinition Class Doc Comment
 *
 * @category Class
 * @description If the item can exist in an inventory - the overwhelming majority of them can and do - then this is the basic properties regarding the item&#39;s relationship with the inventory.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyDefinitionsDestinyItemInventoryBlockDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.DestinyItemInventoryBlockDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'stack_unique_label' => 'string',
        'max_stack_size' => 'int',
        'bucket_type_hash' => 'int',
        'recovery_bucket_type_hash' => 'int',
        'tier_type_hash' => 'int',
        'is_instance_item' => 'bool',
        'tier_type_name' => 'string',
        'tier_type' => 'int',
        'expiration_tooltip' => 'string',
        'expired_in_activity_message' => 'string',
        'expired_in_orbit_message' => 'string',
        'suppress_expiration_when_objectives_complete' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'stack_unique_label' => null,
        'max_stack_size' => 'int32',
        'bucket_type_hash' => 'uint32',
        'recovery_bucket_type_hash' => 'uint32',
        'tier_type_hash' => 'uint32',
        'is_instance_item' => null,
        'tier_type_name' => null,
        'tier_type' => 'int32',
        'expiration_tooltip' => null,
        'expired_in_activity_message' => null,
        'expired_in_orbit_message' => null,
        'suppress_expiration_when_objectives_complete' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'stack_unique_label' => 'stackUniqueLabel',
        'max_stack_size' => 'maxStackSize',
        'bucket_type_hash' => 'bucketTypeHash',
        'recovery_bucket_type_hash' => 'recoveryBucketTypeHash',
        'tier_type_hash' => 'tierTypeHash',
        'is_instance_item' => 'isInstanceItem',
        'tier_type_name' => 'tierTypeName',
        'tier_type' => 'tierType',
        'expiration_tooltip' => 'expirationTooltip',
        'expired_in_activity_message' => 'expiredInActivityMessage',
        'expired_in_orbit_message' => 'expiredInOrbitMessage',
        'suppress_expiration_when_objectives_complete' => 'suppressExpirationWhenObjectivesComplete'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'stack_unique_label' => 'setStackUniqueLabel',
        'max_stack_size' => 'setMaxStackSize',
        'bucket_type_hash' => 'setBucketTypeHash',
        'recovery_bucket_type_hash' => 'setRecoveryBucketTypeHash',
        'tier_type_hash' => 'setTierTypeHash',
        'is_instance_item' => 'setIsInstanceItem',
        'tier_type_name' => 'setTierTypeName',
        'tier_type' => 'setTierType',
        'expiration_tooltip' => 'setExpirationTooltip',
        'expired_in_activity_message' => 'setExpiredInActivityMessage',
        'expired_in_orbit_message' => 'setExpiredInOrbitMessage',
        'suppress_expiration_when_objectives_complete' => 'setSuppressExpirationWhenObjectivesComplete'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'stack_unique_label' => 'getStackUniqueLabel',
        'max_stack_size' => 'getMaxStackSize',
        'bucket_type_hash' => 'getBucketTypeHash',
        'recovery_bucket_type_hash' => 'getRecoveryBucketTypeHash',
        'tier_type_hash' => 'getTierTypeHash',
        'is_instance_item' => 'getIsInstanceItem',
        'tier_type_name' => 'getTierTypeName',
        'tier_type' => 'getTierType',
        'expiration_tooltip' => 'getExpirationTooltip',
        'expired_in_activity_message' => 'getExpiredInActivityMessage',
        'expired_in_orbit_message' => 'getExpiredInOrbitMessage',
        'suppress_expiration_when_objectives_complete' => 'getSuppressExpirationWhenObjectivesComplete'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['stack_unique_label'] = $data['stack_unique_label'] ?? null;
        $this->container['max_stack_size'] = $data['max_stack_size'] ?? null;
        $this->container['bucket_type_hash'] = $data['bucket_type_hash'] ?? null;
        $this->container['recovery_bucket_type_hash'] = $data['recovery_bucket_type_hash'] ?? null;
        $this->container['tier_type_hash'] = $data['tier_type_hash'] ?? null;
        $this->container['is_instance_item'] = $data['is_instance_item'] ?? null;
        $this->container['tier_type_name'] = $data['tier_type_name'] ?? null;
        $this->container['tier_type'] = $data['tier_type'] ?? null;
        $this->container['expiration_tooltip'] = $data['expiration_tooltip'] ?? null;
        $this->container['expired_in_activity_message'] = $data['expired_in_activity_message'] ?? null;
        $this->container['expired_in_orbit_message'] = $data['expired_in_orbit_message'] ?? null;
        $this->container['suppress_expiration_when_objectives_complete'] = $data['suppress_expiration_when_objectives_complete'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets stack_unique_label
     *
     * @return string|null
     */
    public function getStackUniqueLabel()
    {
        return $this->container['stack_unique_label'];
    }

    /**
     * Sets stack_unique_label
     *
     * @param string|null $stack_unique_label If this string is populated, you can't have more than one stack with this label in a given inventory. Note that this is different from the equipping block's unique label, which is used for equipping uniqueness.
     *
     * @return self
     */
    public function setStackUniqueLabel($stack_unique_label)
    {
        $this->container['stack_unique_label'] = $stack_unique_label;

        return $this;
    }

    /**
     * Gets max_stack_size
     *
     * @return int|null
     */
    public function getMaxStackSize()
    {
        return $this->container['max_stack_size'];
    }

    /**
     * Sets max_stack_size
     *
     * @param int|null $max_stack_size The maximum quantity of this item that can exist in a stack.
     *
     * @return self
     */
    public function setMaxStackSize($max_stack_size)
    {
        $this->container['max_stack_size'] = $max_stack_size;

        return $this;
    }

    /**
     * Gets bucket_type_hash
     *
     * @return int|null
     */
    public function getBucketTypeHash()
    {
        return $this->container['bucket_type_hash'];
    }

    /**
     * Sets bucket_type_hash
     *
     * @param int|null $bucket_type_hash The hash identifier for the DestinyInventoryBucketDefinition to which this item belongs. I should have named this \"bucketHash\", but too many things refer to it now. Sigh.
     *
     * @return self
     */
    public function setBucketTypeHash($bucket_type_hash)
    {
        $this->container['bucket_type_hash'] = $bucket_type_hash;

        return $this;
    }

    /**
     * Gets recovery_bucket_type_hash
     *
     * @return int|null
     */
    public function getRecoveryBucketTypeHash()
    {
        return $this->container['recovery_bucket_type_hash'];
    }

    /**
     * Sets recovery_bucket_type_hash
     *
     * @param int|null $recovery_bucket_type_hash If the item is picked up by the lost loot queue, this is the hash identifier for the DestinyInventoryBucketDefinition into which it will be placed. Again, I should have named this recoveryBucketHash instead.
     *
     * @return self
     */
    public function setRecoveryBucketTypeHash($recovery_bucket_type_hash)
    {
        $this->container['recovery_bucket_type_hash'] = $recovery_bucket_type_hash;

        return $this;
    }

    /**
     * Gets tier_type_hash
     *
     * @return int|null
     */
    public function getTierTypeHash()
    {
        return $this->container['tier_type_hash'];
    }

    /**
     * Sets tier_type_hash
     *
     * @param int|null $tier_type_hash The hash identifier for the Tier Type of the item, use to look up its DestinyItemTierTypeDefinition if you need to show localized data for the item's tier.
     *
     * @return self
     */
    public function setTierTypeHash($tier_type_hash)
    {
        $this->container['tier_type_hash'] = $tier_type_hash;

        return $this;
    }

    /**
     * Gets is_instance_item
     *
     * @return bool|null
     */
    public function getIsInstanceItem()
    {
        return $this->container['is_instance_item'];
    }

    /**
     * Sets is_instance_item
     *
     * @param bool|null $is_instance_item If TRUE, this item is instanced. Otherwise, it is a generic item that merely has a quantity in a stack (like Glimmer).
     *
     * @return self
     */
    public function setIsInstanceItem($is_instance_item)
    {
        $this->container['is_instance_item'] = $is_instance_item;

        return $this;
    }

    /**
     * Gets tier_type_name
     *
     * @return string|null
     */
    public function getTierTypeName()
    {
        return $this->container['tier_type_name'];
    }

    /**
     * Sets tier_type_name
     *
     * @param string|null $tier_type_name The localized name of the tier type, which is a useful shortcut so you don't have to look up the definition every time. However, it's mostly a holdover from days before we had a DestinyItemTierTypeDefinition to refer to.
     *
     * @return self
     */
    public function setTierTypeName($tier_type_name)
    {
        $this->container['tier_type_name'] = $tier_type_name;

        return $this;
    }

    /**
     * Gets tier_type
     *
     * @return int|null
     */
    public function getTierType()
    {
        return $this->container['tier_type'];
    }

    /**
     * Sets tier_type
     *
     * @param int|null $tier_type The enumeration matching the tier type of the item to known values, again for convenience sake.
     *
     * @return self
     */
    public function setTierType($tier_type)
    {
        $this->container['tier_type'] = $tier_type;

        return $this;
    }

    /**
     * Gets expiration_tooltip
     *
     * @return string|null
     */
    public function getExpirationTooltip()
    {
        return $this->container['expiration_tooltip'];
    }

    /**
     * Sets expiration_tooltip
     *
     * @param string|null $expiration_tooltip The tooltip message to show, if any, when the item expires.
     *
     * @return self
     */
    public function setExpirationTooltip($expiration_tooltip)
    {
        $this->container['expiration_tooltip'] = $expiration_tooltip;

        return $this;
    }

    /**
     * Gets expired_in_activity_message
     *
     * @return string|null
     */
    public function getExpiredInActivityMessage()
    {
        return $this->container['expired_in_activity_message'];
    }

    /**
     * Sets expired_in_activity_message
     *
     * @param string|null $expired_in_activity_message If the item expires while playing in an activity, we show a different message.
     *
     * @return self
     */
    public function setExpiredInActivityMessage($expired_in_activity_message)
    {
        $this->container['expired_in_activity_message'] = $expired_in_activity_message;

        return $this;
    }

    /**
     * Gets expired_in_orbit_message
     *
     * @return string|null
     */
    public function getExpiredInOrbitMessage()
    {
        return $this->container['expired_in_orbit_message'];
    }

    /**
     * Sets expired_in_orbit_message
     *
     * @param string|null $expired_in_orbit_message If the item expires in orbit, we show a... more different message. (\"Consummate V's, consummate!\")
     *
     * @return self
     */
    public function setExpiredInOrbitMessage($expired_in_orbit_message)
    {
        $this->container['expired_in_orbit_message'] = $expired_in_orbit_message;

        return $this;
    }

    /**
     * Gets suppress_expiration_when_objectives_complete
     *
     * @return bool|null
     */
    public function getSuppressExpirationWhenObjectivesComplete()
    {
        return $this->container['suppress_expiration_when_objectives_complete'];
    }

    /**
     * Sets suppress_expiration_when_objectives_complete
     *
     * @param bool|null $suppress_expiration_when_objectives_complete suppress_expiration_when_objectives_complete
     *
     * @return self
     */
    public function setSuppressExpirationWhenObjectivesComplete($suppress_expiration_when_objectives_complete)
    {
        $this->container['suppress_expiration_when_objectives_complete'] = $suppress_expiration_when_objectives_complete;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


