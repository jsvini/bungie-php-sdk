<?php
/**
 * DestinyDestinyTalentNode
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyDestinyTalentNode Class Doc Comment
 *
 * @category Class
 * @description I see you&#39;ve come to find out more about Talent Nodes. I&#39;m so sorry. Talent Nodes are the conceptual, visual nodes that appear on Talent Grids. Talent Grids, in Destiny 1, were found on almost every instanced item: they had Nodes that could be activated to change the properties of the item. In Destiny 2, Talent Grids only exist for Builds/Subclasses, and while the basic concept is the same (Nodes can be activated once you&#39;ve gained sufficient Experience on the Item, and provide effects), there are some new concepts from Destiny 1. Examine DestinyTalentGridDefinition and its subordinates for more information. This is the \&quot;Live\&quot; information for the current status of a Talent Node on a specific item. Talent Nodes have many Steps, but only one can be active at any one time: and it is the Step that determines both the visual and the game state-changing properties that the Node provides. Examine this and DestinyTalentNodeStepDefinition carefully. *IMPORTANT NOTE* Talent Nodes are, unfortunately, Content Version DEPENDENT. Though they refer to hashes for Nodes and Steps, those hashes are not guaranteed to be immutable across content versions. This is a source of great exasperation for me, but as a result anyone using Talent Grid data must ensure that the content version of their static content matches that of the server responses before showing or making decisions based on talent grid data.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyDestinyTalentNode implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.DestinyTalentNode';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'node_index' => 'int',
        'node_hash' => 'int',
        'state' => 'int',
        'is_activated' => 'bool',
        'step_index' => 'int',
        'materials_to_upgrade' => '\OpenAPI\Client\Model\DestinyDefinitionsDestinyMaterialRequirement[]',
        'activation_grid_level' => 'int',
        'progress_percent' => 'float',
        'hidden' => 'bool',
        'node_stats_block' => 'DestinyDestinyTalentNodeStatBlock'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'node_index' => 'int32',
        'node_hash' => 'uint32',
        'state' => 'int32',
        'is_activated' => null,
        'step_index' => 'int32',
        'materials_to_upgrade' => null,
        'activation_grid_level' => 'int32',
        'progress_percent' => 'float',
        'hidden' => null,
        'node_stats_block' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'node_index' => 'nodeIndex',
        'node_hash' => 'nodeHash',
        'state' => 'state',
        'is_activated' => 'isActivated',
        'step_index' => 'stepIndex',
        'materials_to_upgrade' => 'materialsToUpgrade',
        'activation_grid_level' => 'activationGridLevel',
        'progress_percent' => 'progressPercent',
        'hidden' => 'hidden',
        'node_stats_block' => 'nodeStatsBlock'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'node_index' => 'setNodeIndex',
        'node_hash' => 'setNodeHash',
        'state' => 'setState',
        'is_activated' => 'setIsActivated',
        'step_index' => 'setStepIndex',
        'materials_to_upgrade' => 'setMaterialsToUpgrade',
        'activation_grid_level' => 'setActivationGridLevel',
        'progress_percent' => 'setProgressPercent',
        'hidden' => 'setHidden',
        'node_stats_block' => 'setNodeStatsBlock'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'node_index' => 'getNodeIndex',
        'node_hash' => 'getNodeHash',
        'state' => 'getState',
        'is_activated' => 'getIsActivated',
        'step_index' => 'getStepIndex',
        'materials_to_upgrade' => 'getMaterialsToUpgrade',
        'activation_grid_level' => 'getActivationGridLevel',
        'progress_percent' => 'getProgressPercent',
        'hidden' => 'getHidden',
        'node_stats_block' => 'getNodeStatsBlock'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['node_index'] = $data['node_index'] ?? null;
        $this->container['node_hash'] = $data['node_hash'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['is_activated'] = $data['is_activated'] ?? null;
        $this->container['step_index'] = $data['step_index'] ?? null;
        $this->container['materials_to_upgrade'] = $data['materials_to_upgrade'] ?? null;
        $this->container['activation_grid_level'] = $data['activation_grid_level'] ?? null;
        $this->container['progress_percent'] = $data['progress_percent'] ?? null;
        $this->container['hidden'] = $data['hidden'] ?? null;
        $this->container['node_stats_block'] = $data['node_stats_block'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets node_index
     *
     * @return int|null
     */
    public function getNodeIndex()
    {
        return $this->container['node_index'];
    }

    /**
     * Sets node_index
     *
     * @param int|null $node_index The index of the Talent Node being referred to (an index into DestinyTalentGridDefinition.nodes[]). CONTENT VERSION DEPENDENT.
     *
     * @return self
     */
    public function setNodeIndex($node_index)
    {
        $this->container['node_index'] = $node_index;

        return $this;
    }

    /**
     * Gets node_hash
     *
     * @return int|null
     */
    public function getNodeHash()
    {
        return $this->container['node_hash'];
    }

    /**
     * Sets node_hash
     *
     * @param int|null $node_hash The hash of the Talent Node being referred to (in DestinyTalentGridDefinition.nodes). Deceptively CONTENT VERSION DEPENDENT. We have no guarantee of the hash's immutability between content versions.
     *
     * @return self
     */
    public function setNodeHash($node_hash)
    {
        $this->container['node_hash'] = $node_hash;

        return $this;
    }

    /**
     * Gets state
     *
     * @return int|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param int|null $state An DestinyTalentNodeState enum value indicating the node's state: whether it can be activated or swapped, and why not if neither can be performed.
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets is_activated
     *
     * @return bool|null
     */
    public function getIsActivated()
    {
        return $this->container['is_activated'];
    }

    /**
     * Sets is_activated
     *
     * @param bool|null $is_activated If true, the node is activated: it's current step then provides its benefits.
     *
     * @return self
     */
    public function setIsActivated($is_activated)
    {
        $this->container['is_activated'] = $is_activated;

        return $this;
    }

    /**
     * Gets step_index
     *
     * @return int|null
     */
    public function getStepIndex()
    {
        return $this->container['step_index'];
    }

    /**
     * Sets step_index
     *
     * @param int|null $step_index The currently relevant Step for the node. It is this step that has rendering data for the node and the benefits that are provided if the node is activated. (the actual rules for benefits provided are extremely complicated in theory, but with how Talent Grids are being used in Destiny 2 you don't have to worry about a lot of those old Destiny 1 rules.) This is an index into: DestinyTalentGridDefinition.nodes[nodeIndex].steps[stepIndex]
     *
     * @return self
     */
    public function setStepIndex($step_index)
    {
        $this->container['step_index'] = $step_index;

        return $this;
    }

    /**
     * Gets materials_to_upgrade
     *
     * @return \OpenAPI\Client\Model\DestinyDefinitionsDestinyMaterialRequirement[]|null
     */
    public function getMaterialsToUpgrade()
    {
        return $this->container['materials_to_upgrade'];
    }

    /**
     * Sets materials_to_upgrade
     *
     * @param \OpenAPI\Client\Model\DestinyDefinitionsDestinyMaterialRequirement[]|null $materials_to_upgrade If the node has material requirements to be activated, this is the list of those requirements.
     *
     * @return self
     */
    public function setMaterialsToUpgrade($materials_to_upgrade)
    {
        $this->container['materials_to_upgrade'] = $materials_to_upgrade;

        return $this;
    }

    /**
     * Gets activation_grid_level
     *
     * @return int|null
     */
    public function getActivationGridLevel()
    {
        return $this->container['activation_grid_level'];
    }

    /**
     * Sets activation_grid_level
     *
     * @param int|null $activation_grid_level The progression level required on the Talent Grid in order to be able to activate this talent node. Talent Grids have their own Progression - similar to Character Level, but in this case it is experience related to the item itself.
     *
     * @return self
     */
    public function setActivationGridLevel($activation_grid_level)
    {
        $this->container['activation_grid_level'] = $activation_grid_level;

        return $this;
    }

    /**
     * Gets progress_percent
     *
     * @return float|null
     */
    public function getProgressPercent()
    {
        return $this->container['progress_percent'];
    }

    /**
     * Sets progress_percent
     *
     * @param float|null $progress_percent If you want to show a progress bar or circle for how close this talent node is to being activate-able, this is the percentage to show. It follows the node's underlying rules about when the progress bar should first show up, and when it should be filled.
     *
     * @return self
     */
    public function setProgressPercent($progress_percent)
    {
        $this->container['progress_percent'] = $progress_percent;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool|null
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool|null $hidden Whether or not the talent node is actually visible in the game's UI. Whether you want to show it in your own UI is up to you! I'm not gonna tell you who to sock it to.
     *
     * @return self
     */
    public function setHidden($hidden)
    {
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets node_stats_block
     *
     * @return DestinyDestinyTalentNodeStatBlock|null
     */
    public function getNodeStatsBlock()
    {
        return $this->container['node_stats_block'];
    }

    /**
     * Sets node_stats_block
     *
     * @param DestinyDestinyTalentNodeStatBlock|null $node_stats_block This property has some history. A talent grid can provide stats on both the item it's related to and the character equipping the item. This returns data about those stat bonuses.
     *
     * @return self
     */
    public function setNodeStatsBlock($node_stats_block)
    {
        $this->container['node_stats_block'] = $node_stats_block;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


