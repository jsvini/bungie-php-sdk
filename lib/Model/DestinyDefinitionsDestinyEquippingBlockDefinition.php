<?php
/**
 * DestinyDefinitionsDestinyEquippingBlockDefinition
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyDefinitionsDestinyEquippingBlockDefinition Class Doc Comment
 *
 * @category Class
 * @description Items that can be equipped define this block. It contains information we need to understand how and when the item can be equipped.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyDefinitionsDestinyEquippingBlockDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.DestinyEquippingBlockDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'gearset_item_hash' => 'int',
        'unique_label' => 'string',
        'unique_label_hash' => 'int',
        'equipment_slot_type_hash' => 'int',
        'attributes' => 'int',
        'ammo_type' => 'int',
        'display_strings' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'gearset_item_hash' => 'uint32',
        'unique_label' => null,
        'unique_label_hash' => 'uint32',
        'equipment_slot_type_hash' => 'uint32',
        'attributes' => 'int32',
        'ammo_type' => 'int32',
        'display_strings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gearset_item_hash' => 'gearsetItemHash',
        'unique_label' => 'uniqueLabel',
        'unique_label_hash' => 'uniqueLabelHash',
        'equipment_slot_type_hash' => 'equipmentSlotTypeHash',
        'attributes' => 'attributes',
        'ammo_type' => 'ammoType',
        'display_strings' => 'displayStrings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gearset_item_hash' => 'setGearsetItemHash',
        'unique_label' => 'setUniqueLabel',
        'unique_label_hash' => 'setUniqueLabelHash',
        'equipment_slot_type_hash' => 'setEquipmentSlotTypeHash',
        'attributes' => 'setAttributes',
        'ammo_type' => 'setAmmoType',
        'display_strings' => 'setDisplayStrings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gearset_item_hash' => 'getGearsetItemHash',
        'unique_label' => 'getUniqueLabel',
        'unique_label_hash' => 'getUniqueLabelHash',
        'equipment_slot_type_hash' => 'getEquipmentSlotTypeHash',
        'attributes' => 'getAttributes',
        'ammo_type' => 'getAmmoType',
        'display_strings' => 'getDisplayStrings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gearset_item_hash'] = $data['gearset_item_hash'] ?? null;
        $this->container['unique_label'] = $data['unique_label'] ?? null;
        $this->container['unique_label_hash'] = $data['unique_label_hash'] ?? null;
        $this->container['equipment_slot_type_hash'] = $data['equipment_slot_type_hash'] ?? null;
        $this->container['attributes'] = $data['attributes'] ?? null;
        $this->container['ammo_type'] = $data['ammo_type'] ?? null;
        $this->container['display_strings'] = $data['display_strings'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gearset_item_hash
     *
     * @return int|null
     */
    public function getGearsetItemHash()
    {
        return $this->container['gearset_item_hash'];
    }

    /**
     * Sets gearset_item_hash
     *
     * @param int|null $gearset_item_hash If the item is part of a gearset, this is a reference to that gearset item.
     *
     * @return self
     */
    public function setGearsetItemHash($gearset_item_hash)
    {
        $this->container['gearset_item_hash'] = $gearset_item_hash;

        return $this;
    }

    /**
     * Gets unique_label
     *
     * @return string|null
     */
    public function getUniqueLabel()
    {
        return $this->container['unique_label'];
    }

    /**
     * Sets unique_label
     *
     * @param string|null $unique_label If defined, this is the label used to check if the item has other items of matching types already equipped.   For instance, when you aren't allowed to equip more than one Exotic Weapon, that's because all exotic weapons have identical uniqueLabels and the game checks the to-be-equipped item's uniqueLabel vs. all other already equipped items (other than the item in the slot that's about to be occupied).
     *
     * @return self
     */
    public function setUniqueLabel($unique_label)
    {
        $this->container['unique_label'] = $unique_label;

        return $this;
    }

    /**
     * Gets unique_label_hash
     *
     * @return int|null
     */
    public function getUniqueLabelHash()
    {
        return $this->container['unique_label_hash'];
    }

    /**
     * Sets unique_label_hash
     *
     * @param int|null $unique_label_hash The hash of that unique label. Does not point to a specific definition.
     *
     * @return self
     */
    public function setUniqueLabelHash($unique_label_hash)
    {
        $this->container['unique_label_hash'] = $unique_label_hash;

        return $this;
    }

    /**
     * Gets equipment_slot_type_hash
     *
     * @return int|null
     */
    public function getEquipmentSlotTypeHash()
    {
        return $this->container['equipment_slot_type_hash'];
    }

    /**
     * Sets equipment_slot_type_hash
     *
     * @param int|null $equipment_slot_type_hash An equipped item *must* be equipped in an Equipment Slot. This is the hash identifier of the DestinyEquipmentSlotDefinition into which it must be equipped.
     *
     * @return self
     */
    public function setEquipmentSlotTypeHash($equipment_slot_type_hash)
    {
        $this->container['equipment_slot_type_hash'] = $equipment_slot_type_hash;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return int|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param int|null $attributes These are custom attributes on the equippability of the item.  For now, this can only be \"equip on acquire\", which would mean that the item will be automatically equipped as soon as you pick it up.
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets ammo_type
     *
     * @return int|null
     */
    public function getAmmoType()
    {
        return $this->container['ammo_type'];
    }

    /**
     * Sets ammo_type
     *
     * @param int|null $ammo_type Ammo type used by a weapon is no longer determined by the bucket in which it is contained. If the item has an ammo type - i.e. if it is a weapon - this will be the type of ammunition expected.
     *
     * @return self
     */
    public function setAmmoType($ammo_type)
    {
        $this->container['ammo_type'] = $ammo_type;

        return $this;
    }

    /**
     * Gets display_strings
     *
     * @return string[]|null
     */
    public function getDisplayStrings()
    {
        return $this->container['display_strings'];
    }

    /**
     * Sets display_strings
     *
     * @param string[]|null $display_strings These are strings that represent the possible Game/Account/Character state failure conditions that can occur when trying to equip the item. They match up one-to-one with requiredUnlockExpressions.
     *
     * @return self
     */
    public function setDisplayStrings($display_strings)
    {
        $this->container['display_strings'] = $display_strings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


