<?php
/**
 * DestinyDefinitionsDestinyTalentNodeStepGroups
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyDefinitionsDestinyTalentNodeStepGroups Class Doc Comment
 *
 * @category Class
 * @description These properties are an attempt to categorize talent node steps by certain common properties. See the related enumerations for the type of properties being categorized.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyDefinitionsDestinyTalentNodeStepGroups implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.DestinyTalentNodeStepGroups';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'weapon_performance' => 'int',
        'impact_effects' => 'int',
        'guardian_attributes' => 'int',
        'light_abilities' => 'int',
        'damage_types' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'weapon_performance' => 'int32',
        'impact_effects' => 'int32',
        'guardian_attributes' => 'int32',
        'light_abilities' => 'int32',
        'damage_types' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'weapon_performance' => 'weaponPerformance',
        'impact_effects' => 'impactEffects',
        'guardian_attributes' => 'guardianAttributes',
        'light_abilities' => 'lightAbilities',
        'damage_types' => 'damageTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'weapon_performance' => 'setWeaponPerformance',
        'impact_effects' => 'setImpactEffects',
        'guardian_attributes' => 'setGuardianAttributes',
        'light_abilities' => 'setLightAbilities',
        'damage_types' => 'setDamageTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'weapon_performance' => 'getWeaponPerformance',
        'impact_effects' => 'getImpactEffects',
        'guardian_attributes' => 'getGuardianAttributes',
        'light_abilities' => 'getLightAbilities',
        'damage_types' => 'getDamageTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['weapon_performance'] = $data['weapon_performance'] ?? null;
        $this->container['impact_effects'] = $data['impact_effects'] ?? null;
        $this->container['guardian_attributes'] = $data['guardian_attributes'] ?? null;
        $this->container['light_abilities'] = $data['light_abilities'] ?? null;
        $this->container['damage_types'] = $data['damage_types'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets weapon_performance
     *
     * @return int|null
     */
    public function getWeaponPerformance()
    {
        return $this->container['weapon_performance'];
    }

    /**
     * Sets weapon_performance
     *
     * @param int|null $weapon_performance weapon_performance
     *
     * @return self
     */
    public function setWeaponPerformance($weapon_performance)
    {
        $this->container['weapon_performance'] = $weapon_performance;

        return $this;
    }

    /**
     * Gets impact_effects
     *
     * @return int|null
     */
    public function getImpactEffects()
    {
        return $this->container['impact_effects'];
    }

    /**
     * Sets impact_effects
     *
     * @param int|null $impact_effects impact_effects
     *
     * @return self
     */
    public function setImpactEffects($impact_effects)
    {
        $this->container['impact_effects'] = $impact_effects;

        return $this;
    }

    /**
     * Gets guardian_attributes
     *
     * @return int|null
     */
    public function getGuardianAttributes()
    {
        return $this->container['guardian_attributes'];
    }

    /**
     * Sets guardian_attributes
     *
     * @param int|null $guardian_attributes guardian_attributes
     *
     * @return self
     */
    public function setGuardianAttributes($guardian_attributes)
    {
        $this->container['guardian_attributes'] = $guardian_attributes;

        return $this;
    }

    /**
     * Gets light_abilities
     *
     * @return int|null
     */
    public function getLightAbilities()
    {
        return $this->container['light_abilities'];
    }

    /**
     * Sets light_abilities
     *
     * @param int|null $light_abilities light_abilities
     *
     * @return self
     */
    public function setLightAbilities($light_abilities)
    {
        $this->container['light_abilities'] = $light_abilities;

        return $this;
    }

    /**
     * Gets damage_types
     *
     * @return int|null
     */
    public function getDamageTypes()
    {
        return $this->container['damage_types'];
    }

    /**
     * Sets damage_types
     *
     * @param int|null $damage_types damage_types
     *
     * @return self
     */
    public function setDamageTypes($damage_types)
    {
        $this->container['damage_types'] = $damage_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


