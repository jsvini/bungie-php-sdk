<?php
/**
 * DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.DestinyVendorDisplayPropertiesDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'large_icon' => 'string',
        'subtitle' => 'string',
        'original_icon' => 'string',
        'requirements_display' => '\OpenAPI\Client\Model\DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition[]',
        'small_transparent_icon' => 'string',
        'map_icon' => 'string',
        'large_transparent_icon' => 'string',
        'description' => 'string',
        'name' => 'string',
        'icon' => 'string',
        'icon_sequences' => '\OpenAPI\Client\Model\DestinyDefinitionsCommonDestinyIconSequenceDefinition[]',
        'high_res_icon' => 'string',
        'has_icon' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'large_icon' => null,
        'subtitle' => null,
        'original_icon' => null,
        'requirements_display' => null,
        'small_transparent_icon' => null,
        'map_icon' => null,
        'large_transparent_icon' => null,
        'description' => null,
        'name' => null,
        'icon' => null,
        'icon_sequences' => null,
        'high_res_icon' => null,
        'has_icon' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'large_icon' => 'largeIcon',
        'subtitle' => 'subtitle',
        'original_icon' => 'originalIcon',
        'requirements_display' => 'requirementsDisplay',
        'small_transparent_icon' => 'smallTransparentIcon',
        'map_icon' => 'mapIcon',
        'large_transparent_icon' => 'largeTransparentIcon',
        'description' => 'description',
        'name' => 'name',
        'icon' => 'icon',
        'icon_sequences' => 'iconSequences',
        'high_res_icon' => 'highResIcon',
        'has_icon' => 'hasIcon'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'large_icon' => 'setLargeIcon',
        'subtitle' => 'setSubtitle',
        'original_icon' => 'setOriginalIcon',
        'requirements_display' => 'setRequirementsDisplay',
        'small_transparent_icon' => 'setSmallTransparentIcon',
        'map_icon' => 'setMapIcon',
        'large_transparent_icon' => 'setLargeTransparentIcon',
        'description' => 'setDescription',
        'name' => 'setName',
        'icon' => 'setIcon',
        'icon_sequences' => 'setIconSequences',
        'high_res_icon' => 'setHighResIcon',
        'has_icon' => 'setHasIcon'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'large_icon' => 'getLargeIcon',
        'subtitle' => 'getSubtitle',
        'original_icon' => 'getOriginalIcon',
        'requirements_display' => 'getRequirementsDisplay',
        'small_transparent_icon' => 'getSmallTransparentIcon',
        'map_icon' => 'getMapIcon',
        'large_transparent_icon' => 'getLargeTransparentIcon',
        'description' => 'getDescription',
        'name' => 'getName',
        'icon' => 'getIcon',
        'icon_sequences' => 'getIconSequences',
        'high_res_icon' => 'getHighResIcon',
        'has_icon' => 'getHasIcon'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['large_icon'] = $data['large_icon'] ?? null;
        $this->container['subtitle'] = $data['subtitle'] ?? null;
        $this->container['original_icon'] = $data['original_icon'] ?? null;
        $this->container['requirements_display'] = $data['requirements_display'] ?? null;
        $this->container['small_transparent_icon'] = $data['small_transparent_icon'] ?? null;
        $this->container['map_icon'] = $data['map_icon'] ?? null;
        $this->container['large_transparent_icon'] = $data['large_transparent_icon'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['icon'] = $data['icon'] ?? null;
        $this->container['icon_sequences'] = $data['icon_sequences'] ?? null;
        $this->container['high_res_icon'] = $data['high_res_icon'] ?? null;
        $this->container['has_icon'] = $data['has_icon'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets large_icon
     *
     * @return string|null
     */
    public function getLargeIcon()
    {
        return $this->container['large_icon'];
    }

    /**
     * Sets large_icon
     *
     * @param string|null $large_icon I regret calling this a \"large icon\". It's more like a medium-sized image with a picture of the vendor's mug on it, trying their best to look cool. Not what one would call an icon.
     *
     * @return self
     */
    public function setLargeIcon($large_icon)
    {
        $this->container['large_icon'] = $large_icon;

        return $this;
    }

    /**
     * Gets subtitle
     *
     * @return string|null
     */
    public function getSubtitle()
    {
        return $this->container['subtitle'];
    }

    /**
     * Sets subtitle
     *
     * @param string|null $subtitle subtitle
     *
     * @return self
     */
    public function setSubtitle($subtitle)
    {
        $this->container['subtitle'] = $subtitle;

        return $this;
    }

    /**
     * Gets original_icon
     *
     * @return string|null
     */
    public function getOriginalIcon()
    {
        return $this->container['original_icon'];
    }

    /**
     * Sets original_icon
     *
     * @param string|null $original_icon If we replaced the icon with something more glitzy, this is the original icon that the vendor had according to the game's content. It may be more lame and/or have less razzle-dazzle. But who am I to tell you which icon to use.
     *
     * @return self
     */
    public function setOriginalIcon($original_icon)
    {
        $this->container['original_icon'] = $original_icon;

        return $this;
    }

    /**
     * Gets requirements_display
     *
     * @return \OpenAPI\Client\Model\DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition[]|null
     */
    public function getRequirementsDisplay()
    {
        return $this->container['requirements_display'];
    }

    /**
     * Sets requirements_display
     *
     * @param \OpenAPI\Client\Model\DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition[]|null $requirements_display Vendors, in addition to expected display property data, may also show some \"common requirements\" as statically defined definition data. This might be when a vendor accepts a single type of currency, or when the currency is unique to the vendor and the designers wanted to show that currency when you interact with the vendor.
     *
     * @return self
     */
    public function setRequirementsDisplay($requirements_display)
    {
        $this->container['requirements_display'] = $requirements_display;

        return $this;
    }

    /**
     * Gets small_transparent_icon
     *
     * @return string|null
     */
    public function getSmallTransparentIcon()
    {
        return $this->container['small_transparent_icon'];
    }

    /**
     * Sets small_transparent_icon
     *
     * @param string|null $small_transparent_icon This is the icon used in parts of the game UI such as the vendor's waypoint.
     *
     * @return self
     */
    public function setSmallTransparentIcon($small_transparent_icon)
    {
        $this->container['small_transparent_icon'] = $small_transparent_icon;

        return $this;
    }

    /**
     * Gets map_icon
     *
     * @return string|null
     */
    public function getMapIcon()
    {
        return $this->container['map_icon'];
    }

    /**
     * Sets map_icon
     *
     * @param string|null $map_icon This is the icon used in the map overview, when the vendor is located on the map.
     *
     * @return self
     */
    public function setMapIcon($map_icon)
    {
        $this->container['map_icon'] = $map_icon;

        return $this;
    }

    /**
     * Gets large_transparent_icon
     *
     * @return string|null
     */
    public function getLargeTransparentIcon()
    {
        return $this->container['large_transparent_icon'];
    }

    /**
     * Sets large_transparent_icon
     *
     * @param string|null $large_transparent_icon This is apparently the \"Watermark\". I am not certain offhand where this is actually used in the Game UI, but some people may find it useful.
     *
     * @return self
     */
    public function setLargeTransparentIcon($large_transparent_icon)
    {
        $this->container['large_transparent_icon'] = $large_transparent_icon;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string|null
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string|null $icon Note that \"icon\" is sometimes misleading, and should be interpreted in the context of the entity. For instance, in Destiny 1 the DestinyRecordBookDefinition's icon was a big picture of a book.  But usually, it will be a small square image that you can use as... well, an icon.  They are currently represented as 96px x 96px images.
     *
     * @return self
     */
    public function setIcon($icon)
    {
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets icon_sequences
     *
     * @return \OpenAPI\Client\Model\DestinyDefinitionsCommonDestinyIconSequenceDefinition[]|null
     */
    public function getIconSequences()
    {
        return $this->container['icon_sequences'];
    }

    /**
     * Sets icon_sequences
     *
     * @param \OpenAPI\Client\Model\DestinyDefinitionsCommonDestinyIconSequenceDefinition[]|null $icon_sequences icon_sequences
     *
     * @return self
     */
    public function setIconSequences($icon_sequences)
    {
        $this->container['icon_sequences'] = $icon_sequences;

        return $this;
    }

    /**
     * Gets high_res_icon
     *
     * @return string|null
     */
    public function getHighResIcon()
    {
        return $this->container['high_res_icon'];
    }

    /**
     * Sets high_res_icon
     *
     * @param string|null $high_res_icon If this item has a high-res icon (at least for now, many things won't), then the path to that icon will be here.
     *
     * @return self
     */
    public function setHighResIcon($high_res_icon)
    {
        $this->container['high_res_icon'] = $high_res_icon;

        return $this;
    }

    /**
     * Gets has_icon
     *
     * @return bool|null
     */
    public function getHasIcon()
    {
        return $this->container['has_icon'];
    }

    /**
     * Sets has_icon
     *
     * @param bool|null $has_icon has_icon
     *
     * @return self
     */
    public function setHasIcon($has_icon)
    {
        $this->container['has_icon'] = $has_icon;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


