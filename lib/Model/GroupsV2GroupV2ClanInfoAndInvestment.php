<?php
/**
 * GroupsV2GroupV2ClanInfoAndInvestment
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GroupsV2GroupV2ClanInfoAndInvestment Class Doc Comment
 *
 * @category Class
 * @description The same as GroupV2ClanInfo, but includes any investment data.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class GroupsV2GroupV2ClanInfoAndInvestment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GroupsV2.GroupV2ClanInfoAndInvestment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'd2_clan_progressions' => 'map[string,\OpenAPI\Client\Model\DestinyDestinyProgression]',
        'clan_callsign' => 'string',
        'clan_banner_data' => '\OpenAPI\Client\Model\GroupsV2ClanBanner'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'd2_clan_progressions' => null,
        'clan_callsign' => null,
        'clan_banner_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'd2_clan_progressions' => 'd2ClanProgressions',
        'clan_callsign' => 'clanCallsign',
        'clan_banner_data' => 'clanBannerData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'd2_clan_progressions' => 'setD2ClanProgressions',
        'clan_callsign' => 'setClanCallsign',
        'clan_banner_data' => 'setClanBannerData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'd2_clan_progressions' => 'getD2ClanProgressions',
        'clan_callsign' => 'getClanCallsign',
        'clan_banner_data' => 'getClanBannerData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['d2_clan_progressions'] = $data['d2_clan_progressions'] ?? null;
        $this->container['clan_callsign'] = $data['clan_callsign'] ?? null;
        $this->container['clan_banner_data'] = $data['clan_banner_data'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets d2_clan_progressions
     *
     * @return map[string,\OpenAPI\Client\Model\DestinyDestinyProgression]|null
     */
    public function getD2ClanProgressions()
    {
        return $this->container['d2_clan_progressions'];
    }

    /**
     * Sets d2_clan_progressions
     *
     * @param map[string,\OpenAPI\Client\Model\DestinyDestinyProgression]|null $d2_clan_progressions d2_clan_progressions
     *
     * @return self
     */
    public function setD2ClanProgressions($d2_clan_progressions)
    {
        $this->container['d2_clan_progressions'] = $d2_clan_progressions;

        return $this;
    }

    /**
     * Gets clan_callsign
     *
     * @return string|null
     */
    public function getClanCallsign()
    {
        return $this->container['clan_callsign'];
    }

    /**
     * Sets clan_callsign
     *
     * @param string|null $clan_callsign clan_callsign
     *
     * @return self
     */
    public function setClanCallsign($clan_callsign)
    {
        $this->container['clan_callsign'] = $clan_callsign;

        return $this;
    }

    /**
     * Gets clan_banner_data
     *
     * @return \OpenAPI\Client\Model\GroupsV2ClanBanner|null
     */
    public function getClanBannerData()
    {
        return $this->container['clan_banner_data'];
    }

    /**
     * Sets clan_banner_data
     *
     * @param \OpenAPI\Client\Model\GroupsV2ClanBanner|null $clan_banner_data clan_banner_data
     *
     * @return self
     */
    public function setClanBannerData($clan_banner_data)
    {
        $this->container['clan_banner_data'] = $clan_banner_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


