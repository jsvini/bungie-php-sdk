<?php
/**
 * ForumPostResponse
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ForumPostResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ForumPostResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Forum.PostResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'last_reply_timestamp' => '\DateTime',
        'is_pinned' => 'bool',
        'url_media_type' => 'int',
        'thumbnail' => 'string',
        'popularity' => 'int',
        'is_active' => 'bool',
        'is_announcement' => 'bool',
        'user_rating' => 'int',
        'user_has_rated' => 'bool',
        'user_has_muted_post' => 'bool',
        'latest_reply_post_id' => 'int',
        'latest_reply_author_id' => 'int',
        'ignore_status' => '\OpenAPI\Client\Model\IgnoresIgnoreResponse',
        'locale' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'last_reply_timestamp' => 'date-time',
        'is_pinned' => null,
        'url_media_type' => 'int32',
        'thumbnail' => null,
        'popularity' => 'int32',
        'is_active' => null,
        'is_announcement' => null,
        'user_rating' => 'int32',
        'user_has_rated' => null,
        'user_has_muted_post' => null,
        'latest_reply_post_id' => 'int64',
        'latest_reply_author_id' => 'int64',
        'ignore_status' => null,
        'locale' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'last_reply_timestamp' => 'lastReplyTimestamp',
        'is_pinned' => 'IsPinned',
        'url_media_type' => 'urlMediaType',
        'thumbnail' => 'thumbnail',
        'popularity' => 'popularity',
        'is_active' => 'isActive',
        'is_announcement' => 'isAnnouncement',
        'user_rating' => 'userRating',
        'user_has_rated' => 'userHasRated',
        'user_has_muted_post' => 'userHasMutedPost',
        'latest_reply_post_id' => 'latestReplyPostId',
        'latest_reply_author_id' => 'latestReplyAuthorId',
        'ignore_status' => 'ignoreStatus',
        'locale' => 'locale'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'last_reply_timestamp' => 'setLastReplyTimestamp',
        'is_pinned' => 'setIsPinned',
        'url_media_type' => 'setUrlMediaType',
        'thumbnail' => 'setThumbnail',
        'popularity' => 'setPopularity',
        'is_active' => 'setIsActive',
        'is_announcement' => 'setIsAnnouncement',
        'user_rating' => 'setUserRating',
        'user_has_rated' => 'setUserHasRated',
        'user_has_muted_post' => 'setUserHasMutedPost',
        'latest_reply_post_id' => 'setLatestReplyPostId',
        'latest_reply_author_id' => 'setLatestReplyAuthorId',
        'ignore_status' => 'setIgnoreStatus',
        'locale' => 'setLocale'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'last_reply_timestamp' => 'getLastReplyTimestamp',
        'is_pinned' => 'getIsPinned',
        'url_media_type' => 'getUrlMediaType',
        'thumbnail' => 'getThumbnail',
        'popularity' => 'getPopularity',
        'is_active' => 'getIsActive',
        'is_announcement' => 'getIsAnnouncement',
        'user_rating' => 'getUserRating',
        'user_has_rated' => 'getUserHasRated',
        'user_has_muted_post' => 'getUserHasMutedPost',
        'latest_reply_post_id' => 'getLatestReplyPostId',
        'latest_reply_author_id' => 'getLatestReplyAuthorId',
        'ignore_status' => 'getIgnoreStatus',
        'locale' => 'getLocale'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['last_reply_timestamp'] = $data['last_reply_timestamp'] ?? null;
        $this->container['is_pinned'] = $data['is_pinned'] ?? null;
        $this->container['url_media_type'] = $data['url_media_type'] ?? null;
        $this->container['thumbnail'] = $data['thumbnail'] ?? null;
        $this->container['popularity'] = $data['popularity'] ?? null;
        $this->container['is_active'] = $data['is_active'] ?? null;
        $this->container['is_announcement'] = $data['is_announcement'] ?? null;
        $this->container['user_rating'] = $data['user_rating'] ?? null;
        $this->container['user_has_rated'] = $data['user_has_rated'] ?? null;
        $this->container['user_has_muted_post'] = $data['user_has_muted_post'] ?? null;
        $this->container['latest_reply_post_id'] = $data['latest_reply_post_id'] ?? null;
        $this->container['latest_reply_author_id'] = $data['latest_reply_author_id'] ?? null;
        $this->container['ignore_status'] = $data['ignore_status'] ?? null;
        $this->container['locale'] = $data['locale'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets last_reply_timestamp
     *
     * @return \DateTime|null
     */
    public function getLastReplyTimestamp()
    {
        return $this->container['last_reply_timestamp'];
    }

    /**
     * Sets last_reply_timestamp
     *
     * @param \DateTime|null $last_reply_timestamp last_reply_timestamp
     *
     * @return self
     */
    public function setLastReplyTimestamp($last_reply_timestamp)
    {
        $this->container['last_reply_timestamp'] = $last_reply_timestamp;

        return $this;
    }

    /**
     * Gets is_pinned
     *
     * @return bool|null
     */
    public function getIsPinned()
    {
        return $this->container['is_pinned'];
    }

    /**
     * Sets is_pinned
     *
     * @param bool|null $is_pinned is_pinned
     *
     * @return self
     */
    public function setIsPinned($is_pinned)
    {
        $this->container['is_pinned'] = $is_pinned;

        return $this;
    }

    /**
     * Gets url_media_type
     *
     * @return int|null
     */
    public function getUrlMediaType()
    {
        return $this->container['url_media_type'];
    }

    /**
     * Sets url_media_type
     *
     * @param int|null $url_media_type url_media_type
     *
     * @return self
     */
    public function setUrlMediaType($url_media_type)
    {
        $this->container['url_media_type'] = $url_media_type;

        return $this;
    }

    /**
     * Gets thumbnail
     *
     * @return string|null
     */
    public function getThumbnail()
    {
        return $this->container['thumbnail'];
    }

    /**
     * Sets thumbnail
     *
     * @param string|null $thumbnail thumbnail
     *
     * @return self
     */
    public function setThumbnail($thumbnail)
    {
        $this->container['thumbnail'] = $thumbnail;

        return $this;
    }

    /**
     * Gets popularity
     *
     * @return int|null
     */
    public function getPopularity()
    {
        return $this->container['popularity'];
    }

    /**
     * Sets popularity
     *
     * @param int|null $popularity popularity
     *
     * @return self
     */
    public function setPopularity($popularity)
    {
        $this->container['popularity'] = $popularity;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool|null
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool|null $is_active is_active
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets is_announcement
     *
     * @return bool|null
     */
    public function getIsAnnouncement()
    {
        return $this->container['is_announcement'];
    }

    /**
     * Sets is_announcement
     *
     * @param bool|null $is_announcement is_announcement
     *
     * @return self
     */
    public function setIsAnnouncement($is_announcement)
    {
        $this->container['is_announcement'] = $is_announcement;

        return $this;
    }

    /**
     * Gets user_rating
     *
     * @return int|null
     */
    public function getUserRating()
    {
        return $this->container['user_rating'];
    }

    /**
     * Sets user_rating
     *
     * @param int|null $user_rating user_rating
     *
     * @return self
     */
    public function setUserRating($user_rating)
    {
        $this->container['user_rating'] = $user_rating;

        return $this;
    }

    /**
     * Gets user_has_rated
     *
     * @return bool|null
     */
    public function getUserHasRated()
    {
        return $this->container['user_has_rated'];
    }

    /**
     * Sets user_has_rated
     *
     * @param bool|null $user_has_rated user_has_rated
     *
     * @return self
     */
    public function setUserHasRated($user_has_rated)
    {
        $this->container['user_has_rated'] = $user_has_rated;

        return $this;
    }

    /**
     * Gets user_has_muted_post
     *
     * @return bool|null
     */
    public function getUserHasMutedPost()
    {
        return $this->container['user_has_muted_post'];
    }

    /**
     * Sets user_has_muted_post
     *
     * @param bool|null $user_has_muted_post user_has_muted_post
     *
     * @return self
     */
    public function setUserHasMutedPost($user_has_muted_post)
    {
        $this->container['user_has_muted_post'] = $user_has_muted_post;

        return $this;
    }

    /**
     * Gets latest_reply_post_id
     *
     * @return int|null
     */
    public function getLatestReplyPostId()
    {
        return $this->container['latest_reply_post_id'];
    }

    /**
     * Sets latest_reply_post_id
     *
     * @param int|null $latest_reply_post_id latest_reply_post_id
     *
     * @return self
     */
    public function setLatestReplyPostId($latest_reply_post_id)
    {
        $this->container['latest_reply_post_id'] = $latest_reply_post_id;

        return $this;
    }

    /**
     * Gets latest_reply_author_id
     *
     * @return int|null
     */
    public function getLatestReplyAuthorId()
    {
        return $this->container['latest_reply_author_id'];
    }

    /**
     * Sets latest_reply_author_id
     *
     * @param int|null $latest_reply_author_id latest_reply_author_id
     *
     * @return self
     */
    public function setLatestReplyAuthorId($latest_reply_author_id)
    {
        $this->container['latest_reply_author_id'] = $latest_reply_author_id;

        return $this;
    }

    /**
     * Gets ignore_status
     *
     * @return \OpenAPI\Client\Model\IgnoresIgnoreResponse|null
     */
    public function getIgnoreStatus()
    {
        return $this->container['ignore_status'];
    }

    /**
     * Sets ignore_status
     *
     * @param \OpenAPI\Client\Model\IgnoresIgnoreResponse|null $ignore_status ignore_status
     *
     * @return self
     */
    public function setIgnoreStatus($ignore_status)
    {
        $this->container['ignore_status'] = $ignore_status;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale locale
     *
     * @return self
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


