<?php
/**
 * DestinyDefinitionsDestinyItemQualityBlockDefinition
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyDefinitionsDestinyItemQualityBlockDefinition Class Doc Comment
 *
 * @category Class
 * @description An item&#39;s \&quot;Quality\&quot; determines its calculated stats. The Level at which the item spawns is combined with its \&quot;qualityLevel\&quot; along with some additional calculations to determine the value of those stats.  In Destiny 2, most items don&#39;t have default item levels and quality, making this property less useful: these apparently are almost always determined by the complex mechanisms of the Reward system rather than statically. They are still provided here in case they are still useful for people. This also contains some information about Infusion.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyDefinitionsDestinyItemQualityBlockDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.DestinyItemQualityBlockDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'item_levels' => 'int[]',
        'quality_level' => 'int',
        'infusion_category_name' => 'string',
        'infusion_category_hash' => 'int',
        'infusion_category_hashes' => 'int[]',
        'progression_level_requirement_hash' => 'int',
        'current_version' => 'int',
        'versions' => '\OpenAPI\Client\Model\DestinyDefinitionsDestinyItemVersionDefinition[]',
        'display_version_watermark_icons' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'item_levels' => 'int32',
        'quality_level' => 'int32',
        'infusion_category_name' => null,
        'infusion_category_hash' => 'uint32',
        'infusion_category_hashes' => 'uint32',
        'progression_level_requirement_hash' => 'uint32',
        'current_version' => 'uint32',
        'versions' => null,
        'display_version_watermark_icons' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_levels' => 'itemLevels',
        'quality_level' => 'qualityLevel',
        'infusion_category_name' => 'infusionCategoryName',
        'infusion_category_hash' => 'infusionCategoryHash',
        'infusion_category_hashes' => 'infusionCategoryHashes',
        'progression_level_requirement_hash' => 'progressionLevelRequirementHash',
        'current_version' => 'currentVersion',
        'versions' => 'versions',
        'display_version_watermark_icons' => 'displayVersionWatermarkIcons'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_levels' => 'setItemLevels',
        'quality_level' => 'setQualityLevel',
        'infusion_category_name' => 'setInfusionCategoryName',
        'infusion_category_hash' => 'setInfusionCategoryHash',
        'infusion_category_hashes' => 'setInfusionCategoryHashes',
        'progression_level_requirement_hash' => 'setProgressionLevelRequirementHash',
        'current_version' => 'setCurrentVersion',
        'versions' => 'setVersions',
        'display_version_watermark_icons' => 'setDisplayVersionWatermarkIcons'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_levels' => 'getItemLevels',
        'quality_level' => 'getQualityLevel',
        'infusion_category_name' => 'getInfusionCategoryName',
        'infusion_category_hash' => 'getInfusionCategoryHash',
        'infusion_category_hashes' => 'getInfusionCategoryHashes',
        'progression_level_requirement_hash' => 'getProgressionLevelRequirementHash',
        'current_version' => 'getCurrentVersion',
        'versions' => 'getVersions',
        'display_version_watermark_icons' => 'getDisplayVersionWatermarkIcons'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item_levels'] = $data['item_levels'] ?? null;
        $this->container['quality_level'] = $data['quality_level'] ?? null;
        $this->container['infusion_category_name'] = $data['infusion_category_name'] ?? null;
        $this->container['infusion_category_hash'] = $data['infusion_category_hash'] ?? null;
        $this->container['infusion_category_hashes'] = $data['infusion_category_hashes'] ?? null;
        $this->container['progression_level_requirement_hash'] = $data['progression_level_requirement_hash'] ?? null;
        $this->container['current_version'] = $data['current_version'] ?? null;
        $this->container['versions'] = $data['versions'] ?? null;
        $this->container['display_version_watermark_icons'] = $data['display_version_watermark_icons'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_levels
     *
     * @return int[]|null
     */
    public function getItemLevels()
    {
        return $this->container['item_levels'];
    }

    /**
     * Sets item_levels
     *
     * @param int[]|null $item_levels The \"base\" defined level of an item. This is a list because, in theory, each Expansion could define its own base level for an item.  In practice, not only was that never done in Destiny 1, but now this isn't even populated at all. When it's not populated, the level at which it spawns has to be inferred by Reward information, of which BNet receives an imperfect view and will only be reliable on instanced data as a result.
     *
     * @return self
     */
    public function setItemLevels($item_levels)
    {
        $this->container['item_levels'] = $item_levels;

        return $this;
    }

    /**
     * Gets quality_level
     *
     * @return int|null
     */
    public function getQualityLevel()
    {
        return $this->container['quality_level'];
    }

    /**
     * Sets quality_level
     *
     * @param int|null $quality_level qualityLevel is used in combination with the item's level to calculate stats like Attack and Defense. It plays a role in that calculation, but not nearly as large as itemLevel does.
     *
     * @return self
     */
    public function setQualityLevel($quality_level)
    {
        $this->container['quality_level'] = $quality_level;

        return $this;
    }

    /**
     * Gets infusion_category_name
     *
     * @return string|null
     */
    public function getInfusionCategoryName()
    {
        return $this->container['infusion_category_name'];
    }

    /**
     * Sets infusion_category_name
     *
     * @param string|null $infusion_category_name The string identifier for this item's \"infusability\", if any.   Items that match the same infusionCategoryName are allowed to infuse with each other.  DEPRECATED: Items can now have multiple infusion categories. Please use infusionCategoryHashes instead.
     *
     * @return self
     */
    public function setInfusionCategoryName($infusion_category_name)
    {
        $this->container['infusion_category_name'] = $infusion_category_name;

        return $this;
    }

    /**
     * Gets infusion_category_hash
     *
     * @return int|null
     */
    public function getInfusionCategoryHash()
    {
        return $this->container['infusion_category_hash'];
    }

    /**
     * Sets infusion_category_hash
     *
     * @param int|null $infusion_category_hash The hash identifier for the infusion. It does not map to a Definition entity.  DEPRECATED: Items can now have multiple infusion categories. Please use infusionCategoryHashes instead.
     *
     * @return self
     */
    public function setInfusionCategoryHash($infusion_category_hash)
    {
        $this->container['infusion_category_hash'] = $infusion_category_hash;

        return $this;
    }

    /**
     * Gets infusion_category_hashes
     *
     * @return int[]|null
     */
    public function getInfusionCategoryHashes()
    {
        return $this->container['infusion_category_hashes'];
    }

    /**
     * Sets infusion_category_hashes
     *
     * @param int[]|null $infusion_category_hashes If any one of these hashes matches any value in another item's infusionCategoryHashes, the two can infuse with each other.
     *
     * @return self
     */
    public function setInfusionCategoryHashes($infusion_category_hashes)
    {
        $this->container['infusion_category_hashes'] = $infusion_category_hashes;

        return $this;
    }

    /**
     * Gets progression_level_requirement_hash
     *
     * @return int|null
     */
    public function getProgressionLevelRequirementHash()
    {
        return $this->container['progression_level_requirement_hash'];
    }

    /**
     * Sets progression_level_requirement_hash
     *
     * @param int|null $progression_level_requirement_hash An item can refer to pre-set level requirements. They are defined in DestinyProgressionLevelRequirementDefinition, and you can use this hash to find the appropriate definition.
     *
     * @return self
     */
    public function setProgressionLevelRequirementHash($progression_level_requirement_hash)
    {
        $this->container['progression_level_requirement_hash'] = $progression_level_requirement_hash;

        return $this;
    }

    /**
     * Gets current_version
     *
     * @return int|null
     */
    public function getCurrentVersion()
    {
        return $this->container['current_version'];
    }

    /**
     * Sets current_version
     *
     * @param int|null $current_version The latest version available for this item.
     *
     * @return self
     */
    public function setCurrentVersion($current_version)
    {
        $this->container['current_version'] = $current_version;

        return $this;
    }

    /**
     * Gets versions
     *
     * @return \OpenAPI\Client\Model\DestinyDefinitionsDestinyItemVersionDefinition[]|null
     */
    public function getVersions()
    {
        return $this->container['versions'];
    }

    /**
     * Sets versions
     *
     * @param \OpenAPI\Client\Model\DestinyDefinitionsDestinyItemVersionDefinition[]|null $versions The list of versions available for this item.
     *
     * @return self
     */
    public function setVersions($versions)
    {
        $this->container['versions'] = $versions;

        return $this;
    }

    /**
     * Gets display_version_watermark_icons
     *
     * @return string[]|null
     */
    public function getDisplayVersionWatermarkIcons()
    {
        return $this->container['display_version_watermark_icons'];
    }

    /**
     * Sets display_version_watermark_icons
     *
     * @param string[]|null $display_version_watermark_icons Icon overlays to denote the item version and power cap status.
     *
     * @return self
     */
    public function setDisplayVersionWatermarkIcons($display_version_watermark_icons)
    {
        $this->container['display_version_watermark_icons'] = $display_version_watermark_icons;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


