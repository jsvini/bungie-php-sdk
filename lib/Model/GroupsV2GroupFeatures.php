<?php
/**
 * GroupsV2GroupFeatures
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GroupsV2GroupFeatures Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class GroupsV2GroupFeatures implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GroupsV2.GroupFeatures';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'maximum_members' => 'int',
        'maximum_memberships_of_group_type' => 'int',
        'capabilities' => 'int',
        'membership_types' => 'int[]',
        'invite_permission_override' => 'bool',
        'update_culture_permission_override' => 'bool',
        'host_guided_game_permission_override' => 'int',
        'update_banner_permission_override' => 'bool',
        'join_level' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'maximum_members' => 'int32',
        'maximum_memberships_of_group_type' => 'int32',
        'capabilities' => 'int32',
        'membership_types' => 'int32',
        'invite_permission_override' => null,
        'update_culture_permission_override' => null,
        'host_guided_game_permission_override' => 'int32',
        'update_banner_permission_override' => null,
        'join_level' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'maximum_members' => 'maximumMembers',
        'maximum_memberships_of_group_type' => 'maximumMembershipsOfGroupType',
        'capabilities' => 'capabilities',
        'membership_types' => 'membershipTypes',
        'invite_permission_override' => 'invitePermissionOverride',
        'update_culture_permission_override' => 'updateCulturePermissionOverride',
        'host_guided_game_permission_override' => 'hostGuidedGamePermissionOverride',
        'update_banner_permission_override' => 'updateBannerPermissionOverride',
        'join_level' => 'joinLevel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'maximum_members' => 'setMaximumMembers',
        'maximum_memberships_of_group_type' => 'setMaximumMembershipsOfGroupType',
        'capabilities' => 'setCapabilities',
        'membership_types' => 'setMembershipTypes',
        'invite_permission_override' => 'setInvitePermissionOverride',
        'update_culture_permission_override' => 'setUpdateCulturePermissionOverride',
        'host_guided_game_permission_override' => 'setHostGuidedGamePermissionOverride',
        'update_banner_permission_override' => 'setUpdateBannerPermissionOverride',
        'join_level' => 'setJoinLevel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'maximum_members' => 'getMaximumMembers',
        'maximum_memberships_of_group_type' => 'getMaximumMembershipsOfGroupType',
        'capabilities' => 'getCapabilities',
        'membership_types' => 'getMembershipTypes',
        'invite_permission_override' => 'getInvitePermissionOverride',
        'update_culture_permission_override' => 'getUpdateCulturePermissionOverride',
        'host_guided_game_permission_override' => 'getHostGuidedGamePermissionOverride',
        'update_banner_permission_override' => 'getUpdateBannerPermissionOverride',
        'join_level' => 'getJoinLevel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['maximum_members'] = $data['maximum_members'] ?? null;
        $this->container['maximum_memberships_of_group_type'] = $data['maximum_memberships_of_group_type'] ?? null;
        $this->container['capabilities'] = $data['capabilities'] ?? null;
        $this->container['membership_types'] = $data['membership_types'] ?? null;
        $this->container['invite_permission_override'] = $data['invite_permission_override'] ?? null;
        $this->container['update_culture_permission_override'] = $data['update_culture_permission_override'] ?? null;
        $this->container['host_guided_game_permission_override'] = $data['host_guided_game_permission_override'] ?? null;
        $this->container['update_banner_permission_override'] = $data['update_banner_permission_override'] ?? null;
        $this->container['join_level'] = $data['join_level'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets maximum_members
     *
     * @return int|null
     */
    public function getMaximumMembers()
    {
        return $this->container['maximum_members'];
    }

    /**
     * Sets maximum_members
     *
     * @param int|null $maximum_members maximum_members
     *
     * @return self
     */
    public function setMaximumMembers($maximum_members)
    {
        $this->container['maximum_members'] = $maximum_members;

        return $this;
    }

    /**
     * Gets maximum_memberships_of_group_type
     *
     * @return int|null
     */
    public function getMaximumMembershipsOfGroupType()
    {
        return $this->container['maximum_memberships_of_group_type'];
    }

    /**
     * Sets maximum_memberships_of_group_type
     *
     * @param int|null $maximum_memberships_of_group_type Maximum number of groups of this type a typical membership may join. For example, a user may join about 50 General groups with their Bungie.net account. They may join one clan per Destiny membership.
     *
     * @return self
     */
    public function setMaximumMembershipsOfGroupType($maximum_memberships_of_group_type)
    {
        $this->container['maximum_memberships_of_group_type'] = $maximum_memberships_of_group_type;

        return $this;
    }

    /**
     * Gets capabilities
     *
     * @return int|null
     */
    public function getCapabilities()
    {
        return $this->container['capabilities'];
    }

    /**
     * Sets capabilities
     *
     * @param int|null $capabilities capabilities
     *
     * @return self
     */
    public function setCapabilities($capabilities)
    {
        $this->container['capabilities'] = $capabilities;

        return $this;
    }

    /**
     * Gets membership_types
     *
     * @return int[]|null
     */
    public function getMembershipTypes()
    {
        return $this->container['membership_types'];
    }

    /**
     * Sets membership_types
     *
     * @param int[]|null $membership_types membership_types
     *
     * @return self
     */
    public function setMembershipTypes($membership_types)
    {
        $this->container['membership_types'] = $membership_types;

        return $this;
    }

    /**
     * Gets invite_permission_override
     *
     * @return bool|null
     */
    public function getInvitePermissionOverride()
    {
        return $this->container['invite_permission_override'];
    }

    /**
     * Sets invite_permission_override
     *
     * @param bool|null $invite_permission_override Minimum Member Level allowed to invite new members to group  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.
     *
     * @return self
     */
    public function setInvitePermissionOverride($invite_permission_override)
    {
        $this->container['invite_permission_override'] = $invite_permission_override;

        return $this;
    }

    /**
     * Gets update_culture_permission_override
     *
     * @return bool|null
     */
    public function getUpdateCulturePermissionOverride()
    {
        return $this->container['update_culture_permission_override'];
    }

    /**
     * Sets update_culture_permission_override
     *
     * @param bool|null $update_culture_permission_override Minimum Member Level allowed to update group culture  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.
     *
     * @return self
     */
    public function setUpdateCulturePermissionOverride($update_culture_permission_override)
    {
        $this->container['update_culture_permission_override'] = $update_culture_permission_override;

        return $this;
    }

    /**
     * Gets host_guided_game_permission_override
     *
     * @return int|null
     */
    public function getHostGuidedGamePermissionOverride()
    {
        return $this->container['host_guided_game_permission_override'];
    }

    /**
     * Sets host_guided_game_permission_override
     *
     * @param int|null $host_guided_game_permission_override Minimum Member Level allowed to host guided games  Always Allowed: Founder, Acting Founder, Admin  Allowed Overrides: None, Member, Beginner  Default is Member for clans, None for groups, although this means nothing for groups.
     *
     * @return self
     */
    public function setHostGuidedGamePermissionOverride($host_guided_game_permission_override)
    {
        $this->container['host_guided_game_permission_override'] = $host_guided_game_permission_override;

        return $this;
    }

    /**
     * Gets update_banner_permission_override
     *
     * @return bool|null
     */
    public function getUpdateBannerPermissionOverride()
    {
        return $this->container['update_banner_permission_override'];
    }

    /**
     * Sets update_banner_permission_override
     *
     * @param bool|null $update_banner_permission_override Minimum Member Level allowed to update banner  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.
     *
     * @return self
     */
    public function setUpdateBannerPermissionOverride($update_banner_permission_override)
    {
        $this->container['update_banner_permission_override'] = $update_banner_permission_override;

        return $this;
    }

    /**
     * Gets join_level
     *
     * @return int|null
     */
    public function getJoinLevel()
    {
        return $this->container['join_level'];
    }

    /**
     * Sets join_level
     *
     * @param int|null $join_level Level to join a member at when accepting an invite, application, or joining an open clan  Default is Beginner.
     *
     * @return self
     */
    public function setJoinLevel($join_level)
    {
        $this->container['join_level'] = $join_level;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


