<?php
/**
 * UserUserInfoCard
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UserUserInfoCard Class Doc Comment
 *
 * @category Class
 * @description This contract supplies basic information commonly used to display a minimal amount of information about a user. Take care to not add more properties here unless the property applies in all (or at least the majority) of the situations where UserInfoCard is used. Avoid adding game specific or platform specific details here. In cases where UserInfoCard is a subset of the data needed in a contract, use UserInfoCard as a property of other contracts.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class UserUserInfoCard implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'User.UserInfoCard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'supplemental_display_name' => 'string',
        'icon_path' => 'string',
        'cross_save_override' => 'int',
        'applicable_membership_types' => 'int[]',
        'is_public' => 'bool',
        'membership_type' => 'int',
        'membership_id' => 'int',
        'display_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'supplemental_display_name' => null,
        'icon_path' => null,
        'cross_save_override' => 'int32',
        'applicable_membership_types' => 'int32',
        'is_public' => null,
        'membership_type' => 'int32',
        'membership_id' => 'int64',
        'display_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'supplemental_display_name' => 'supplementalDisplayName',
        'icon_path' => 'iconPath',
        'cross_save_override' => 'crossSaveOverride',
        'applicable_membership_types' => 'applicableMembershipTypes',
        'is_public' => 'isPublic',
        'membership_type' => 'membershipType',
        'membership_id' => 'membershipId',
        'display_name' => 'displayName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'supplemental_display_name' => 'setSupplementalDisplayName',
        'icon_path' => 'setIconPath',
        'cross_save_override' => 'setCrossSaveOverride',
        'applicable_membership_types' => 'setApplicableMembershipTypes',
        'is_public' => 'setIsPublic',
        'membership_type' => 'setMembershipType',
        'membership_id' => 'setMembershipId',
        'display_name' => 'setDisplayName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'supplemental_display_name' => 'getSupplementalDisplayName',
        'icon_path' => 'getIconPath',
        'cross_save_override' => 'getCrossSaveOverride',
        'applicable_membership_types' => 'getApplicableMembershipTypes',
        'is_public' => 'getIsPublic',
        'membership_type' => 'getMembershipType',
        'membership_id' => 'getMembershipId',
        'display_name' => 'getDisplayName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['supplemental_display_name'] = $data['supplemental_display_name'] ?? null;
        $this->container['icon_path'] = $data['icon_path'] ?? null;
        $this->container['cross_save_override'] = $data['cross_save_override'] ?? null;
        $this->container['applicable_membership_types'] = $data['applicable_membership_types'] ?? null;
        $this->container['is_public'] = $data['is_public'] ?? null;
        $this->container['membership_type'] = $data['membership_type'] ?? null;
        $this->container['membership_id'] = $data['membership_id'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets supplemental_display_name
     *
     * @return string|null
     */
    public function getSupplementalDisplayName()
    {
        return $this->container['supplemental_display_name'];
    }

    /**
     * Sets supplemental_display_name
     *
     * @param string|null $supplemental_display_name A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.
     *
     * @return self
     */
    public function setSupplementalDisplayName($supplemental_display_name)
    {
        $this->container['supplemental_display_name'] = $supplemental_display_name;

        return $this;
    }

    /**
     * Gets icon_path
     *
     * @return string|null
     */
    public function getIconPath()
    {
        return $this->container['icon_path'];
    }

    /**
     * Sets icon_path
     *
     * @param string|null $icon_path URL the Icon if available.
     *
     * @return self
     */
    public function setIconPath($icon_path)
    {
        $this->container['icon_path'] = $icon_path;

        return $this;
    }

    /**
     * Gets cross_save_override
     *
     * @return int|null
     */
    public function getCrossSaveOverride()
    {
        return $this->container['cross_save_override'];
    }

    /**
     * Sets cross_save_override
     *
     * @param int|null $cross_save_override If there is a cross save override in effect, this value will tell you the type that is overridding this one.
     *
     * @return self
     */
    public function setCrossSaveOverride($cross_save_override)
    {
        $this->container['cross_save_override'] = $cross_save_override;

        return $this;
    }

    /**
     * Gets applicable_membership_types
     *
     * @return int[]|null
     */
    public function getApplicableMembershipTypes()
    {
        return $this->container['applicable_membership_types'];
    }

    /**
     * Sets applicable_membership_types
     *
     * @param int[]|null $applicable_membership_types The list of Membership Types indicating the platforms on which this Membership can be used.   Not in Cross Save = its original membership type. Cross Save Primary = Any membership types it is overridding, and its original membership type Cross Save Overridden = Empty list
     *
     * @return self
     */
    public function setApplicableMembershipTypes($applicable_membership_types)
    {
        $this->container['applicable_membership_types'] = $applicable_membership_types;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool|null
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool|null $is_public If True, this is a public user membership.
     *
     * @return self
     */
    public function setIsPublic($is_public)
    {
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets membership_type
     *
     * @return int|null
     */
    public function getMembershipType()
    {
        return $this->container['membership_type'];
    }

    /**
     * Sets membership_type
     *
     * @param int|null $membership_type Type of the membership. Not necessarily the native type.
     *
     * @return self
     */
    public function setMembershipType($membership_type)
    {
        $this->container['membership_type'] = $membership_type;

        return $this;
    }

    /**
     * Gets membership_id
     *
     * @return int|null
     */
    public function getMembershipId()
    {
        return $this->container['membership_id'];
    }

    /**
     * Sets membership_id
     *
     * @param int|null $membership_id Membership ID as they user is known in the Accounts service
     *
     * @return self
     */
    public function setMembershipId($membership_id)
    {
        $this->container['membership_id'] = $membership_id;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


