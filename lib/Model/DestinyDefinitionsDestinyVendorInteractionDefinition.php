<?php
/**
 * DestinyDefinitionsDestinyVendorInteractionDefinition
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyDefinitionsDestinyVendorInteractionDefinition Class Doc Comment
 *
 * @category Class
 * @description A Vendor Interaction is a dialog shown by the vendor other than sale items or transfer screens. The vendor is showing you something, and asking you to reply to it by choosing an option or reward.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyDefinitionsDestinyVendorInteractionDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.DestinyVendorInteractionDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'interaction_index' => 'int',
        'replies' => '\OpenAPI\Client\Model\DestinyDefinitionsDestinyVendorInteractionReplyDefinition[]',
        'vendor_category_index' => 'int',
        'questline_item_hash' => 'int',
        'sack_interaction_list' => '\OpenAPI\Client\Model\DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition[]',
        'ui_interaction_type' => 'int',
        'interaction_type' => 'int',
        'reward_block_label' => 'string',
        'reward_vendor_category_index' => 'int',
        'flavor_line_one' => 'string',
        'flavor_line_two' => 'string',
        'header_display_properties' => 'DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition',
        'instructions' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'interaction_index' => 'int32',
        'replies' => null,
        'vendor_category_index' => 'int32',
        'questline_item_hash' => 'uint32',
        'sack_interaction_list' => null,
        'ui_interaction_type' => 'uint32',
        'interaction_type' => 'int32',
        'reward_block_label' => null,
        'reward_vendor_category_index' => 'int32',
        'flavor_line_one' => null,
        'flavor_line_two' => null,
        'header_display_properties' => null,
        'instructions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'interaction_index' => 'interactionIndex',
        'replies' => 'replies',
        'vendor_category_index' => 'vendorCategoryIndex',
        'questline_item_hash' => 'questlineItemHash',
        'sack_interaction_list' => 'sackInteractionList',
        'ui_interaction_type' => 'uiInteractionType',
        'interaction_type' => 'interactionType',
        'reward_block_label' => 'rewardBlockLabel',
        'reward_vendor_category_index' => 'rewardVendorCategoryIndex',
        'flavor_line_one' => 'flavorLineOne',
        'flavor_line_two' => 'flavorLineTwo',
        'header_display_properties' => 'headerDisplayProperties',
        'instructions' => 'instructions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'interaction_index' => 'setInteractionIndex',
        'replies' => 'setReplies',
        'vendor_category_index' => 'setVendorCategoryIndex',
        'questline_item_hash' => 'setQuestlineItemHash',
        'sack_interaction_list' => 'setSackInteractionList',
        'ui_interaction_type' => 'setUiInteractionType',
        'interaction_type' => 'setInteractionType',
        'reward_block_label' => 'setRewardBlockLabel',
        'reward_vendor_category_index' => 'setRewardVendorCategoryIndex',
        'flavor_line_one' => 'setFlavorLineOne',
        'flavor_line_two' => 'setFlavorLineTwo',
        'header_display_properties' => 'setHeaderDisplayProperties',
        'instructions' => 'setInstructions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'interaction_index' => 'getInteractionIndex',
        'replies' => 'getReplies',
        'vendor_category_index' => 'getVendorCategoryIndex',
        'questline_item_hash' => 'getQuestlineItemHash',
        'sack_interaction_list' => 'getSackInteractionList',
        'ui_interaction_type' => 'getUiInteractionType',
        'interaction_type' => 'getInteractionType',
        'reward_block_label' => 'getRewardBlockLabel',
        'reward_vendor_category_index' => 'getRewardVendorCategoryIndex',
        'flavor_line_one' => 'getFlavorLineOne',
        'flavor_line_two' => 'getFlavorLineTwo',
        'header_display_properties' => 'getHeaderDisplayProperties',
        'instructions' => 'getInstructions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['interaction_index'] = $data['interaction_index'] ?? null;
        $this->container['replies'] = $data['replies'] ?? null;
        $this->container['vendor_category_index'] = $data['vendor_category_index'] ?? null;
        $this->container['questline_item_hash'] = $data['questline_item_hash'] ?? null;
        $this->container['sack_interaction_list'] = $data['sack_interaction_list'] ?? null;
        $this->container['ui_interaction_type'] = $data['ui_interaction_type'] ?? null;
        $this->container['interaction_type'] = $data['interaction_type'] ?? null;
        $this->container['reward_block_label'] = $data['reward_block_label'] ?? null;
        $this->container['reward_vendor_category_index'] = $data['reward_vendor_category_index'] ?? null;
        $this->container['flavor_line_one'] = $data['flavor_line_one'] ?? null;
        $this->container['flavor_line_two'] = $data['flavor_line_two'] ?? null;
        $this->container['header_display_properties'] = $data['header_display_properties'] ?? null;
        $this->container['instructions'] = $data['instructions'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets interaction_index
     *
     * @return int|null
     */
    public function getInteractionIndex()
    {
        return $this->container['interaction_index'];
    }

    /**
     * Sets interaction_index
     *
     * @param int|null $interaction_index The position of this interaction in its parent array. Note that this is NOT content agnostic, and should not be used as such.
     *
     * @return self
     */
    public function setInteractionIndex($interaction_index)
    {
        $this->container['interaction_index'] = $interaction_index;

        return $this;
    }

    /**
     * Gets replies
     *
     * @return \OpenAPI\Client\Model\DestinyDefinitionsDestinyVendorInteractionReplyDefinition[]|null
     */
    public function getReplies()
    {
        return $this->container['replies'];
    }

    /**
     * Sets replies
     *
     * @param \OpenAPI\Client\Model\DestinyDefinitionsDestinyVendorInteractionReplyDefinition[]|null $replies The potential replies that the user can make to the interaction.
     *
     * @return self
     */
    public function setReplies($replies)
    {
        $this->container['replies'] = $replies;

        return $this;
    }

    /**
     * Gets vendor_category_index
     *
     * @return int|null
     */
    public function getVendorCategoryIndex()
    {
        return $this->container['vendor_category_index'];
    }

    /**
     * Sets vendor_category_index
     *
     * @param int|null $vendor_category_index If >= 0, this is the category of sale items to show along with this interaction dialog.
     *
     * @return self
     */
    public function setVendorCategoryIndex($vendor_category_index)
    {
        $this->container['vendor_category_index'] = $vendor_category_index;

        return $this;
    }

    /**
     * Gets questline_item_hash
     *
     * @return int|null
     */
    public function getQuestlineItemHash()
    {
        return $this->container['questline_item_hash'];
    }

    /**
     * Sets questline_item_hash
     *
     * @param int|null $questline_item_hash If this interaction dialog is about a quest, this is the questline related to the interaction. You can use this to show the quest overview, or even the character's status with the quest if you use it to find the character's current Quest Step by checking their inventory against this questlineItemHash's DestinyInventoryItemDefinition.setData.
     *
     * @return self
     */
    public function setQuestlineItemHash($questline_item_hash)
    {
        $this->container['questline_item_hash'] = $questline_item_hash;

        return $this;
    }

    /**
     * Gets sack_interaction_list
     *
     * @return \OpenAPI\Client\Model\DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition[]|null
     */
    public function getSackInteractionList()
    {
        return $this->container['sack_interaction_list'];
    }

    /**
     * Sets sack_interaction_list
     *
     * @param \OpenAPI\Client\Model\DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition[]|null $sack_interaction_list If this interaction is meant to show you sacks, this is the list of types of sacks to be shown. If empty, the interaction is not meant to show sacks.
     *
     * @return self
     */
    public function setSackInteractionList($sack_interaction_list)
    {
        $this->container['sack_interaction_list'] = $sack_interaction_list;

        return $this;
    }

    /**
     * Gets ui_interaction_type
     *
     * @return int|null
     */
    public function getUiInteractionType()
    {
        return $this->container['ui_interaction_type'];
    }

    /**
     * Sets ui_interaction_type
     *
     * @param int|null $ui_interaction_type A UI hint for the behavior of the interaction screen. This is useful to determine what type of interaction is occurring, such as a prompt to receive a rank up reward or a prompt to choose a reward for completing a quest. The hash isn't as useful as the Enum in retrospect, well what can you do. Try using interactionType instead.
     *
     * @return self
     */
    public function setUiInteractionType($ui_interaction_type)
    {
        $this->container['ui_interaction_type'] = $ui_interaction_type;

        return $this;
    }

    /**
     * Gets interaction_type
     *
     * @return int|null
     */
    public function getInteractionType()
    {
        return $this->container['interaction_type'];
    }

    /**
     * Sets interaction_type
     *
     * @param int|null $interaction_type The enumerated version of the possible UI hints for vendor interactions, which is a little easier to grok than the hash found in uiInteractionType.
     *
     * @return self
     */
    public function setInteractionType($interaction_type)
    {
        $this->container['interaction_type'] = $interaction_type;

        return $this;
    }

    /**
     * Gets reward_block_label
     *
     * @return string|null
     */
    public function getRewardBlockLabel()
    {
        return $this->container['reward_block_label'];
    }

    /**
     * Sets reward_block_label
     *
     * @param string|null $reward_block_label If this interaction is displaying rewards, this is the text to use for the header of the reward-displaying section of the interaction.
     *
     * @return self
     */
    public function setRewardBlockLabel($reward_block_label)
    {
        $this->container['reward_block_label'] = $reward_block_label;

        return $this;
    }

    /**
     * Gets reward_vendor_category_index
     *
     * @return int|null
     */
    public function getRewardVendorCategoryIndex()
    {
        return $this->container['reward_vendor_category_index'];
    }

    /**
     * Sets reward_vendor_category_index
     *
     * @param int|null $reward_vendor_category_index If the vendor's reward list is sourced from one of his categories, this is the index into the category array of items to show.
     *
     * @return self
     */
    public function setRewardVendorCategoryIndex($reward_vendor_category_index)
    {
        $this->container['reward_vendor_category_index'] = $reward_vendor_category_index;

        return $this;
    }

    /**
     * Gets flavor_line_one
     *
     * @return string|null
     */
    public function getFlavorLineOne()
    {
        return $this->container['flavor_line_one'];
    }

    /**
     * Sets flavor_line_one
     *
     * @param string|null $flavor_line_one If the vendor interaction has flavor text, this is some of it.
     *
     * @return self
     */
    public function setFlavorLineOne($flavor_line_one)
    {
        $this->container['flavor_line_one'] = $flavor_line_one;

        return $this;
    }

    /**
     * Gets flavor_line_two
     *
     * @return string|null
     */
    public function getFlavorLineTwo()
    {
        return $this->container['flavor_line_two'];
    }

    /**
     * Sets flavor_line_two
     *
     * @param string|null $flavor_line_two If the vendor interaction has flavor text, this is the rest of it.
     *
     * @return self
     */
    public function setFlavorLineTwo($flavor_line_two)
    {
        $this->container['flavor_line_two'] = $flavor_line_two;

        return $this;
    }

    /**
     * Gets header_display_properties
     *
     * @return DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null
     */
    public function getHeaderDisplayProperties()
    {
        return $this->container['header_display_properties'];
    }

    /**
     * Sets header_display_properties
     *
     * @param DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null $header_display_properties The header for the interaction dialog.
     *
     * @return self
     */
    public function setHeaderDisplayProperties($header_display_properties)
    {
        $this->container['header_display_properties'] = $header_display_properties;

        return $this;
    }

    /**
     * Gets instructions
     *
     * @return string|null
     */
    public function getInstructions()
    {
        return $this->container['instructions'];
    }

    /**
     * Sets instructions
     *
     * @param string|null $instructions The localized text telling the player what to do when they see this dialog.
     *
     * @return self
     */
    public function setInstructions($instructions)
    {
        $this->container['instructions'] = $instructions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


