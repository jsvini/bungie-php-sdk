<?php
/**
 * DestinyDefinitionsDestinyItemObjectiveBlockDefinition
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyDefinitionsDestinyItemObjectiveBlockDefinition Class Doc Comment
 *
 * @category Class
 * @description An item can have objectives on it. In practice, these are the exclusive purview of \&quot;Quest Step\&quot; items: DestinyInventoryItemDefinitions that represent a specific step in a Quest.  Quest steps have 1:M objectives that we end up processing and returning in live data as DestinyQuestStatus data, and other useful information.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyDefinitionsDestinyItemObjectiveBlockDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.DestinyItemObjectiveBlockDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'objective_hashes' => 'int[]',
        'display_activity_hashes' => 'int[]',
        'require_full_objective_completion' => 'bool',
        'questline_item_hash' => 'int',
        'narrative' => 'string',
        'objective_verb_name' => 'string',
        'quest_type_identifier' => 'string',
        'quest_type_hash' => 'int',
        'per_objective_display_properties' => '\OpenAPI\Client\Model\DestinyDefinitionsDestinyObjectiveDisplayProperties[]',
        'display_as_stat_tracker' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'objective_hashes' => 'uint32',
        'display_activity_hashes' => 'uint32',
        'require_full_objective_completion' => null,
        'questline_item_hash' => 'uint32',
        'narrative' => null,
        'objective_verb_name' => null,
        'quest_type_identifier' => null,
        'quest_type_hash' => 'uint32',
        'per_objective_display_properties' => null,
        'display_as_stat_tracker' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'objective_hashes' => 'objectiveHashes',
        'display_activity_hashes' => 'displayActivityHashes',
        'require_full_objective_completion' => 'requireFullObjectiveCompletion',
        'questline_item_hash' => 'questlineItemHash',
        'narrative' => 'narrative',
        'objective_verb_name' => 'objectiveVerbName',
        'quest_type_identifier' => 'questTypeIdentifier',
        'quest_type_hash' => 'questTypeHash',
        'per_objective_display_properties' => 'perObjectiveDisplayProperties',
        'display_as_stat_tracker' => 'displayAsStatTracker'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'objective_hashes' => 'setObjectiveHashes',
        'display_activity_hashes' => 'setDisplayActivityHashes',
        'require_full_objective_completion' => 'setRequireFullObjectiveCompletion',
        'questline_item_hash' => 'setQuestlineItemHash',
        'narrative' => 'setNarrative',
        'objective_verb_name' => 'setObjectiveVerbName',
        'quest_type_identifier' => 'setQuestTypeIdentifier',
        'quest_type_hash' => 'setQuestTypeHash',
        'per_objective_display_properties' => 'setPerObjectiveDisplayProperties',
        'display_as_stat_tracker' => 'setDisplayAsStatTracker'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'objective_hashes' => 'getObjectiveHashes',
        'display_activity_hashes' => 'getDisplayActivityHashes',
        'require_full_objective_completion' => 'getRequireFullObjectiveCompletion',
        'questline_item_hash' => 'getQuestlineItemHash',
        'narrative' => 'getNarrative',
        'objective_verb_name' => 'getObjectiveVerbName',
        'quest_type_identifier' => 'getQuestTypeIdentifier',
        'quest_type_hash' => 'getQuestTypeHash',
        'per_objective_display_properties' => 'getPerObjectiveDisplayProperties',
        'display_as_stat_tracker' => 'getDisplayAsStatTracker'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['objective_hashes'] = $data['objective_hashes'] ?? null;
        $this->container['display_activity_hashes'] = $data['display_activity_hashes'] ?? null;
        $this->container['require_full_objective_completion'] = $data['require_full_objective_completion'] ?? null;
        $this->container['questline_item_hash'] = $data['questline_item_hash'] ?? null;
        $this->container['narrative'] = $data['narrative'] ?? null;
        $this->container['objective_verb_name'] = $data['objective_verb_name'] ?? null;
        $this->container['quest_type_identifier'] = $data['quest_type_identifier'] ?? null;
        $this->container['quest_type_hash'] = $data['quest_type_hash'] ?? null;
        $this->container['per_objective_display_properties'] = $data['per_objective_display_properties'] ?? null;
        $this->container['display_as_stat_tracker'] = $data['display_as_stat_tracker'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets objective_hashes
     *
     * @return int[]|null
     */
    public function getObjectiveHashes()
    {
        return $this->container['objective_hashes'];
    }

    /**
     * Sets objective_hashes
     *
     * @param int[]|null $objective_hashes The hashes to Objectives (DestinyObjectiveDefinition) that are part of this Quest Step, in the order that they should be rendered.
     *
     * @return self
     */
    public function setObjectiveHashes($objective_hashes)
    {
        $this->container['objective_hashes'] = $objective_hashes;

        return $this;
    }

    /**
     * Gets display_activity_hashes
     *
     * @return int[]|null
     */
    public function getDisplayActivityHashes()
    {
        return $this->container['display_activity_hashes'];
    }

    /**
     * Sets display_activity_hashes
     *
     * @param int[]|null $display_activity_hashes For every entry in objectiveHashes, there is a corresponding entry in this array at the same index. If the objective is meant to be associated with a specific DestinyActivityDefinition, there will be a valid hash at that index. Otherwise, it will be invalid (0).  Rendered somewhat obsolete by perObjectiveDisplayProperties, which currently has much the same information but may end up with more info in the future.
     *
     * @return self
     */
    public function setDisplayActivityHashes($display_activity_hashes)
    {
        $this->container['display_activity_hashes'] = $display_activity_hashes;

        return $this;
    }

    /**
     * Gets require_full_objective_completion
     *
     * @return bool|null
     */
    public function getRequireFullObjectiveCompletion()
    {
        return $this->container['require_full_objective_completion'];
    }

    /**
     * Sets require_full_objective_completion
     *
     * @param bool|null $require_full_objective_completion If True, all objectives must be completed for the step to be completed. If False, any one objective can be completed for the step to be completed.
     *
     * @return self
     */
    public function setRequireFullObjectiveCompletion($require_full_objective_completion)
    {
        $this->container['require_full_objective_completion'] = $require_full_objective_completion;

        return $this;
    }

    /**
     * Gets questline_item_hash
     *
     * @return int|null
     */
    public function getQuestlineItemHash()
    {
        return $this->container['questline_item_hash'];
    }

    /**
     * Sets questline_item_hash
     *
     * @param int|null $questline_item_hash The hash for the DestinyInventoryItemDefinition representing the Quest to which this Quest Step belongs.
     *
     * @return self
     */
    public function setQuestlineItemHash($questline_item_hash)
    {
        $this->container['questline_item_hash'] = $questline_item_hash;

        return $this;
    }

    /**
     * Gets narrative
     *
     * @return string|null
     */
    public function getNarrative()
    {
        return $this->container['narrative'];
    }

    /**
     * Sets narrative
     *
     * @param string|null $narrative The localized string for narrative text related to this quest step, if any.
     *
     * @return self
     */
    public function setNarrative($narrative)
    {
        $this->container['narrative'] = $narrative;

        return $this;
    }

    /**
     * Gets objective_verb_name
     *
     * @return string|null
     */
    public function getObjectiveVerbName()
    {
        return $this->container['objective_verb_name'];
    }

    /**
     * Sets objective_verb_name
     *
     * @param string|null $objective_verb_name The localized string describing an action to be performed associated with the objectives, if any.
     *
     * @return self
     */
    public function setObjectiveVerbName($objective_verb_name)
    {
        $this->container['objective_verb_name'] = $objective_verb_name;

        return $this;
    }

    /**
     * Gets quest_type_identifier
     *
     * @return string|null
     */
    public function getQuestTypeIdentifier()
    {
        return $this->container['quest_type_identifier'];
    }

    /**
     * Sets quest_type_identifier
     *
     * @param string|null $quest_type_identifier The identifier for the type of quest being performed, if any. Not associated with any fixed definition, yet.
     *
     * @return self
     */
    public function setQuestTypeIdentifier($quest_type_identifier)
    {
        $this->container['quest_type_identifier'] = $quest_type_identifier;

        return $this;
    }

    /**
     * Gets quest_type_hash
     *
     * @return int|null
     */
    public function getQuestTypeHash()
    {
        return $this->container['quest_type_hash'];
    }

    /**
     * Sets quest_type_hash
     *
     * @param int|null $quest_type_hash A hashed value for the questTypeIdentifier, because apparently I like to be redundant.
     *
     * @return self
     */
    public function setQuestTypeHash($quest_type_hash)
    {
        $this->container['quest_type_hash'] = $quest_type_hash;

        return $this;
    }

    /**
     * Gets per_objective_display_properties
     *
     * @return \OpenAPI\Client\Model\DestinyDefinitionsDestinyObjectiveDisplayProperties[]|null
     */
    public function getPerObjectiveDisplayProperties()
    {
        return $this->container['per_objective_display_properties'];
    }

    /**
     * Sets per_objective_display_properties
     *
     * @param \OpenAPI\Client\Model\DestinyDefinitionsDestinyObjectiveDisplayProperties[]|null $per_objective_display_properties One entry per Objective on the item, it will have related display information.
     *
     * @return self
     */
    public function setPerObjectiveDisplayProperties($per_objective_display_properties)
    {
        $this->container['per_objective_display_properties'] = $per_objective_display_properties;

        return $this;
    }

    /**
     * Gets display_as_stat_tracker
     *
     * @return bool|null
     */
    public function getDisplayAsStatTracker()
    {
        return $this->container['display_as_stat_tracker'];
    }

    /**
     * Sets display_as_stat_tracker
     *
     * @param bool|null $display_as_stat_tracker display_as_stat_tracker
     *
     * @return self
     */
    public function setDisplayAsStatTracker($display_as_stat_tracker)
    {
        $this->container['display_as_stat_tracker'] = $display_as_stat_tracker;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


