<?php
/**
 * TrendingTrendingEntry
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TrendingTrendingEntry Class Doc Comment
 *
 * @category Class
 * @description The list entry view for trending items. Returns just enough to show the item on the trending page.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class TrendingTrendingEntry implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Trending.TrendingEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'weight' => 'double',
        'is_featured' => 'bool',
        'identifier' => 'string',
        'entity_type' => 'int',
        'display_name' => 'string',
        'tagline' => 'string',
        'image' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'link' => 'string',
        'webm_video' => 'string',
        'mp4_video' => 'string',
        'feature_image' => 'string',
        'items' => '\OpenAPI\Client\Model\TrendingTrendingEntry[]',
        'creation_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'weight' => 'double',
        'is_featured' => null,
        'identifier' => null,
        'entity_type' => 'int32',
        'display_name' => null,
        'tagline' => null,
        'image' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'link' => null,
        'webm_video' => null,
        'mp4_video' => null,
        'feature_image' => null,
        'items' => null,
        'creation_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'weight' => 'weight',
        'is_featured' => 'isFeatured',
        'identifier' => 'identifier',
        'entity_type' => 'entityType',
        'display_name' => 'displayName',
        'tagline' => 'tagline',
        'image' => 'image',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'link' => 'link',
        'webm_video' => 'webmVideo',
        'mp4_video' => 'mp4Video',
        'feature_image' => 'featureImage',
        'items' => 'items',
        'creation_date' => 'creationDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'weight' => 'setWeight',
        'is_featured' => 'setIsFeatured',
        'identifier' => 'setIdentifier',
        'entity_type' => 'setEntityType',
        'display_name' => 'setDisplayName',
        'tagline' => 'setTagline',
        'image' => 'setImage',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'link' => 'setLink',
        'webm_video' => 'setWebmVideo',
        'mp4_video' => 'setMp4Video',
        'feature_image' => 'setFeatureImage',
        'items' => 'setItems',
        'creation_date' => 'setCreationDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'weight' => 'getWeight',
        'is_featured' => 'getIsFeatured',
        'identifier' => 'getIdentifier',
        'entity_type' => 'getEntityType',
        'display_name' => 'getDisplayName',
        'tagline' => 'getTagline',
        'image' => 'getImage',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'link' => 'getLink',
        'webm_video' => 'getWebmVideo',
        'mp4_video' => 'getMp4Video',
        'feature_image' => 'getFeatureImage',
        'items' => 'getItems',
        'creation_date' => 'getCreationDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['weight'] = $data['weight'] ?? null;
        $this->container['is_featured'] = $data['is_featured'] ?? null;
        $this->container['identifier'] = $data['identifier'] ?? null;
        $this->container['entity_type'] = $data['entity_type'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['tagline'] = $data['tagline'] ?? null;
        $this->container['image'] = $data['image'] ?? null;
        $this->container['start_date'] = $data['start_date'] ?? null;
        $this->container['end_date'] = $data['end_date'] ?? null;
        $this->container['link'] = $data['link'] ?? null;
        $this->container['webm_video'] = $data['webm_video'] ?? null;
        $this->container['mp4_video'] = $data['mp4_video'] ?? null;
        $this->container['feature_image'] = $data['feature_image'] ?? null;
        $this->container['items'] = $data['items'] ?? null;
        $this->container['creation_date'] = $data['creation_date'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets weight
     *
     * @return double|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param double|null $weight The weighted score of this trending item.
     *
     * @return self
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets is_featured
     *
     * @return bool|null
     */
    public function getIsFeatured()
    {
        return $this->container['is_featured'];
    }

    /**
     * Sets is_featured
     *
     * @param bool|null $is_featured is_featured
     *
     * @return self
     */
    public function setIsFeatured($is_featured)
    {
        $this->container['is_featured'] = $is_featured;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string|null
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string|null $identifier We don't know whether the identifier will be a string, a uint, or a long... so we're going to cast it all to a string. But either way, we need any trending item created to have a single unique identifier for its type.
     *
     * @return self
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets entity_type
     *
     * @return int|null
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     *
     * @param int|null $entity_type An enum - unfortunately - dictating all of the possible kinds of trending items that you might get in your result set, in case you want to do custom rendering or call to get the details of the item.
     *
     * @return self
     */
    public function setEntityType($entity_type)
    {
        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name The localized \"display name/article title/'primary localized identifier'\" of the entity.
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets tagline
     *
     * @return string|null
     */
    public function getTagline()
    {
        return $this->container['tagline'];
    }

    /**
     * Sets tagline
     *
     * @param string|null $tagline If the entity has a localized tagline/subtitle/motto/whatever, that is found here.
     *
     * @return self
     */
    public function setTagline($tagline)
    {
        $this->container['tagline'] = $tagline;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets link
     *
     * @return string|null
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param string|null $link link
     *
     * @return self
     */
    public function setLink($link)
    {
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets webm_video
     *
     * @return string|null
     */
    public function getWebmVideo()
    {
        return $this->container['webm_video'];
    }

    /**
     * Sets webm_video
     *
     * @param string|null $webm_video If this is populated, the entry has a related WebM video to show. I am 100% certain I am going to regret putting this directly on TrendingEntry, but it will work so yolo
     *
     * @return self
     */
    public function setWebmVideo($webm_video)
    {
        $this->container['webm_video'] = $webm_video;

        return $this;
    }

    /**
     * Gets mp4_video
     *
     * @return string|null
     */
    public function getMp4Video()
    {
        return $this->container['mp4_video'];
    }

    /**
     * Sets mp4_video
     *
     * @param string|null $mp4_video If this is populated, the entry has a related MP4 video to show. I am 100% certain I am going to regret putting this directly on TrendingEntry, but it will work so yolo
     *
     * @return self
     */
    public function setMp4Video($mp4_video)
    {
        $this->container['mp4_video'] = $mp4_video;

        return $this;
    }

    /**
     * Gets feature_image
     *
     * @return string|null
     */
    public function getFeatureImage()
    {
        return $this->container['feature_image'];
    }

    /**
     * Sets feature_image
     *
     * @param string|null $feature_image If isFeatured, this image will be populated with whatever the featured image is. Note that this will likely be a very large image, so don't use it all the time.
     *
     * @return self
     */
    public function setFeatureImage($feature_image)
    {
        $this->container['feature_image'] = $feature_image;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \OpenAPI\Client\Model\TrendingTrendingEntry[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \OpenAPI\Client\Model\TrendingTrendingEntry[]|null $items If the item is of entityType TrendingEntryType.Container, it may have items - also Trending Entries - contained within it. This is the ordered list of those to display under the Container's header.
     *
     * @return self
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime|null $creation_date If the entry has a date at which it was created, this is that date.
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


