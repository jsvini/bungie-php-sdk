<?php
/**
 * DestinyResponsesDestinyVendorsResponse
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyResponsesDestinyVendorsResponse Class Doc Comment
 *
 * @category Class
 * @description A response containing all of the components for all requested vendors.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyResponsesDestinyVendorsResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Responses.DestinyVendorsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'vendor_groups' => 'SingleComponentResponseOfDestinyVendorGroupComponent',
        'vendors' => 'DictionaryComponentResponseOfuint32AndDestinyVendorComponent',
        'categories' => 'DictionaryComponentResponseOfuint32AndDestinyVendorCategoriesComponent',
        'sales' => 'DictionaryComponentResponseOfuint32AndPersonalDestinyVendorSaleItemSetComponent',
        'item_components' => 'map[string,\OpenAPI\Client\Model\DestinyItemComponentSetOfint32]',
        'currency_lookups' => 'SingleComponentResponseOfDestinyCurrenciesComponent'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'vendor_groups' => null,
        'vendors' => null,
        'categories' => null,
        'sales' => null,
        'item_components' => null,
        'currency_lookups' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vendor_groups' => 'vendorGroups',
        'vendors' => 'vendors',
        'categories' => 'categories',
        'sales' => 'sales',
        'item_components' => 'itemComponents',
        'currency_lookups' => 'currencyLookups'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vendor_groups' => 'setVendorGroups',
        'vendors' => 'setVendors',
        'categories' => 'setCategories',
        'sales' => 'setSales',
        'item_components' => 'setItemComponents',
        'currency_lookups' => 'setCurrencyLookups'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vendor_groups' => 'getVendorGroups',
        'vendors' => 'getVendors',
        'categories' => 'getCategories',
        'sales' => 'getSales',
        'item_components' => 'getItemComponents',
        'currency_lookups' => 'getCurrencyLookups'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vendor_groups'] = $data['vendor_groups'] ?? null;
        $this->container['vendors'] = $data['vendors'] ?? null;
        $this->container['categories'] = $data['categories'] ?? null;
        $this->container['sales'] = $data['sales'] ?? null;
        $this->container['item_components'] = $data['item_components'] ?? null;
        $this->container['currency_lookups'] = $data['currency_lookups'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vendor_groups
     *
     * @return SingleComponentResponseOfDestinyVendorGroupComponent|null
     */
    public function getVendorGroups()
    {
        return $this->container['vendor_groups'];
    }

    /**
     * Sets vendor_groups
     *
     * @param SingleComponentResponseOfDestinyVendorGroupComponent|null $vendor_groups For Vendors being returned, this will give you the information you need to group them and order them in the same way that the Bungie Companion app performs grouping. It will automatically be returned if you request the Vendors component.  COMPONENT TYPE: Vendors
     *
     * @return self
     */
    public function setVendorGroups($vendor_groups)
    {
        $this->container['vendor_groups'] = $vendor_groups;

        return $this;
    }

    /**
     * Gets vendors
     *
     * @return DictionaryComponentResponseOfuint32AndDestinyVendorComponent|null
     */
    public function getVendors()
    {
        return $this->container['vendors'];
    }

    /**
     * Sets vendors
     *
     * @param DictionaryComponentResponseOfuint32AndDestinyVendorComponent|null $vendors The base properties of the vendor. These are keyed by the Vendor Hash, so you will get one Vendor Component per vendor returned.  COMPONENT TYPE: Vendors
     *
     * @return self
     */
    public function setVendors($vendors)
    {
        $this->container['vendors'] = $vendors;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return DictionaryComponentResponseOfuint32AndDestinyVendorCategoriesComponent|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param DictionaryComponentResponseOfuint32AndDestinyVendorCategoriesComponent|null $categories Categories that the vendor has available, and references to the sales therein. These are keyed by the Vendor Hash, so you will get one Categories Component per vendor returned.  COMPONENT TYPE: VendorCategories
     *
     * @return self
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets sales
     *
     * @return DictionaryComponentResponseOfuint32AndPersonalDestinyVendorSaleItemSetComponent|null
     */
    public function getSales()
    {
        return $this->container['sales'];
    }

    /**
     * Sets sales
     *
     * @param DictionaryComponentResponseOfuint32AndPersonalDestinyVendorSaleItemSetComponent|null $sales Sales, keyed by the vendorItemIndex of the item being sold. These are keyed by the Vendor Hash, so you will get one Sale Item Set Component per vendor returned.  Note that within the Sale Item Set component, the sales are themselves keyed by the vendorSaleIndex, so you can relate it to the corrent sale item definition within the Vendor's definition.  COMPONENT TYPE: VendorSales
     *
     * @return self
     */
    public function setSales($sales)
    {
        $this->container['sales'] = $sales;

        return $this;
    }

    /**
     * Gets item_components
     *
     * @return map[string,\OpenAPI\Client\Model\DestinyItemComponentSetOfint32]|null
     */
    public function getItemComponents()
    {
        return $this->container['item_components'];
    }

    /**
     * Sets item_components
     *
     * @param map[string,\OpenAPI\Client\Model\DestinyItemComponentSetOfint32]|null $item_components The set of item detail components, one set of item components per Vendor. These are keyed by the Vendor Hash, so you will get one Item Component Set per vendor returned.  The components contained inside are themselves keyed by the vendorSaleIndex, and will have whatever item-level components you requested (Sockets, Stats, Instance data etc...) per item being sold by the vendor.
     *
     * @return self
     */
    public function setItemComponents($item_components)
    {
        $this->container['item_components'] = $item_components;

        return $this;
    }

    /**
     * Gets currency_lookups
     *
     * @return SingleComponentResponseOfDestinyCurrenciesComponent|null
     */
    public function getCurrencyLookups()
    {
        return $this->container['currency_lookups'];
    }

    /**
     * Sets currency_lookups
     *
     * @param SingleComponentResponseOfDestinyCurrenciesComponent|null $currency_lookups A \"lookup\" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.  COMPONENT TYPE: CurrencyLookups
     *
     * @return self
     */
    public function setCurrencyLookups($currency_lookups)
    {
        $this->container['currency_lookups'] = $currency_lookups;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


