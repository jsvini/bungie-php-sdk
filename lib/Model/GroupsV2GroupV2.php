<?php
/**
 * GroupsV2GroupV2
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GroupsV2GroupV2 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class GroupsV2GroupV2 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GroupsV2.GroupV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'group_id' => 'int',
        'name' => 'string',
        'group_type' => 'int',
        'membership_id_created' => 'int',
        'creation_date' => '\DateTime',
        'modification_date' => '\DateTime',
        'about' => 'string',
        'tags' => 'string[]',
        'member_count' => 'int',
        'is_public' => 'bool',
        'is_public_topic_admin_only' => 'bool',
        'motto' => 'string',
        'allow_chat' => 'bool',
        'is_default_post_public' => 'bool',
        'chat_security' => 'int',
        'locale' => 'string',
        'avatar_image_index' => 'int',
        'homepage' => 'int',
        'membership_option' => 'int',
        'default_publicity' => 'int',
        'theme' => 'string',
        'banner_path' => 'string',
        'avatar_path' => 'string',
        'conversation_id' => 'int',
        'enable_invitation_messaging_for_admins' => 'bool',
        'ban_expire_date' => '\DateTime',
        'features' => '\OpenAPI\Client\Model\GroupsV2GroupFeatures',
        'clan_info' => '\OpenAPI\Client\Model\GroupsV2GroupV2ClanInfoAndInvestment'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'group_id' => 'int64',
        'name' => null,
        'group_type' => 'int32',
        'membership_id_created' => 'int64',
        'creation_date' => 'date-time',
        'modification_date' => 'date-time',
        'about' => null,
        'tags' => null,
        'member_count' => 'int32',
        'is_public' => null,
        'is_public_topic_admin_only' => null,
        'motto' => null,
        'allow_chat' => null,
        'is_default_post_public' => null,
        'chat_security' => 'int32',
        'locale' => null,
        'avatar_image_index' => 'int32',
        'homepage' => 'int32',
        'membership_option' => 'int32',
        'default_publicity' => 'int32',
        'theme' => null,
        'banner_path' => null,
        'avatar_path' => null,
        'conversation_id' => 'int64',
        'enable_invitation_messaging_for_admins' => null,
        'ban_expire_date' => 'date-time',
        'features' => null,
        'clan_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'group_id' => 'groupId',
        'name' => 'name',
        'group_type' => 'groupType',
        'membership_id_created' => 'membershipIdCreated',
        'creation_date' => 'creationDate',
        'modification_date' => 'modificationDate',
        'about' => 'about',
        'tags' => 'tags',
        'member_count' => 'memberCount',
        'is_public' => 'isPublic',
        'is_public_topic_admin_only' => 'isPublicTopicAdminOnly',
        'motto' => 'motto',
        'allow_chat' => 'allowChat',
        'is_default_post_public' => 'isDefaultPostPublic',
        'chat_security' => 'chatSecurity',
        'locale' => 'locale',
        'avatar_image_index' => 'avatarImageIndex',
        'homepage' => 'homepage',
        'membership_option' => 'membershipOption',
        'default_publicity' => 'defaultPublicity',
        'theme' => 'theme',
        'banner_path' => 'bannerPath',
        'avatar_path' => 'avatarPath',
        'conversation_id' => 'conversationId',
        'enable_invitation_messaging_for_admins' => 'enableInvitationMessagingForAdmins',
        'ban_expire_date' => 'banExpireDate',
        'features' => 'features',
        'clan_info' => 'clanInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'group_id' => 'setGroupId',
        'name' => 'setName',
        'group_type' => 'setGroupType',
        'membership_id_created' => 'setMembershipIdCreated',
        'creation_date' => 'setCreationDate',
        'modification_date' => 'setModificationDate',
        'about' => 'setAbout',
        'tags' => 'setTags',
        'member_count' => 'setMemberCount',
        'is_public' => 'setIsPublic',
        'is_public_topic_admin_only' => 'setIsPublicTopicAdminOnly',
        'motto' => 'setMotto',
        'allow_chat' => 'setAllowChat',
        'is_default_post_public' => 'setIsDefaultPostPublic',
        'chat_security' => 'setChatSecurity',
        'locale' => 'setLocale',
        'avatar_image_index' => 'setAvatarImageIndex',
        'homepage' => 'setHomepage',
        'membership_option' => 'setMembershipOption',
        'default_publicity' => 'setDefaultPublicity',
        'theme' => 'setTheme',
        'banner_path' => 'setBannerPath',
        'avatar_path' => 'setAvatarPath',
        'conversation_id' => 'setConversationId',
        'enable_invitation_messaging_for_admins' => 'setEnableInvitationMessagingForAdmins',
        'ban_expire_date' => 'setBanExpireDate',
        'features' => 'setFeatures',
        'clan_info' => 'setClanInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'group_id' => 'getGroupId',
        'name' => 'getName',
        'group_type' => 'getGroupType',
        'membership_id_created' => 'getMembershipIdCreated',
        'creation_date' => 'getCreationDate',
        'modification_date' => 'getModificationDate',
        'about' => 'getAbout',
        'tags' => 'getTags',
        'member_count' => 'getMemberCount',
        'is_public' => 'getIsPublic',
        'is_public_topic_admin_only' => 'getIsPublicTopicAdminOnly',
        'motto' => 'getMotto',
        'allow_chat' => 'getAllowChat',
        'is_default_post_public' => 'getIsDefaultPostPublic',
        'chat_security' => 'getChatSecurity',
        'locale' => 'getLocale',
        'avatar_image_index' => 'getAvatarImageIndex',
        'homepage' => 'getHomepage',
        'membership_option' => 'getMembershipOption',
        'default_publicity' => 'getDefaultPublicity',
        'theme' => 'getTheme',
        'banner_path' => 'getBannerPath',
        'avatar_path' => 'getAvatarPath',
        'conversation_id' => 'getConversationId',
        'enable_invitation_messaging_for_admins' => 'getEnableInvitationMessagingForAdmins',
        'ban_expire_date' => 'getBanExpireDate',
        'features' => 'getFeatures',
        'clan_info' => 'getClanInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['group_id'] = $data['group_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['group_type'] = $data['group_type'] ?? null;
        $this->container['membership_id_created'] = $data['membership_id_created'] ?? null;
        $this->container['creation_date'] = $data['creation_date'] ?? null;
        $this->container['modification_date'] = $data['modification_date'] ?? null;
        $this->container['about'] = $data['about'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['member_count'] = $data['member_count'] ?? null;
        $this->container['is_public'] = $data['is_public'] ?? null;
        $this->container['is_public_topic_admin_only'] = $data['is_public_topic_admin_only'] ?? null;
        $this->container['motto'] = $data['motto'] ?? null;
        $this->container['allow_chat'] = $data['allow_chat'] ?? null;
        $this->container['is_default_post_public'] = $data['is_default_post_public'] ?? null;
        $this->container['chat_security'] = $data['chat_security'] ?? null;
        $this->container['locale'] = $data['locale'] ?? null;
        $this->container['avatar_image_index'] = $data['avatar_image_index'] ?? null;
        $this->container['homepage'] = $data['homepage'] ?? null;
        $this->container['membership_option'] = $data['membership_option'] ?? null;
        $this->container['default_publicity'] = $data['default_publicity'] ?? null;
        $this->container['theme'] = $data['theme'] ?? null;
        $this->container['banner_path'] = $data['banner_path'] ?? null;
        $this->container['avatar_path'] = $data['avatar_path'] ?? null;
        $this->container['conversation_id'] = $data['conversation_id'] ?? null;
        $this->container['enable_invitation_messaging_for_admins'] = $data['enable_invitation_messaging_for_admins'] ?? null;
        $this->container['ban_expire_date'] = $data['ban_expire_date'] ?? null;
        $this->container['features'] = $data['features'] ?? null;
        $this->container['clan_info'] = $data['clan_info'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets group_id
     *
     * @return int|null
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param int|null $group_id group_id
     *
     * @return self
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets group_type
     *
     * @return int|null
     */
    public function getGroupType()
    {
        return $this->container['group_type'];
    }

    /**
     * Sets group_type
     *
     * @param int|null $group_type group_type
     *
     * @return self
     */
    public function setGroupType($group_type)
    {
        $this->container['group_type'] = $group_type;

        return $this;
    }

    /**
     * Gets membership_id_created
     *
     * @return int|null
     */
    public function getMembershipIdCreated()
    {
        return $this->container['membership_id_created'];
    }

    /**
     * Sets membership_id_created
     *
     * @param int|null $membership_id_created membership_id_created
     *
     * @return self
     */
    public function setMembershipIdCreated($membership_id_created)
    {
        $this->container['membership_id_created'] = $membership_id_created;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime|null $creation_date creation_date
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets modification_date
     *
     * @return \DateTime|null
     */
    public function getModificationDate()
    {
        return $this->container['modification_date'];
    }

    /**
     * Sets modification_date
     *
     * @param \DateTime|null $modification_date modification_date
     *
     * @return self
     */
    public function setModificationDate($modification_date)
    {
        $this->container['modification_date'] = $modification_date;

        return $this;
    }

    /**
     * Gets about
     *
     * @return string|null
     */
    public function getAbout()
    {
        return $this->container['about'];
    }

    /**
     * Sets about
     *
     * @param string|null $about about
     *
     * @return self
     */
    public function setAbout($about)
    {
        $this->container['about'] = $about;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets member_count
     *
     * @return int|null
     */
    public function getMemberCount()
    {
        return $this->container['member_count'];
    }

    /**
     * Sets member_count
     *
     * @param int|null $member_count member_count
     *
     * @return self
     */
    public function setMemberCount($member_count)
    {
        $this->container['member_count'] = $member_count;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool|null
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool|null $is_public is_public
     *
     * @return self
     */
    public function setIsPublic($is_public)
    {
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets is_public_topic_admin_only
     *
     * @return bool|null
     */
    public function getIsPublicTopicAdminOnly()
    {
        return $this->container['is_public_topic_admin_only'];
    }

    /**
     * Sets is_public_topic_admin_only
     *
     * @param bool|null $is_public_topic_admin_only is_public_topic_admin_only
     *
     * @return self
     */
    public function setIsPublicTopicAdminOnly($is_public_topic_admin_only)
    {
        $this->container['is_public_topic_admin_only'] = $is_public_topic_admin_only;

        return $this;
    }

    /**
     * Gets motto
     *
     * @return string|null
     */
    public function getMotto()
    {
        return $this->container['motto'];
    }

    /**
     * Sets motto
     *
     * @param string|null $motto motto
     *
     * @return self
     */
    public function setMotto($motto)
    {
        $this->container['motto'] = $motto;

        return $this;
    }

    /**
     * Gets allow_chat
     *
     * @return bool|null
     */
    public function getAllowChat()
    {
        return $this->container['allow_chat'];
    }

    /**
     * Sets allow_chat
     *
     * @param bool|null $allow_chat allow_chat
     *
     * @return self
     */
    public function setAllowChat($allow_chat)
    {
        $this->container['allow_chat'] = $allow_chat;

        return $this;
    }

    /**
     * Gets is_default_post_public
     *
     * @return bool|null
     */
    public function getIsDefaultPostPublic()
    {
        return $this->container['is_default_post_public'];
    }

    /**
     * Sets is_default_post_public
     *
     * @param bool|null $is_default_post_public is_default_post_public
     *
     * @return self
     */
    public function setIsDefaultPostPublic($is_default_post_public)
    {
        $this->container['is_default_post_public'] = $is_default_post_public;

        return $this;
    }

    /**
     * Gets chat_security
     *
     * @return int|null
     */
    public function getChatSecurity()
    {
        return $this->container['chat_security'];
    }

    /**
     * Sets chat_security
     *
     * @param int|null $chat_security chat_security
     *
     * @return self
     */
    public function setChatSecurity($chat_security)
    {
        $this->container['chat_security'] = $chat_security;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale locale
     *
     * @return self
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets avatar_image_index
     *
     * @return int|null
     */
    public function getAvatarImageIndex()
    {
        return $this->container['avatar_image_index'];
    }

    /**
     * Sets avatar_image_index
     *
     * @param int|null $avatar_image_index avatar_image_index
     *
     * @return self
     */
    public function setAvatarImageIndex($avatar_image_index)
    {
        $this->container['avatar_image_index'] = $avatar_image_index;

        return $this;
    }

    /**
     * Gets homepage
     *
     * @return int|null
     */
    public function getHomepage()
    {
        return $this->container['homepage'];
    }

    /**
     * Sets homepage
     *
     * @param int|null $homepage homepage
     *
     * @return self
     */
    public function setHomepage($homepage)
    {
        $this->container['homepage'] = $homepage;

        return $this;
    }

    /**
     * Gets membership_option
     *
     * @return int|null
     */
    public function getMembershipOption()
    {
        return $this->container['membership_option'];
    }

    /**
     * Sets membership_option
     *
     * @param int|null $membership_option membership_option
     *
     * @return self
     */
    public function setMembershipOption($membership_option)
    {
        $this->container['membership_option'] = $membership_option;

        return $this;
    }

    /**
     * Gets default_publicity
     *
     * @return int|null
     */
    public function getDefaultPublicity()
    {
        return $this->container['default_publicity'];
    }

    /**
     * Sets default_publicity
     *
     * @param int|null $default_publicity default_publicity
     *
     * @return self
     */
    public function setDefaultPublicity($default_publicity)
    {
        $this->container['default_publicity'] = $default_publicity;

        return $this;
    }

    /**
     * Gets theme
     *
     * @return string|null
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     *
     * @param string|null $theme theme
     *
     * @return self
     */
    public function setTheme($theme)
    {
        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets banner_path
     *
     * @return string|null
     */
    public function getBannerPath()
    {
        return $this->container['banner_path'];
    }

    /**
     * Sets banner_path
     *
     * @param string|null $banner_path banner_path
     *
     * @return self
     */
    public function setBannerPath($banner_path)
    {
        $this->container['banner_path'] = $banner_path;

        return $this;
    }

    /**
     * Gets avatar_path
     *
     * @return string|null
     */
    public function getAvatarPath()
    {
        return $this->container['avatar_path'];
    }

    /**
     * Sets avatar_path
     *
     * @param string|null $avatar_path avatar_path
     *
     * @return self
     */
    public function setAvatarPath($avatar_path)
    {
        $this->container['avatar_path'] = $avatar_path;

        return $this;
    }

    /**
     * Gets conversation_id
     *
     * @return int|null
     */
    public function getConversationId()
    {
        return $this->container['conversation_id'];
    }

    /**
     * Sets conversation_id
     *
     * @param int|null $conversation_id conversation_id
     *
     * @return self
     */
    public function setConversationId($conversation_id)
    {
        $this->container['conversation_id'] = $conversation_id;

        return $this;
    }

    /**
     * Gets enable_invitation_messaging_for_admins
     *
     * @return bool|null
     */
    public function getEnableInvitationMessagingForAdmins()
    {
        return $this->container['enable_invitation_messaging_for_admins'];
    }

    /**
     * Sets enable_invitation_messaging_for_admins
     *
     * @param bool|null $enable_invitation_messaging_for_admins enable_invitation_messaging_for_admins
     *
     * @return self
     */
    public function setEnableInvitationMessagingForAdmins($enable_invitation_messaging_for_admins)
    {
        $this->container['enable_invitation_messaging_for_admins'] = $enable_invitation_messaging_for_admins;

        return $this;
    }

    /**
     * Gets ban_expire_date
     *
     * @return \DateTime|null
     */
    public function getBanExpireDate()
    {
        return $this->container['ban_expire_date'];
    }

    /**
     * Sets ban_expire_date
     *
     * @param \DateTime|null $ban_expire_date ban_expire_date
     *
     * @return self
     */
    public function setBanExpireDate($ban_expire_date)
    {
        $this->container['ban_expire_date'] = $ban_expire_date;

        return $this;
    }

    /**
     * Gets features
     *
     * @return \OpenAPI\Client\Model\GroupsV2GroupFeatures|null
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param \OpenAPI\Client\Model\GroupsV2GroupFeatures|null $features features
     *
     * @return self
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets clan_info
     *
     * @return \OpenAPI\Client\Model\GroupsV2GroupV2ClanInfoAndInvestment|null
     */
    public function getClanInfo()
    {
        return $this->container['clan_info'];
    }

    /**
     * Sets clan_info
     *
     * @param \OpenAPI\Client\Model\GroupsV2GroupV2ClanInfoAndInvestment|null $clan_info clan_info
     *
     * @return self
     */
    public function setClanInfo($clan_info)
    {
        $this->container['clan_info'] = $clan_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


