<?php
/**
 * ContentModelsContentTypeProperty
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ContentModelsContentTypeProperty Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ContentModelsContentTypeProperty implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Content.Models.ContentTypeProperty';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'root_property_name' => 'string',
        'readable_name' => 'string',
        'value' => 'string',
        'property_description' => 'string',
        'localizable' => 'bool',
        'fallback' => 'bool',
        'enabled' => 'bool',
        'order' => 'int',
        'visible' => 'bool',
        'is_title' => 'bool',
        'required' => 'bool',
        'max_length' => 'int',
        'max_byte_length' => 'int',
        'max_file_size' => 'int',
        'regexp' => 'string',
        'validate_as' => 'string',
        'rss_attribute' => 'string',
        'visible_dependency' => 'string',
        'visible_on' => 'string',
        'datatype' => 'int',
        'attributes' => 'map[string,string]',
        'child_properties' => '\OpenAPI\Client\Model\ContentModelsContentTypeProperty[]',
        'content_type_allowed' => 'string',
        'bind_to_property' => 'string',
        'bound_regex' => 'string',
        'representation_selection' => 'map[string,string]',
        'default_values' => '\OpenAPI\Client\Model\ContentModelsContentTypeDefaultValue[]',
        'is_external_allowed' => 'bool',
        'property_section' => 'string',
        'weight' => 'int',
        'entitytype' => 'string',
        'is_combo' => 'bool',
        'suppress_property' => 'bool',
        'legal_content_types' => 'string[]',
        'representation_validation_string' => 'string',
        'min_width' => 'int',
        'max_width' => 'int',
        'min_height' => 'int',
        'max_height' => 'int',
        'is_video' => 'bool',
        'is_image' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'root_property_name' => null,
        'readable_name' => null,
        'value' => null,
        'property_description' => null,
        'localizable' => null,
        'fallback' => null,
        'enabled' => null,
        'order' => 'int32',
        'visible' => null,
        'is_title' => null,
        'required' => null,
        'max_length' => 'int32',
        'max_byte_length' => 'int32',
        'max_file_size' => 'int32',
        'regexp' => null,
        'validate_as' => null,
        'rss_attribute' => null,
        'visible_dependency' => null,
        'visible_on' => null,
        'datatype' => 'int32',
        'attributes' => null,
        'child_properties' => null,
        'content_type_allowed' => null,
        'bind_to_property' => null,
        'bound_regex' => null,
        'representation_selection' => null,
        'default_values' => null,
        'is_external_allowed' => null,
        'property_section' => null,
        'weight' => 'int32',
        'entitytype' => null,
        'is_combo' => null,
        'suppress_property' => null,
        'legal_content_types' => null,
        'representation_validation_string' => null,
        'min_width' => 'int32',
        'max_width' => 'int32',
        'min_height' => 'int32',
        'max_height' => 'int32',
        'is_video' => null,
        'is_image' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'root_property_name' => 'rootPropertyName',
        'readable_name' => 'readableName',
        'value' => 'value',
        'property_description' => 'propertyDescription',
        'localizable' => 'localizable',
        'fallback' => 'fallback',
        'enabled' => 'enabled',
        'order' => 'order',
        'visible' => 'visible',
        'is_title' => 'isTitle',
        'required' => 'required',
        'max_length' => 'maxLength',
        'max_byte_length' => 'maxByteLength',
        'max_file_size' => 'maxFileSize',
        'regexp' => 'regexp',
        'validate_as' => 'validateAs',
        'rss_attribute' => 'rssAttribute',
        'visible_dependency' => 'visibleDependency',
        'visible_on' => 'visibleOn',
        'datatype' => 'datatype',
        'attributes' => 'attributes',
        'child_properties' => 'childProperties',
        'content_type_allowed' => 'contentTypeAllowed',
        'bind_to_property' => 'bindToProperty',
        'bound_regex' => 'boundRegex',
        'representation_selection' => 'representationSelection',
        'default_values' => 'defaultValues',
        'is_external_allowed' => 'isExternalAllowed',
        'property_section' => 'propertySection',
        'weight' => 'weight',
        'entitytype' => 'entitytype',
        'is_combo' => 'isCombo',
        'suppress_property' => 'suppressProperty',
        'legal_content_types' => 'legalContentTypes',
        'representation_validation_string' => 'representationValidationString',
        'min_width' => 'minWidth',
        'max_width' => 'maxWidth',
        'min_height' => 'minHeight',
        'max_height' => 'maxHeight',
        'is_video' => 'isVideo',
        'is_image' => 'isImage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'root_property_name' => 'setRootPropertyName',
        'readable_name' => 'setReadableName',
        'value' => 'setValue',
        'property_description' => 'setPropertyDescription',
        'localizable' => 'setLocalizable',
        'fallback' => 'setFallback',
        'enabled' => 'setEnabled',
        'order' => 'setOrder',
        'visible' => 'setVisible',
        'is_title' => 'setIsTitle',
        'required' => 'setRequired',
        'max_length' => 'setMaxLength',
        'max_byte_length' => 'setMaxByteLength',
        'max_file_size' => 'setMaxFileSize',
        'regexp' => 'setRegexp',
        'validate_as' => 'setValidateAs',
        'rss_attribute' => 'setRssAttribute',
        'visible_dependency' => 'setVisibleDependency',
        'visible_on' => 'setVisibleOn',
        'datatype' => 'setDatatype',
        'attributes' => 'setAttributes',
        'child_properties' => 'setChildProperties',
        'content_type_allowed' => 'setContentTypeAllowed',
        'bind_to_property' => 'setBindToProperty',
        'bound_regex' => 'setBoundRegex',
        'representation_selection' => 'setRepresentationSelection',
        'default_values' => 'setDefaultValues',
        'is_external_allowed' => 'setIsExternalAllowed',
        'property_section' => 'setPropertySection',
        'weight' => 'setWeight',
        'entitytype' => 'setEntitytype',
        'is_combo' => 'setIsCombo',
        'suppress_property' => 'setSuppressProperty',
        'legal_content_types' => 'setLegalContentTypes',
        'representation_validation_string' => 'setRepresentationValidationString',
        'min_width' => 'setMinWidth',
        'max_width' => 'setMaxWidth',
        'min_height' => 'setMinHeight',
        'max_height' => 'setMaxHeight',
        'is_video' => 'setIsVideo',
        'is_image' => 'setIsImage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'root_property_name' => 'getRootPropertyName',
        'readable_name' => 'getReadableName',
        'value' => 'getValue',
        'property_description' => 'getPropertyDescription',
        'localizable' => 'getLocalizable',
        'fallback' => 'getFallback',
        'enabled' => 'getEnabled',
        'order' => 'getOrder',
        'visible' => 'getVisible',
        'is_title' => 'getIsTitle',
        'required' => 'getRequired',
        'max_length' => 'getMaxLength',
        'max_byte_length' => 'getMaxByteLength',
        'max_file_size' => 'getMaxFileSize',
        'regexp' => 'getRegexp',
        'validate_as' => 'getValidateAs',
        'rss_attribute' => 'getRssAttribute',
        'visible_dependency' => 'getVisibleDependency',
        'visible_on' => 'getVisibleOn',
        'datatype' => 'getDatatype',
        'attributes' => 'getAttributes',
        'child_properties' => 'getChildProperties',
        'content_type_allowed' => 'getContentTypeAllowed',
        'bind_to_property' => 'getBindToProperty',
        'bound_regex' => 'getBoundRegex',
        'representation_selection' => 'getRepresentationSelection',
        'default_values' => 'getDefaultValues',
        'is_external_allowed' => 'getIsExternalAllowed',
        'property_section' => 'getPropertySection',
        'weight' => 'getWeight',
        'entitytype' => 'getEntitytype',
        'is_combo' => 'getIsCombo',
        'suppress_property' => 'getSuppressProperty',
        'legal_content_types' => 'getLegalContentTypes',
        'representation_validation_string' => 'getRepresentationValidationString',
        'min_width' => 'getMinWidth',
        'max_width' => 'getMaxWidth',
        'min_height' => 'getMinHeight',
        'max_height' => 'getMaxHeight',
        'is_video' => 'getIsVideo',
        'is_image' => 'getIsImage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['root_property_name'] = $data['root_property_name'] ?? null;
        $this->container['readable_name'] = $data['readable_name'] ?? null;
        $this->container['value'] = $data['value'] ?? null;
        $this->container['property_description'] = $data['property_description'] ?? null;
        $this->container['localizable'] = $data['localizable'] ?? null;
        $this->container['fallback'] = $data['fallback'] ?? null;
        $this->container['enabled'] = $data['enabled'] ?? null;
        $this->container['order'] = $data['order'] ?? null;
        $this->container['visible'] = $data['visible'] ?? null;
        $this->container['is_title'] = $data['is_title'] ?? null;
        $this->container['required'] = $data['required'] ?? null;
        $this->container['max_length'] = $data['max_length'] ?? null;
        $this->container['max_byte_length'] = $data['max_byte_length'] ?? null;
        $this->container['max_file_size'] = $data['max_file_size'] ?? null;
        $this->container['regexp'] = $data['regexp'] ?? null;
        $this->container['validate_as'] = $data['validate_as'] ?? null;
        $this->container['rss_attribute'] = $data['rss_attribute'] ?? null;
        $this->container['visible_dependency'] = $data['visible_dependency'] ?? null;
        $this->container['visible_on'] = $data['visible_on'] ?? null;
        $this->container['datatype'] = $data['datatype'] ?? null;
        $this->container['attributes'] = $data['attributes'] ?? null;
        $this->container['child_properties'] = $data['child_properties'] ?? null;
        $this->container['content_type_allowed'] = $data['content_type_allowed'] ?? null;
        $this->container['bind_to_property'] = $data['bind_to_property'] ?? null;
        $this->container['bound_regex'] = $data['bound_regex'] ?? null;
        $this->container['representation_selection'] = $data['representation_selection'] ?? null;
        $this->container['default_values'] = $data['default_values'] ?? null;
        $this->container['is_external_allowed'] = $data['is_external_allowed'] ?? null;
        $this->container['property_section'] = $data['property_section'] ?? null;
        $this->container['weight'] = $data['weight'] ?? null;
        $this->container['entitytype'] = $data['entitytype'] ?? null;
        $this->container['is_combo'] = $data['is_combo'] ?? null;
        $this->container['suppress_property'] = $data['suppress_property'] ?? null;
        $this->container['legal_content_types'] = $data['legal_content_types'] ?? null;
        $this->container['representation_validation_string'] = $data['representation_validation_string'] ?? null;
        $this->container['min_width'] = $data['min_width'] ?? null;
        $this->container['max_width'] = $data['max_width'] ?? null;
        $this->container['min_height'] = $data['min_height'] ?? null;
        $this->container['max_height'] = $data['max_height'] ?? null;
        $this->container['is_video'] = $data['is_video'] ?? null;
        $this->container['is_image'] = $data['is_image'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets root_property_name
     *
     * @return string|null
     */
    public function getRootPropertyName()
    {
        return $this->container['root_property_name'];
    }

    /**
     * Sets root_property_name
     *
     * @param string|null $root_property_name root_property_name
     *
     * @return self
     */
    public function setRootPropertyName($root_property_name)
    {
        $this->container['root_property_name'] = $root_property_name;

        return $this;
    }

    /**
     * Gets readable_name
     *
     * @return string|null
     */
    public function getReadableName()
    {
        return $this->container['readable_name'];
    }

    /**
     * Sets readable_name
     *
     * @param string|null $readable_name readable_name
     *
     * @return self
     */
    public function setReadableName($readable_name)
    {
        $this->container['readable_name'] = $readable_name;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets property_description
     *
     * @return string|null
     */
    public function getPropertyDescription()
    {
        return $this->container['property_description'];
    }

    /**
     * Sets property_description
     *
     * @param string|null $property_description property_description
     *
     * @return self
     */
    public function setPropertyDescription($property_description)
    {
        $this->container['property_description'] = $property_description;

        return $this;
    }

    /**
     * Gets localizable
     *
     * @return bool|null
     */
    public function getLocalizable()
    {
        return $this->container['localizable'];
    }

    /**
     * Sets localizable
     *
     * @param bool|null $localizable localizable
     *
     * @return self
     */
    public function setLocalizable($localizable)
    {
        $this->container['localizable'] = $localizable;

        return $this;
    }

    /**
     * Gets fallback
     *
     * @return bool|null
     */
    public function getFallback()
    {
        return $this->container['fallback'];
    }

    /**
     * Sets fallback
     *
     * @param bool|null $fallback fallback
     *
     * @return self
     */
    public function setFallback($fallback)
    {
        $this->container['fallback'] = $fallback;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return bool|null
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param bool|null $visible visible
     *
     * @return self
     */
    public function setVisible($visible)
    {
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets is_title
     *
     * @return bool|null
     */
    public function getIsTitle()
    {
        return $this->container['is_title'];
    }

    /**
     * Sets is_title
     *
     * @param bool|null $is_title is_title
     *
     * @return self
     */
    public function setIsTitle($is_title)
    {
        $this->container['is_title'] = $is_title;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool|null
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool|null $required required
     *
     * @return self
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets max_length
     *
     * @return int|null
     */
    public function getMaxLength()
    {
        return $this->container['max_length'];
    }

    /**
     * Sets max_length
     *
     * @param int|null $max_length max_length
     *
     * @return self
     */
    public function setMaxLength($max_length)
    {
        $this->container['max_length'] = $max_length;

        return $this;
    }

    /**
     * Gets max_byte_length
     *
     * @return int|null
     */
    public function getMaxByteLength()
    {
        return $this->container['max_byte_length'];
    }

    /**
     * Sets max_byte_length
     *
     * @param int|null $max_byte_length max_byte_length
     *
     * @return self
     */
    public function setMaxByteLength($max_byte_length)
    {
        $this->container['max_byte_length'] = $max_byte_length;

        return $this;
    }

    /**
     * Gets max_file_size
     *
     * @return int|null
     */
    public function getMaxFileSize()
    {
        return $this->container['max_file_size'];
    }

    /**
     * Sets max_file_size
     *
     * @param int|null $max_file_size max_file_size
     *
     * @return self
     */
    public function setMaxFileSize($max_file_size)
    {
        $this->container['max_file_size'] = $max_file_size;

        return $this;
    }

    /**
     * Gets regexp
     *
     * @return string|null
     */
    public function getRegexp()
    {
        return $this->container['regexp'];
    }

    /**
     * Sets regexp
     *
     * @param string|null $regexp regexp
     *
     * @return self
     */
    public function setRegexp($regexp)
    {
        $this->container['regexp'] = $regexp;

        return $this;
    }

    /**
     * Gets validate_as
     *
     * @return string|null
     */
    public function getValidateAs()
    {
        return $this->container['validate_as'];
    }

    /**
     * Sets validate_as
     *
     * @param string|null $validate_as validate_as
     *
     * @return self
     */
    public function setValidateAs($validate_as)
    {
        $this->container['validate_as'] = $validate_as;

        return $this;
    }

    /**
     * Gets rss_attribute
     *
     * @return string|null
     */
    public function getRssAttribute()
    {
        return $this->container['rss_attribute'];
    }

    /**
     * Sets rss_attribute
     *
     * @param string|null $rss_attribute rss_attribute
     *
     * @return self
     */
    public function setRssAttribute($rss_attribute)
    {
        $this->container['rss_attribute'] = $rss_attribute;

        return $this;
    }

    /**
     * Gets visible_dependency
     *
     * @return string|null
     */
    public function getVisibleDependency()
    {
        return $this->container['visible_dependency'];
    }

    /**
     * Sets visible_dependency
     *
     * @param string|null $visible_dependency visible_dependency
     *
     * @return self
     */
    public function setVisibleDependency($visible_dependency)
    {
        $this->container['visible_dependency'] = $visible_dependency;

        return $this;
    }

    /**
     * Gets visible_on
     *
     * @return string|null
     */
    public function getVisibleOn()
    {
        return $this->container['visible_on'];
    }

    /**
     * Sets visible_on
     *
     * @param string|null $visible_on visible_on
     *
     * @return self
     */
    public function setVisibleOn($visible_on)
    {
        $this->container['visible_on'] = $visible_on;

        return $this;
    }

    /**
     * Gets datatype
     *
     * @return int|null
     */
    public function getDatatype()
    {
        return $this->container['datatype'];
    }

    /**
     * Sets datatype
     *
     * @param int|null $datatype datatype
     *
     * @return self
     */
    public function setDatatype($datatype)
    {
        $this->container['datatype'] = $datatype;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return map[string,string]|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param map[string,string]|null $attributes attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets child_properties
     *
     * @return \OpenAPI\Client\Model\ContentModelsContentTypeProperty[]|null
     */
    public function getChildProperties()
    {
        return $this->container['child_properties'];
    }

    /**
     * Sets child_properties
     *
     * @param \OpenAPI\Client\Model\ContentModelsContentTypeProperty[]|null $child_properties child_properties
     *
     * @return self
     */
    public function setChildProperties($child_properties)
    {
        $this->container['child_properties'] = $child_properties;

        return $this;
    }

    /**
     * Gets content_type_allowed
     *
     * @return string|null
     */
    public function getContentTypeAllowed()
    {
        return $this->container['content_type_allowed'];
    }

    /**
     * Sets content_type_allowed
     *
     * @param string|null $content_type_allowed content_type_allowed
     *
     * @return self
     */
    public function setContentTypeAllowed($content_type_allowed)
    {
        $this->container['content_type_allowed'] = $content_type_allowed;

        return $this;
    }

    /**
     * Gets bind_to_property
     *
     * @return string|null
     */
    public function getBindToProperty()
    {
        return $this->container['bind_to_property'];
    }

    /**
     * Sets bind_to_property
     *
     * @param string|null $bind_to_property bind_to_property
     *
     * @return self
     */
    public function setBindToProperty($bind_to_property)
    {
        $this->container['bind_to_property'] = $bind_to_property;

        return $this;
    }

    /**
     * Gets bound_regex
     *
     * @return string|null
     */
    public function getBoundRegex()
    {
        return $this->container['bound_regex'];
    }

    /**
     * Sets bound_regex
     *
     * @param string|null $bound_regex bound_regex
     *
     * @return self
     */
    public function setBoundRegex($bound_regex)
    {
        $this->container['bound_regex'] = $bound_regex;

        return $this;
    }

    /**
     * Gets representation_selection
     *
     * @return map[string,string]|null
     */
    public function getRepresentationSelection()
    {
        return $this->container['representation_selection'];
    }

    /**
     * Sets representation_selection
     *
     * @param map[string,string]|null $representation_selection representation_selection
     *
     * @return self
     */
    public function setRepresentationSelection($representation_selection)
    {
        $this->container['representation_selection'] = $representation_selection;

        return $this;
    }

    /**
     * Gets default_values
     *
     * @return \OpenAPI\Client\Model\ContentModelsContentTypeDefaultValue[]|null
     */
    public function getDefaultValues()
    {
        return $this->container['default_values'];
    }

    /**
     * Sets default_values
     *
     * @param \OpenAPI\Client\Model\ContentModelsContentTypeDefaultValue[]|null $default_values default_values
     *
     * @return self
     */
    public function setDefaultValues($default_values)
    {
        $this->container['default_values'] = $default_values;

        return $this;
    }

    /**
     * Gets is_external_allowed
     *
     * @return bool|null
     */
    public function getIsExternalAllowed()
    {
        return $this->container['is_external_allowed'];
    }

    /**
     * Sets is_external_allowed
     *
     * @param bool|null $is_external_allowed is_external_allowed
     *
     * @return self
     */
    public function setIsExternalAllowed($is_external_allowed)
    {
        $this->container['is_external_allowed'] = $is_external_allowed;

        return $this;
    }

    /**
     * Gets property_section
     *
     * @return string|null
     */
    public function getPropertySection()
    {
        return $this->container['property_section'];
    }

    /**
     * Sets property_section
     *
     * @param string|null $property_section property_section
     *
     * @return self
     */
    public function setPropertySection($property_section)
    {
        $this->container['property_section'] = $property_section;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets entitytype
     *
     * @return string|null
     */
    public function getEntitytype()
    {
        return $this->container['entitytype'];
    }

    /**
     * Sets entitytype
     *
     * @param string|null $entitytype entitytype
     *
     * @return self
     */
    public function setEntitytype($entitytype)
    {
        $this->container['entitytype'] = $entitytype;

        return $this;
    }

    /**
     * Gets is_combo
     *
     * @return bool|null
     */
    public function getIsCombo()
    {
        return $this->container['is_combo'];
    }

    /**
     * Sets is_combo
     *
     * @param bool|null $is_combo is_combo
     *
     * @return self
     */
    public function setIsCombo($is_combo)
    {
        $this->container['is_combo'] = $is_combo;

        return $this;
    }

    /**
     * Gets suppress_property
     *
     * @return bool|null
     */
    public function getSuppressProperty()
    {
        return $this->container['suppress_property'];
    }

    /**
     * Sets suppress_property
     *
     * @param bool|null $suppress_property suppress_property
     *
     * @return self
     */
    public function setSuppressProperty($suppress_property)
    {
        $this->container['suppress_property'] = $suppress_property;

        return $this;
    }

    /**
     * Gets legal_content_types
     *
     * @return string[]|null
     */
    public function getLegalContentTypes()
    {
        return $this->container['legal_content_types'];
    }

    /**
     * Sets legal_content_types
     *
     * @param string[]|null $legal_content_types legal_content_types
     *
     * @return self
     */
    public function setLegalContentTypes($legal_content_types)
    {
        $this->container['legal_content_types'] = $legal_content_types;

        return $this;
    }

    /**
     * Gets representation_validation_string
     *
     * @return string|null
     */
    public function getRepresentationValidationString()
    {
        return $this->container['representation_validation_string'];
    }

    /**
     * Sets representation_validation_string
     *
     * @param string|null $representation_validation_string representation_validation_string
     *
     * @return self
     */
    public function setRepresentationValidationString($representation_validation_string)
    {
        $this->container['representation_validation_string'] = $representation_validation_string;

        return $this;
    }

    /**
     * Gets min_width
     *
     * @return int|null
     */
    public function getMinWidth()
    {
        return $this->container['min_width'];
    }

    /**
     * Sets min_width
     *
     * @param int|null $min_width min_width
     *
     * @return self
     */
    public function setMinWidth($min_width)
    {
        $this->container['min_width'] = $min_width;

        return $this;
    }

    /**
     * Gets max_width
     *
     * @return int|null
     */
    public function getMaxWidth()
    {
        return $this->container['max_width'];
    }

    /**
     * Sets max_width
     *
     * @param int|null $max_width max_width
     *
     * @return self
     */
    public function setMaxWidth($max_width)
    {
        $this->container['max_width'] = $max_width;

        return $this;
    }

    /**
     * Gets min_height
     *
     * @return int|null
     */
    public function getMinHeight()
    {
        return $this->container['min_height'];
    }

    /**
     * Sets min_height
     *
     * @param int|null $min_height min_height
     *
     * @return self
     */
    public function setMinHeight($min_height)
    {
        $this->container['min_height'] = $min_height;

        return $this;
    }

    /**
     * Gets max_height
     *
     * @return int|null
     */
    public function getMaxHeight()
    {
        return $this->container['max_height'];
    }

    /**
     * Sets max_height
     *
     * @param int|null $max_height max_height
     *
     * @return self
     */
    public function setMaxHeight($max_height)
    {
        $this->container['max_height'] = $max_height;

        return $this;
    }

    /**
     * Gets is_video
     *
     * @return bool|null
     */
    public function getIsVideo()
    {
        return $this->container['is_video'];
    }

    /**
     * Sets is_video
     *
     * @param bool|null $is_video is_video
     *
     * @return self
     */
    public function setIsVideo($is_video)
    {
        $this->container['is_video'] = $is_video;

        return $this;
    }

    /**
     * Gets is_image
     *
     * @return bool|null
     */
    public function getIsImage()
    {
        return $this->container['is_image'];
    }

    /**
     * Sets is_image
     *
     * @param bool|null $is_image is_image
     *
     * @return self
     */
    public function setIsImage($is_image)
    {
        $this->container['is_image'] = $is_image;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


