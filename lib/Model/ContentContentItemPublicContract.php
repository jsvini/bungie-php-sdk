<?php
/**
 * ContentContentItemPublicContract
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ContentContentItemPublicContract Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ContentContentItemPublicContract implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Content.ContentItemPublicContract';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'content_id' => 'int',
        'c_type' => 'string',
        'cms_path' => 'string',
        'creation_date' => '\DateTime',
        'modify_date' => '\DateTime',
        'allow_comments' => 'bool',
        'has_age_gate' => 'bool',
        'minimum_age' => 'int',
        'rating_image_path' => 'string',
        'author' => '\OpenAPI\Client\Model\UserGeneralUser',
        'auto_english_property_fallback' => 'bool',
        'properties' => 'map[string,object]',
        'representations' => '\OpenAPI\Client\Model\ContentContentRepresentation[]',
        'tags' => 'string[]',
        'comment_summary' => '\OpenAPI\Client\Model\ContentCommentSummary'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'content_id' => 'int64',
        'c_type' => null,
        'cms_path' => null,
        'creation_date' => 'date-time',
        'modify_date' => 'date-time',
        'allow_comments' => null,
        'has_age_gate' => null,
        'minimum_age' => 'int32',
        'rating_image_path' => null,
        'author' => null,
        'auto_english_property_fallback' => null,
        'properties' => null,
        'representations' => null,
        'tags' => null,
        'comment_summary' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'content_id' => 'contentId',
        'c_type' => 'cType',
        'cms_path' => 'cmsPath',
        'creation_date' => 'creationDate',
        'modify_date' => 'modifyDate',
        'allow_comments' => 'allowComments',
        'has_age_gate' => 'hasAgeGate',
        'minimum_age' => 'minimumAge',
        'rating_image_path' => 'ratingImagePath',
        'author' => 'author',
        'auto_english_property_fallback' => 'autoEnglishPropertyFallback',
        'properties' => 'properties',
        'representations' => 'representations',
        'tags' => 'tags',
        'comment_summary' => 'commentSummary'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'content_id' => 'setContentId',
        'c_type' => 'setCType',
        'cms_path' => 'setCmsPath',
        'creation_date' => 'setCreationDate',
        'modify_date' => 'setModifyDate',
        'allow_comments' => 'setAllowComments',
        'has_age_gate' => 'setHasAgeGate',
        'minimum_age' => 'setMinimumAge',
        'rating_image_path' => 'setRatingImagePath',
        'author' => 'setAuthor',
        'auto_english_property_fallback' => 'setAutoEnglishPropertyFallback',
        'properties' => 'setProperties',
        'representations' => 'setRepresentations',
        'tags' => 'setTags',
        'comment_summary' => 'setCommentSummary'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'content_id' => 'getContentId',
        'c_type' => 'getCType',
        'cms_path' => 'getCmsPath',
        'creation_date' => 'getCreationDate',
        'modify_date' => 'getModifyDate',
        'allow_comments' => 'getAllowComments',
        'has_age_gate' => 'getHasAgeGate',
        'minimum_age' => 'getMinimumAge',
        'rating_image_path' => 'getRatingImagePath',
        'author' => 'getAuthor',
        'auto_english_property_fallback' => 'getAutoEnglishPropertyFallback',
        'properties' => 'getProperties',
        'representations' => 'getRepresentations',
        'tags' => 'getTags',
        'comment_summary' => 'getCommentSummary'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['content_id'] = $data['content_id'] ?? null;
        $this->container['c_type'] = $data['c_type'] ?? null;
        $this->container['cms_path'] = $data['cms_path'] ?? null;
        $this->container['creation_date'] = $data['creation_date'] ?? null;
        $this->container['modify_date'] = $data['modify_date'] ?? null;
        $this->container['allow_comments'] = $data['allow_comments'] ?? null;
        $this->container['has_age_gate'] = $data['has_age_gate'] ?? null;
        $this->container['minimum_age'] = $data['minimum_age'] ?? null;
        $this->container['rating_image_path'] = $data['rating_image_path'] ?? null;
        $this->container['author'] = $data['author'] ?? null;
        $this->container['auto_english_property_fallback'] = $data['auto_english_property_fallback'] ?? null;
        $this->container['properties'] = $data['properties'] ?? null;
        $this->container['representations'] = $data['representations'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['comment_summary'] = $data['comment_summary'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets content_id
     *
     * @return int|null
     */
    public function getContentId()
    {
        return $this->container['content_id'];
    }

    /**
     * Sets content_id
     *
     * @param int|null $content_id content_id
     *
     * @return self
     */
    public function setContentId($content_id)
    {
        $this->container['content_id'] = $content_id;

        return $this;
    }

    /**
     * Gets c_type
     *
     * @return string|null
     */
    public function getCType()
    {
        return $this->container['c_type'];
    }

    /**
     * Sets c_type
     *
     * @param string|null $c_type c_type
     *
     * @return self
     */
    public function setCType($c_type)
    {
        $this->container['c_type'] = $c_type;

        return $this;
    }

    /**
     * Gets cms_path
     *
     * @return string|null
     */
    public function getCmsPath()
    {
        return $this->container['cms_path'];
    }

    /**
     * Sets cms_path
     *
     * @param string|null $cms_path cms_path
     *
     * @return self
     */
    public function setCmsPath($cms_path)
    {
        $this->container['cms_path'] = $cms_path;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime|null $creation_date creation_date
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets modify_date
     *
     * @return \DateTime|null
     */
    public function getModifyDate()
    {
        return $this->container['modify_date'];
    }

    /**
     * Sets modify_date
     *
     * @param \DateTime|null $modify_date modify_date
     *
     * @return self
     */
    public function setModifyDate($modify_date)
    {
        $this->container['modify_date'] = $modify_date;

        return $this;
    }

    /**
     * Gets allow_comments
     *
     * @return bool|null
     */
    public function getAllowComments()
    {
        return $this->container['allow_comments'];
    }

    /**
     * Sets allow_comments
     *
     * @param bool|null $allow_comments allow_comments
     *
     * @return self
     */
    public function setAllowComments($allow_comments)
    {
        $this->container['allow_comments'] = $allow_comments;

        return $this;
    }

    /**
     * Gets has_age_gate
     *
     * @return bool|null
     */
    public function getHasAgeGate()
    {
        return $this->container['has_age_gate'];
    }

    /**
     * Sets has_age_gate
     *
     * @param bool|null $has_age_gate has_age_gate
     *
     * @return self
     */
    public function setHasAgeGate($has_age_gate)
    {
        $this->container['has_age_gate'] = $has_age_gate;

        return $this;
    }

    /**
     * Gets minimum_age
     *
     * @return int|null
     */
    public function getMinimumAge()
    {
        return $this->container['minimum_age'];
    }

    /**
     * Sets minimum_age
     *
     * @param int|null $minimum_age minimum_age
     *
     * @return self
     */
    public function setMinimumAge($minimum_age)
    {
        $this->container['minimum_age'] = $minimum_age;

        return $this;
    }

    /**
     * Gets rating_image_path
     *
     * @return string|null
     */
    public function getRatingImagePath()
    {
        return $this->container['rating_image_path'];
    }

    /**
     * Sets rating_image_path
     *
     * @param string|null $rating_image_path rating_image_path
     *
     * @return self
     */
    public function setRatingImagePath($rating_image_path)
    {
        $this->container['rating_image_path'] = $rating_image_path;

        return $this;
    }

    /**
     * Gets author
     *
     * @return \OpenAPI\Client\Model\UserGeneralUser|null
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param \OpenAPI\Client\Model\UserGeneralUser|null $author author
     *
     * @return self
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets auto_english_property_fallback
     *
     * @return bool|null
     */
    public function getAutoEnglishPropertyFallback()
    {
        return $this->container['auto_english_property_fallback'];
    }

    /**
     * Sets auto_english_property_fallback
     *
     * @param bool|null $auto_english_property_fallback auto_english_property_fallback
     *
     * @return self
     */
    public function setAutoEnglishPropertyFallback($auto_english_property_fallback)
    {
        $this->container['auto_english_property_fallback'] = $auto_english_property_fallback;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return map[string,object]|null
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param map[string,object]|null $properties Firehose content is really a collection of metadata and \"properties\", which are the potentially-but-not-strictly localizable data that comprises the meat of whatever content is being shown.  As Cole Porter would have crooned, \"Anything Goes\" with Firehose properties. They are most often strings, but they can theoretically be anything. They are JSON encoded, and could be JSON structures, simple strings, numbers etc... The Content Type of the item (cType) will describe the properties, and thus how they ought to be deserialized.
     *
     * @return self
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets representations
     *
     * @return \OpenAPI\Client\Model\ContentContentRepresentation[]|null
     */
    public function getRepresentations()
    {
        return $this->container['representations'];
    }

    /**
     * Sets representations
     *
     * @param \OpenAPI\Client\Model\ContentContentRepresentation[]|null $representations representations
     *
     * @return self
     */
    public function setRepresentations($representations)
    {
        $this->container['representations'] = $representations;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags NOTE: Tags will always be lower case.
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets comment_summary
     *
     * @return \OpenAPI\Client\Model\ContentCommentSummary|null
     */
    public function getCommentSummary()
    {
        return $this->container['comment_summary'];
    }

    /**
     * Sets comment_summary
     *
     * @param \OpenAPI\Client\Model\ContentCommentSummary|null $comment_summary comment_summary
     *
     * @return self
     */
    public function setCommentSummary($comment_summary)
    {
        $this->container['comment_summary'] = $comment_summary;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


