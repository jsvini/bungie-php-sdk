<?php
/**
 * DestinyDefinitionsDestinyTalentExclusiveGroup
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyDefinitionsDestinyTalentExclusiveGroup Class Doc Comment
 *
 * @category Class
 * @description As of Destiny 2, nodes can exist as part of \&quot;Exclusive Groups\&quot;. These differ from exclusive sets in that, within the group, many nodes can be activated. But the act of activating any node in the group will cause \&quot;opposing\&quot; nodes (nodes in groups that are not allowed to be activated at the same time as this group) to deactivate.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyDefinitionsDestinyTalentExclusiveGroup implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.DestinyTalentExclusiveGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'group_hash' => 'int',
        'lore_hash' => 'int',
        'node_hashes' => 'int[]',
        'opposing_group_hashes' => 'int[]',
        'opposing_node_hashes' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'group_hash' => 'uint32',
        'lore_hash' => 'uint32',
        'node_hashes' => 'uint32',
        'opposing_group_hashes' => 'uint32',
        'opposing_node_hashes' => 'uint32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'group_hash' => 'groupHash',
        'lore_hash' => 'loreHash',
        'node_hashes' => 'nodeHashes',
        'opposing_group_hashes' => 'opposingGroupHashes',
        'opposing_node_hashes' => 'opposingNodeHashes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'group_hash' => 'setGroupHash',
        'lore_hash' => 'setLoreHash',
        'node_hashes' => 'setNodeHashes',
        'opposing_group_hashes' => 'setOpposingGroupHashes',
        'opposing_node_hashes' => 'setOpposingNodeHashes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'group_hash' => 'getGroupHash',
        'lore_hash' => 'getLoreHash',
        'node_hashes' => 'getNodeHashes',
        'opposing_group_hashes' => 'getOpposingGroupHashes',
        'opposing_node_hashes' => 'getOpposingNodeHashes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['group_hash'] = $data['group_hash'] ?? null;
        $this->container['lore_hash'] = $data['lore_hash'] ?? null;
        $this->container['node_hashes'] = $data['node_hashes'] ?? null;
        $this->container['opposing_group_hashes'] = $data['opposing_group_hashes'] ?? null;
        $this->container['opposing_node_hashes'] = $data['opposing_node_hashes'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets group_hash
     *
     * @return int|null
     */
    public function getGroupHash()
    {
        return $this->container['group_hash'];
    }

    /**
     * Sets group_hash
     *
     * @param int|null $group_hash The identifier for this exclusive group. Only guaranteed unique within the talent grid, not globally.
     *
     * @return self
     */
    public function setGroupHash($group_hash)
    {
        $this->container['group_hash'] = $group_hash;

        return $this;
    }

    /**
     * Gets lore_hash
     *
     * @return int|null
     */
    public function getLoreHash()
    {
        return $this->container['lore_hash'];
    }

    /**
     * Sets lore_hash
     *
     * @param int|null $lore_hash If this group has an associated piece of lore to show next to it, this will be the identifier for that DestinyLoreDefinition.
     *
     * @return self
     */
    public function setLoreHash($lore_hash)
    {
        $this->container['lore_hash'] = $lore_hash;

        return $this;
    }

    /**
     * Gets node_hashes
     *
     * @return int[]|null
     */
    public function getNodeHashes()
    {
        return $this->container['node_hashes'];
    }

    /**
     * Sets node_hashes
     *
     * @param int[]|null $node_hashes A quick reference of the talent nodes that are part of this group, by their Talent Node hashes. (See DestinyTalentNodeDefinition.nodeHash)
     *
     * @return self
     */
    public function setNodeHashes($node_hashes)
    {
        $this->container['node_hashes'] = $node_hashes;

        return $this;
    }

    /**
     * Gets opposing_group_hashes
     *
     * @return int[]|null
     */
    public function getOpposingGroupHashes()
    {
        return $this->container['opposing_group_hashes'];
    }

    /**
     * Sets opposing_group_hashes
     *
     * @param int[]|null $opposing_group_hashes A quick reference of Groups whose nodes will be deactivated if any node in this group is activated.
     *
     * @return self
     */
    public function setOpposingGroupHashes($opposing_group_hashes)
    {
        $this->container['opposing_group_hashes'] = $opposing_group_hashes;

        return $this;
    }

    /**
     * Gets opposing_node_hashes
     *
     * @return int[]|null
     */
    public function getOpposingNodeHashes()
    {
        return $this->container['opposing_node_hashes'];
    }

    /**
     * Sets opposing_node_hashes
     *
     * @param int[]|null $opposing_node_hashes A quick reference of Nodes that will be deactivated if any node in this group is activated, by their Talent Node hashes. (See DestinyTalentNodeDefinition.nodeHash)
     *
     * @return self
     */
    public function setOpposingNodeHashes($opposing_node_hashes)
    {
        $this->container['opposing_node_hashes'] = $opposing_node_hashes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


