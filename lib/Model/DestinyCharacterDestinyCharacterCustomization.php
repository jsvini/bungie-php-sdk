<?php
/**
 * DestinyCharacterDestinyCharacterCustomization
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyCharacterDestinyCharacterCustomization Class Doc Comment
 *
 * @category Class
 * @description Raw data about the customization options chosen for a character&#39;s face and appearance.  You can look up the relevant class/race/gender combo in DestinyCharacterCustomizationOptionDefinition for the character, and then look up these values within the CustomizationOptions found to pull some data about their choices. Warning: not all of that data is meaningful. Some data has useful icons. Others have nothing, and are only meant for 3D rendering purposes (which we sadly do not expose yet)
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyCharacterDestinyCharacterCustomization implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Character.DestinyCharacterCustomization';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'personality' => 'int',
        'face' => 'int',
        'skin_color' => 'int',
        'lip_color' => 'int',
        'eye_color' => 'int',
        'hair_colors' => 'int[]',
        'feature_colors' => 'int[]',
        'decal_color' => 'int',
        'wear_helmet' => 'bool',
        'hair_index' => 'int',
        'feature_index' => 'int',
        'decal_index' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'personality' => 'uint32',
        'face' => 'uint32',
        'skin_color' => 'uint32',
        'lip_color' => 'uint32',
        'eye_color' => 'uint32',
        'hair_colors' => 'uint32',
        'feature_colors' => 'uint32',
        'decal_color' => 'uint32',
        'wear_helmet' => null,
        'hair_index' => 'int32',
        'feature_index' => 'int32',
        'decal_index' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'personality' => 'personality',
        'face' => 'face',
        'skin_color' => 'skinColor',
        'lip_color' => 'lipColor',
        'eye_color' => 'eyeColor',
        'hair_colors' => 'hairColors',
        'feature_colors' => 'featureColors',
        'decal_color' => 'decalColor',
        'wear_helmet' => 'wearHelmet',
        'hair_index' => 'hairIndex',
        'feature_index' => 'featureIndex',
        'decal_index' => 'decalIndex'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'personality' => 'setPersonality',
        'face' => 'setFace',
        'skin_color' => 'setSkinColor',
        'lip_color' => 'setLipColor',
        'eye_color' => 'setEyeColor',
        'hair_colors' => 'setHairColors',
        'feature_colors' => 'setFeatureColors',
        'decal_color' => 'setDecalColor',
        'wear_helmet' => 'setWearHelmet',
        'hair_index' => 'setHairIndex',
        'feature_index' => 'setFeatureIndex',
        'decal_index' => 'setDecalIndex'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'personality' => 'getPersonality',
        'face' => 'getFace',
        'skin_color' => 'getSkinColor',
        'lip_color' => 'getLipColor',
        'eye_color' => 'getEyeColor',
        'hair_colors' => 'getHairColors',
        'feature_colors' => 'getFeatureColors',
        'decal_color' => 'getDecalColor',
        'wear_helmet' => 'getWearHelmet',
        'hair_index' => 'getHairIndex',
        'feature_index' => 'getFeatureIndex',
        'decal_index' => 'getDecalIndex'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['personality'] = $data['personality'] ?? null;
        $this->container['face'] = $data['face'] ?? null;
        $this->container['skin_color'] = $data['skin_color'] ?? null;
        $this->container['lip_color'] = $data['lip_color'] ?? null;
        $this->container['eye_color'] = $data['eye_color'] ?? null;
        $this->container['hair_colors'] = $data['hair_colors'] ?? null;
        $this->container['feature_colors'] = $data['feature_colors'] ?? null;
        $this->container['decal_color'] = $data['decal_color'] ?? null;
        $this->container['wear_helmet'] = $data['wear_helmet'] ?? null;
        $this->container['hair_index'] = $data['hair_index'] ?? null;
        $this->container['feature_index'] = $data['feature_index'] ?? null;
        $this->container['decal_index'] = $data['decal_index'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets personality
     *
     * @return int|null
     */
    public function getPersonality()
    {
        return $this->container['personality'];
    }

    /**
     * Sets personality
     *
     * @param int|null $personality personality
     *
     * @return self
     */
    public function setPersonality($personality)
    {
        $this->container['personality'] = $personality;

        return $this;
    }

    /**
     * Gets face
     *
     * @return int|null
     */
    public function getFace()
    {
        return $this->container['face'];
    }

    /**
     * Sets face
     *
     * @param int|null $face face
     *
     * @return self
     */
    public function setFace($face)
    {
        $this->container['face'] = $face;

        return $this;
    }

    /**
     * Gets skin_color
     *
     * @return int|null
     */
    public function getSkinColor()
    {
        return $this->container['skin_color'];
    }

    /**
     * Sets skin_color
     *
     * @param int|null $skin_color skin_color
     *
     * @return self
     */
    public function setSkinColor($skin_color)
    {
        $this->container['skin_color'] = $skin_color;

        return $this;
    }

    /**
     * Gets lip_color
     *
     * @return int|null
     */
    public function getLipColor()
    {
        return $this->container['lip_color'];
    }

    /**
     * Sets lip_color
     *
     * @param int|null $lip_color lip_color
     *
     * @return self
     */
    public function setLipColor($lip_color)
    {
        $this->container['lip_color'] = $lip_color;

        return $this;
    }

    /**
     * Gets eye_color
     *
     * @return int|null
     */
    public function getEyeColor()
    {
        return $this->container['eye_color'];
    }

    /**
     * Sets eye_color
     *
     * @param int|null $eye_color eye_color
     *
     * @return self
     */
    public function setEyeColor($eye_color)
    {
        $this->container['eye_color'] = $eye_color;

        return $this;
    }

    /**
     * Gets hair_colors
     *
     * @return int[]|null
     */
    public function getHairColors()
    {
        return $this->container['hair_colors'];
    }

    /**
     * Sets hair_colors
     *
     * @param int[]|null $hair_colors hair_colors
     *
     * @return self
     */
    public function setHairColors($hair_colors)
    {
        $this->container['hair_colors'] = $hair_colors;

        return $this;
    }

    /**
     * Gets feature_colors
     *
     * @return int[]|null
     */
    public function getFeatureColors()
    {
        return $this->container['feature_colors'];
    }

    /**
     * Sets feature_colors
     *
     * @param int[]|null $feature_colors feature_colors
     *
     * @return self
     */
    public function setFeatureColors($feature_colors)
    {
        $this->container['feature_colors'] = $feature_colors;

        return $this;
    }

    /**
     * Gets decal_color
     *
     * @return int|null
     */
    public function getDecalColor()
    {
        return $this->container['decal_color'];
    }

    /**
     * Sets decal_color
     *
     * @param int|null $decal_color decal_color
     *
     * @return self
     */
    public function setDecalColor($decal_color)
    {
        $this->container['decal_color'] = $decal_color;

        return $this;
    }

    /**
     * Gets wear_helmet
     *
     * @return bool|null
     */
    public function getWearHelmet()
    {
        return $this->container['wear_helmet'];
    }

    /**
     * Sets wear_helmet
     *
     * @param bool|null $wear_helmet wear_helmet
     *
     * @return self
     */
    public function setWearHelmet($wear_helmet)
    {
        $this->container['wear_helmet'] = $wear_helmet;

        return $this;
    }

    /**
     * Gets hair_index
     *
     * @return int|null
     */
    public function getHairIndex()
    {
        return $this->container['hair_index'];
    }

    /**
     * Sets hair_index
     *
     * @param int|null $hair_index hair_index
     *
     * @return self
     */
    public function setHairIndex($hair_index)
    {
        $this->container['hair_index'] = $hair_index;

        return $this;
    }

    /**
     * Gets feature_index
     *
     * @return int|null
     */
    public function getFeatureIndex()
    {
        return $this->container['feature_index'];
    }

    /**
     * Sets feature_index
     *
     * @param int|null $feature_index feature_index
     *
     * @return self
     */
    public function setFeatureIndex($feature_index)
    {
        $this->container['feature_index'] = $feature_index;

        return $this;
    }

    /**
     * Gets decal_index
     *
     * @return int|null
     */
    public function getDecalIndex()
    {
        return $this->container['decal_index'];
    }

    /**
     * Sets decal_index
     *
     * @param int|null $decal_index decal_index
     *
     * @return self
     */
    public function setDecalIndex($decal_index)
    {
        $this->container['decal_index'] = $decal_index;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


