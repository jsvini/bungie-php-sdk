<?php
/**
 * DestinyAdvancedAwaAuthorizationResult
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyAdvancedAwaAuthorizationResult Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyAdvancedAwaAuthorizationResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Advanced.AwaAuthorizationResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user_selection' => 'int',
        'response_reason' => 'int',
        'developer_note' => 'string',
        'action_token' => 'string',
        'maximum_number_of_uses' => 'int',
        'valid_until' => '\DateTime',
        'type' => 'int',
        'membership_type' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user_selection' => 'int32',
        'response_reason' => 'int32',
        'developer_note' => null,
        'action_token' => null,
        'maximum_number_of_uses' => 'int32',
        'valid_until' => 'date-time',
        'type' => 'int32',
        'membership_type' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_selection' => 'userSelection',
        'response_reason' => 'responseReason',
        'developer_note' => 'developerNote',
        'action_token' => 'actionToken',
        'maximum_number_of_uses' => 'maximumNumberOfUses',
        'valid_until' => 'validUntil',
        'type' => 'type',
        'membership_type' => 'membershipType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_selection' => 'setUserSelection',
        'response_reason' => 'setResponseReason',
        'developer_note' => 'setDeveloperNote',
        'action_token' => 'setActionToken',
        'maximum_number_of_uses' => 'setMaximumNumberOfUses',
        'valid_until' => 'setValidUntil',
        'type' => 'setType',
        'membership_type' => 'setMembershipType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_selection' => 'getUserSelection',
        'response_reason' => 'getResponseReason',
        'developer_note' => 'getDeveloperNote',
        'action_token' => 'getActionToken',
        'maximum_number_of_uses' => 'getMaximumNumberOfUses',
        'valid_until' => 'getValidUntil',
        'type' => 'getType',
        'membership_type' => 'getMembershipType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user_selection'] = $data['user_selection'] ?? null;
        $this->container['response_reason'] = $data['response_reason'] ?? null;
        $this->container['developer_note'] = $data['developer_note'] ?? null;
        $this->container['action_token'] = $data['action_token'] ?? null;
        $this->container['maximum_number_of_uses'] = $data['maximum_number_of_uses'] ?? null;
        $this->container['valid_until'] = $data['valid_until'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['membership_type'] = $data['membership_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_selection
     *
     * @return int|null
     */
    public function getUserSelection()
    {
        return $this->container['user_selection'];
    }

    /**
     * Sets user_selection
     *
     * @param int|null $user_selection Indication of how the user responded to the request. If the value is \"Approved\" the actionToken will contain the token that can be presented when performing the advanced write action.
     *
     * @return self
     */
    public function setUserSelection($user_selection)
    {
        $this->container['user_selection'] = $user_selection;

        return $this;
    }

    /**
     * Gets response_reason
     *
     * @return int|null
     */
    public function getResponseReason()
    {
        return $this->container['response_reason'];
    }

    /**
     * Sets response_reason
     *
     * @param int|null $response_reason response_reason
     *
     * @return self
     */
    public function setResponseReason($response_reason)
    {
        $this->container['response_reason'] = $response_reason;

        return $this;
    }

    /**
     * Gets developer_note
     *
     * @return string|null
     */
    public function getDeveloperNote()
    {
        return $this->container['developer_note'];
    }

    /**
     * Sets developer_note
     *
     * @param string|null $developer_note Message to the app developer to help understand the response.
     *
     * @return self
     */
    public function setDeveloperNote($developer_note)
    {
        $this->container['developer_note'] = $developer_note;

        return $this;
    }

    /**
     * Gets action_token
     *
     * @return string|null
     */
    public function getActionToken()
    {
        return $this->container['action_token'];
    }

    /**
     * Sets action_token
     *
     * @param string|null $action_token Credential used to prove the user authorized an advanced write action.
     *
     * @return self
     */
    public function setActionToken($action_token)
    {
        $this->container['action_token'] = $action_token;

        return $this;
    }

    /**
     * Gets maximum_number_of_uses
     *
     * @return int|null
     */
    public function getMaximumNumberOfUses()
    {
        return $this->container['maximum_number_of_uses'];
    }

    /**
     * Sets maximum_number_of_uses
     *
     * @param int|null $maximum_number_of_uses This token may be used to perform the requested action this number of times, at a maximum. If this value is 0, then there is no limit.
     *
     * @return self
     */
    public function setMaximumNumberOfUses($maximum_number_of_uses)
    {
        $this->container['maximum_number_of_uses'] = $maximum_number_of_uses;

        return $this;
    }

    /**
     * Gets valid_until
     *
     * @return \DateTime|null
     */
    public function getValidUntil()
    {
        return $this->container['valid_until'];
    }

    /**
     * Sets valid_until
     *
     * @param \DateTime|null $valid_until Time, UTC, when token expires.
     *
     * @return self
     */
    public function setValidUntil($valid_until)
    {
        $this->container['valid_until'] = $valid_until;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int|null $type Advanced Write Action Type from the permission request.
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets membership_type
     *
     * @return int|null
     */
    public function getMembershipType()
    {
        return $this->container['membership_type'];
    }

    /**
     * Sets membership_type
     *
     * @param int|null $membership_type MembershipType from the permission request.
     *
     * @return self
     */
    public function setMembershipType($membership_type)
    {
        $this->container['membership_type'] = $membership_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


