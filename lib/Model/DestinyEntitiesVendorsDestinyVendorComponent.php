<?php
/**
 * DestinyEntitiesVendorsDestinyVendorComponent
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyEntitiesVendorsDestinyVendorComponent Class Doc Comment
 *
 * @category Class
 * @description This component contains essential/summary information about the vendor.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyEntitiesVendorsDestinyVendorComponent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Entities.Vendors.DestinyVendorComponent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'can_purchase' => 'bool',
        'progression' => 'DestinyDestinyProgression',
        'vendor_location_index' => 'int',
        'seasonal_rank' => 'int',
        'vendor_hash' => 'int',
        'next_refresh_date' => '\DateTime',
        'enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'can_purchase' => null,
        'progression' => null,
        'vendor_location_index' => 'int32',
        'seasonal_rank' => 'int32',
        'vendor_hash' => 'uint32',
        'next_refresh_date' => 'date-time',
        'enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can_purchase' => 'canPurchase',
        'progression' => 'progression',
        'vendor_location_index' => 'vendorLocationIndex',
        'seasonal_rank' => 'seasonalRank',
        'vendor_hash' => 'vendorHash',
        'next_refresh_date' => 'nextRefreshDate',
        'enabled' => 'enabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can_purchase' => 'setCanPurchase',
        'progression' => 'setProgression',
        'vendor_location_index' => 'setVendorLocationIndex',
        'seasonal_rank' => 'setSeasonalRank',
        'vendor_hash' => 'setVendorHash',
        'next_refresh_date' => 'setNextRefreshDate',
        'enabled' => 'setEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can_purchase' => 'getCanPurchase',
        'progression' => 'getProgression',
        'vendor_location_index' => 'getVendorLocationIndex',
        'seasonal_rank' => 'getSeasonalRank',
        'vendor_hash' => 'getVendorHash',
        'next_refresh_date' => 'getNextRefreshDate',
        'enabled' => 'getEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['can_purchase'] = $data['can_purchase'] ?? null;
        $this->container['progression'] = $data['progression'] ?? null;
        $this->container['vendor_location_index'] = $data['vendor_location_index'] ?? null;
        $this->container['seasonal_rank'] = $data['seasonal_rank'] ?? null;
        $this->container['vendor_hash'] = $data['vendor_hash'] ?? null;
        $this->container['next_refresh_date'] = $data['next_refresh_date'] ?? null;
        $this->container['enabled'] = $data['enabled'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can_purchase
     *
     * @return bool|null
     */
    public function getCanPurchase()
    {
        return $this->container['can_purchase'];
    }

    /**
     * Sets can_purchase
     *
     * @param bool|null $can_purchase If True, you can purchase from the Vendor.
     *
     * @return self
     */
    public function setCanPurchase($can_purchase)
    {
        $this->container['can_purchase'] = $can_purchase;

        return $this;
    }

    /**
     * Gets progression
     *
     * @return DestinyDestinyProgression|null
     */
    public function getProgression()
    {
        return $this->container['progression'];
    }

    /**
     * Sets progression
     *
     * @param DestinyDestinyProgression|null $progression If the Vendor has a related Reputation, this is the Progression data that represents the character's Reputation level with this Vendor.
     *
     * @return self
     */
    public function setProgression($progression)
    {
        $this->container['progression'] = $progression;

        return $this;
    }

    /**
     * Gets vendor_location_index
     *
     * @return int|null
     */
    public function getVendorLocationIndex()
    {
        return $this->container['vendor_location_index'];
    }

    /**
     * Sets vendor_location_index
     *
     * @param int|null $vendor_location_index An index into the vendor definition's \"locations\" property array, indicating which location they are at currently. If -1, then the vendor has no known location (and you may choose not to show them in your UI as a result. I mean, it's your bag honey)
     *
     * @return self
     */
    public function setVendorLocationIndex($vendor_location_index)
    {
        $this->container['vendor_location_index'] = $vendor_location_index;

        return $this;
    }

    /**
     * Gets seasonal_rank
     *
     * @return int|null
     */
    public function getSeasonalRank()
    {
        return $this->container['seasonal_rank'];
    }

    /**
     * Sets seasonal_rank
     *
     * @param int|null $seasonal_rank If this vendor has a seasonal rank, this will be the calculated value of that rank. How nice is that? I mean, that's pretty sweeet. It's a whole 32 bit integer.
     *
     * @return self
     */
    public function setSeasonalRank($seasonal_rank)
    {
        $this->container['seasonal_rank'] = $seasonal_rank;

        return $this;
    }

    /**
     * Gets vendor_hash
     *
     * @return int|null
     */
    public function getVendorHash()
    {
        return $this->container['vendor_hash'];
    }

    /**
     * Sets vendor_hash
     *
     * @param int|null $vendor_hash The unique identifier for the vendor. Use it to look up their DestinyVendorDefinition.
     *
     * @return self
     */
    public function setVendorHash($vendor_hash)
    {
        $this->container['vendor_hash'] = $vendor_hash;

        return $this;
    }

    /**
     * Gets next_refresh_date
     *
     * @return \DateTime|null
     */
    public function getNextRefreshDate()
    {
        return $this->container['next_refresh_date'];
    }

    /**
     * Sets next_refresh_date
     *
     * @param \DateTime|null $next_refresh_date The date when this vendor's inventory will next rotate/refresh.  Note that this is distinct from the date ranges that the vendor is visible/available in-game: this field indicates the specific time when the vendor's available items refresh and rotate, regardless of whether the vendor is actually available at that time. Unfortunately, these two values may be (and are, for the case of important vendors like Xur) different.  Issue https://github.com/Bungie-net/api/issues/353 is tracking a fix to start providing visibility date ranges where possible in addition to this refresh date, so that all important dates for vendors are available for use.
     *
     * @return self
     */
    public function setNextRefreshDate($next_refresh_date)
    {
        $this->container['next_refresh_date'] = $next_refresh_date;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled If True, the Vendor is currently accessible.   If False, they may not actually be visible in the world at the moment.
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


