<?php
/**
 * DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition Class Doc Comment
 *
 * @category Class
 * @description The definition of a specific reward, which may be contained in a category of rewards and that has optional information about how it is obtained.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.Milestones.DestinyMilestoneRewardEntryDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'reward_entry_hash' => 'int',
        'reward_entry_identifier' => 'string',
        'items' => '\OpenAPI\Client\Model\DestinyDestinyItemQuantity[]',
        'vendor_hash' => 'int',
        'display_properties' => 'DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition',
        'order' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'reward_entry_hash' => 'uint32',
        'reward_entry_identifier' => null,
        'items' => null,
        'vendor_hash' => 'uint32',
        'display_properties' => null,
        'order' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reward_entry_hash' => 'rewardEntryHash',
        'reward_entry_identifier' => 'rewardEntryIdentifier',
        'items' => 'items',
        'vendor_hash' => 'vendorHash',
        'display_properties' => 'displayProperties',
        'order' => 'order'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reward_entry_hash' => 'setRewardEntryHash',
        'reward_entry_identifier' => 'setRewardEntryIdentifier',
        'items' => 'setItems',
        'vendor_hash' => 'setVendorHash',
        'display_properties' => 'setDisplayProperties',
        'order' => 'setOrder'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reward_entry_hash' => 'getRewardEntryHash',
        'reward_entry_identifier' => 'getRewardEntryIdentifier',
        'items' => 'getItems',
        'vendor_hash' => 'getVendorHash',
        'display_properties' => 'getDisplayProperties',
        'order' => 'getOrder'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reward_entry_hash'] = $data['reward_entry_hash'] ?? null;
        $this->container['reward_entry_identifier'] = $data['reward_entry_identifier'] ?? null;
        $this->container['items'] = $data['items'] ?? null;
        $this->container['vendor_hash'] = $data['vendor_hash'] ?? null;
        $this->container['display_properties'] = $data['display_properties'] ?? null;
        $this->container['order'] = $data['order'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reward_entry_hash
     *
     * @return int|null
     */
    public function getRewardEntryHash()
    {
        return $this->container['reward_entry_hash'];
    }

    /**
     * Sets reward_entry_hash
     *
     * @param int|null $reward_entry_hash The identifier for this reward entry. Runtime data will refer to reward entries by this hash. Only guaranteed unique within the specific Milestone.
     *
     * @return self
     */
    public function setRewardEntryHash($reward_entry_hash)
    {
        $this->container['reward_entry_hash'] = $reward_entry_hash;

        return $this;
    }

    /**
     * Gets reward_entry_identifier
     *
     * @return string|null
     */
    public function getRewardEntryIdentifier()
    {
        return $this->container['reward_entry_identifier'];
    }

    /**
     * Sets reward_entry_identifier
     *
     * @param string|null $reward_entry_identifier The string identifier, if you care about it. Only guaranteed unique within the specific Milestone.
     *
     * @return self
     */
    public function setRewardEntryIdentifier($reward_entry_identifier)
    {
        $this->container['reward_entry_identifier'] = $reward_entry_identifier;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \OpenAPI\Client\Model\DestinyDestinyItemQuantity[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \OpenAPI\Client\Model\DestinyDestinyItemQuantity[]|null $items The items you will get as rewards, and how much of it you'll get.
     *
     * @return self
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets vendor_hash
     *
     * @return int|null
     */
    public function getVendorHash()
    {
        return $this->container['vendor_hash'];
    }

    /**
     * Sets vendor_hash
     *
     * @param int|null $vendor_hash If this reward is redeemed at a Vendor, this is the hash of the Vendor to go to in order to redeem the reward. Use this hash to look up the DestinyVendorDefinition.
     *
     * @return self
     */
    public function setVendorHash($vendor_hash)
    {
        $this->container['vendor_hash'] = $vendor_hash;

        return $this;
    }

    /**
     * Gets display_properties
     *
     * @return DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null
     */
    public function getDisplayProperties()
    {
        return $this->container['display_properties'];
    }

    /**
     * Sets display_properties
     *
     * @param DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null $display_properties For us to bother returning this info, we should be able to return some kind of information about why these rewards are grouped together. This is ideally that information. Look at how confident I am that this will always remain true.
     *
     * @return self
     */
    public function setDisplayProperties($display_properties)
    {
        $this->container['display_properties'] = $display_properties;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order If you want to follow BNet's ordering of these rewards, use this number within a given category to order the rewards. Yeah, I know. I feel dirty too.
     *
     * @return self
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


