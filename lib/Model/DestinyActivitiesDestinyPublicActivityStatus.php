<?php
/**
 * DestinyActivitiesDestinyPublicActivityStatus
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyActivitiesDestinyPublicActivityStatus Class Doc Comment
 *
 * @category Class
 * @description Represents the public-facing status of an activity: any data about what is currently active in the Activity, regardless of an individual character&#39;s progress in it.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyActivitiesDestinyPublicActivityStatus implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Activities.DestinyPublicActivityStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'challenge_objective_hashes' => 'int[]',
        'modifier_hashes' => 'int[]',
        'reward_tooltip_items' => '\OpenAPI\Client\Model\DestinyDestinyItemQuantity[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'challenge_objective_hashes' => 'uint32',
        'modifier_hashes' => 'uint32',
        'reward_tooltip_items' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'challenge_objective_hashes' => 'challengeObjectiveHashes',
        'modifier_hashes' => 'modifierHashes',
        'reward_tooltip_items' => 'rewardTooltipItems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'challenge_objective_hashes' => 'setChallengeObjectiveHashes',
        'modifier_hashes' => 'setModifierHashes',
        'reward_tooltip_items' => 'setRewardTooltipItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'challenge_objective_hashes' => 'getChallengeObjectiveHashes',
        'modifier_hashes' => 'getModifierHashes',
        'reward_tooltip_items' => 'getRewardTooltipItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['challenge_objective_hashes'] = $data['challenge_objective_hashes'] ?? null;
        $this->container['modifier_hashes'] = $data['modifier_hashes'] ?? null;
        $this->container['reward_tooltip_items'] = $data['reward_tooltip_items'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets challenge_objective_hashes
     *
     * @return int[]|null
     */
    public function getChallengeObjectiveHashes()
    {
        return $this->container['challenge_objective_hashes'];
    }

    /**
     * Sets challenge_objective_hashes
     *
     * @param int[]|null $challenge_objective_hashes Active Challenges for the activity, if any - represented as hashes for DestinyObjectiveDefinitions.
     *
     * @return self
     */
    public function setChallengeObjectiveHashes($challenge_objective_hashes)
    {
        $this->container['challenge_objective_hashes'] = $challenge_objective_hashes;

        return $this;
    }

    /**
     * Gets modifier_hashes
     *
     * @return int[]|null
     */
    public function getModifierHashes()
    {
        return $this->container['modifier_hashes'];
    }

    /**
     * Sets modifier_hashes
     *
     * @param int[]|null $modifier_hashes The active modifiers on this activity, if any - represented as hashes for DestinyActivityModifierDefinitions.
     *
     * @return self
     */
    public function setModifierHashes($modifier_hashes)
    {
        $this->container['modifier_hashes'] = $modifier_hashes;

        return $this;
    }

    /**
     * Gets reward_tooltip_items
     *
     * @return \OpenAPI\Client\Model\DestinyDestinyItemQuantity[]|null
     */
    public function getRewardTooltipItems()
    {
        return $this->container['reward_tooltip_items'];
    }

    /**
     * Sets reward_tooltip_items
     *
     * @param \OpenAPI\Client\Model\DestinyDestinyItemQuantity[]|null $reward_tooltip_items If the activity itself provides any specific \"mock\" rewards, this will be the items and their quantity.  Why \"mock\", you ask? Because these are the rewards as they are represented in the tooltip of the Activity.  These are often pointers to fake items that look good in a tooltip, but represent an abstract concept of what you will get for a reward rather than the specific items you may obtain.
     *
     * @return self
     */
    public function setRewardTooltipItems($reward_tooltip_items)
    {
        $this->container['reward_tooltip_items'] = $reward_tooltip_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


