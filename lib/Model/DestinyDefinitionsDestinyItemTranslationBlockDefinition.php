<?php
/**
 * DestinyDefinitionsDestinyItemTranslationBlockDefinition
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyDefinitionsDestinyItemTranslationBlockDefinition Class Doc Comment
 *
 * @category Class
 * @description This Block defines the rendering data associated with the item, if any.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyDefinitionsDestinyItemTranslationBlockDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.DestinyItemTranslationBlockDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'weapon_pattern_identifier' => 'string',
        'weapon_pattern_hash' => 'int',
        'default_dyes' => '\OpenAPI\Client\Model\DestinyDyeReference[]',
        'locked_dyes' => '\OpenAPI\Client\Model\DestinyDyeReference[]',
        'custom_dyes' => '\OpenAPI\Client\Model\DestinyDyeReference[]',
        'arrangements' => '\OpenAPI\Client\Model\DestinyDefinitionsDestinyGearArtArrangementReference[]',
        'has_geometry' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'weapon_pattern_identifier' => null,
        'weapon_pattern_hash' => 'uint32',
        'default_dyes' => null,
        'locked_dyes' => null,
        'custom_dyes' => null,
        'arrangements' => null,
        'has_geometry' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'weapon_pattern_identifier' => 'weaponPatternIdentifier',
        'weapon_pattern_hash' => 'weaponPatternHash',
        'default_dyes' => 'defaultDyes',
        'locked_dyes' => 'lockedDyes',
        'custom_dyes' => 'customDyes',
        'arrangements' => 'arrangements',
        'has_geometry' => 'hasGeometry'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'weapon_pattern_identifier' => 'setWeaponPatternIdentifier',
        'weapon_pattern_hash' => 'setWeaponPatternHash',
        'default_dyes' => 'setDefaultDyes',
        'locked_dyes' => 'setLockedDyes',
        'custom_dyes' => 'setCustomDyes',
        'arrangements' => 'setArrangements',
        'has_geometry' => 'setHasGeometry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'weapon_pattern_identifier' => 'getWeaponPatternIdentifier',
        'weapon_pattern_hash' => 'getWeaponPatternHash',
        'default_dyes' => 'getDefaultDyes',
        'locked_dyes' => 'getLockedDyes',
        'custom_dyes' => 'getCustomDyes',
        'arrangements' => 'getArrangements',
        'has_geometry' => 'getHasGeometry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['weapon_pattern_identifier'] = $data['weapon_pattern_identifier'] ?? null;
        $this->container['weapon_pattern_hash'] = $data['weapon_pattern_hash'] ?? null;
        $this->container['default_dyes'] = $data['default_dyes'] ?? null;
        $this->container['locked_dyes'] = $data['locked_dyes'] ?? null;
        $this->container['custom_dyes'] = $data['custom_dyes'] ?? null;
        $this->container['arrangements'] = $data['arrangements'] ?? null;
        $this->container['has_geometry'] = $data['has_geometry'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets weapon_pattern_identifier
     *
     * @return string|null
     */
    public function getWeaponPatternIdentifier()
    {
        return $this->container['weapon_pattern_identifier'];
    }

    /**
     * Sets weapon_pattern_identifier
     *
     * @param string|null $weapon_pattern_identifier weapon_pattern_identifier
     *
     * @return self
     */
    public function setWeaponPatternIdentifier($weapon_pattern_identifier)
    {
        $this->container['weapon_pattern_identifier'] = $weapon_pattern_identifier;

        return $this;
    }

    /**
     * Gets weapon_pattern_hash
     *
     * @return int|null
     */
    public function getWeaponPatternHash()
    {
        return $this->container['weapon_pattern_hash'];
    }

    /**
     * Sets weapon_pattern_hash
     *
     * @param int|null $weapon_pattern_hash weapon_pattern_hash
     *
     * @return self
     */
    public function setWeaponPatternHash($weapon_pattern_hash)
    {
        $this->container['weapon_pattern_hash'] = $weapon_pattern_hash;

        return $this;
    }

    /**
     * Gets default_dyes
     *
     * @return \OpenAPI\Client\Model\DestinyDyeReference[]|null
     */
    public function getDefaultDyes()
    {
        return $this->container['default_dyes'];
    }

    /**
     * Sets default_dyes
     *
     * @param \OpenAPI\Client\Model\DestinyDyeReference[]|null $default_dyes default_dyes
     *
     * @return self
     */
    public function setDefaultDyes($default_dyes)
    {
        $this->container['default_dyes'] = $default_dyes;

        return $this;
    }

    /**
     * Gets locked_dyes
     *
     * @return \OpenAPI\Client\Model\DestinyDyeReference[]|null
     */
    public function getLockedDyes()
    {
        return $this->container['locked_dyes'];
    }

    /**
     * Sets locked_dyes
     *
     * @param \OpenAPI\Client\Model\DestinyDyeReference[]|null $locked_dyes locked_dyes
     *
     * @return self
     */
    public function setLockedDyes($locked_dyes)
    {
        $this->container['locked_dyes'] = $locked_dyes;

        return $this;
    }

    /**
     * Gets custom_dyes
     *
     * @return \OpenAPI\Client\Model\DestinyDyeReference[]|null
     */
    public function getCustomDyes()
    {
        return $this->container['custom_dyes'];
    }

    /**
     * Sets custom_dyes
     *
     * @param \OpenAPI\Client\Model\DestinyDyeReference[]|null $custom_dyes custom_dyes
     *
     * @return self
     */
    public function setCustomDyes($custom_dyes)
    {
        $this->container['custom_dyes'] = $custom_dyes;

        return $this;
    }

    /**
     * Gets arrangements
     *
     * @return \OpenAPI\Client\Model\DestinyDefinitionsDestinyGearArtArrangementReference[]|null
     */
    public function getArrangements()
    {
        return $this->container['arrangements'];
    }

    /**
     * Sets arrangements
     *
     * @param \OpenAPI\Client\Model\DestinyDefinitionsDestinyGearArtArrangementReference[]|null $arrangements arrangements
     *
     * @return self
     */
    public function setArrangements($arrangements)
    {
        $this->container['arrangements'] = $arrangements;

        return $this;
    }

    /**
     * Gets has_geometry
     *
     * @return bool|null
     */
    public function getHasGeometry()
    {
        return $this->container['has_geometry'];
    }

    /**
     * Sets has_geometry
     *
     * @param bool|null $has_geometry has_geometry
     *
     * @return self
     */
    public function setHasGeometry($has_geometry)
    {
        $this->container['has_geometry'] = $has_geometry;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


