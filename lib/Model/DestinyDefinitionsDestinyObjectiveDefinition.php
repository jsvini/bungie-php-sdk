<?php
/**
 * DestinyDefinitionsDestinyObjectiveDefinition
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyDefinitionsDestinyObjectiveDefinition Class Doc Comment
 *
 * @category Class
 * @description Defines an \&quot;Objective\&quot;.  An objective is a specific task you should accomplish in the game. These are referred to by:  - Quest Steps (which are DestinyInventoryItemDefinition entities with Objectives)  - Challenges (which are Objectives defined on an DestinyActivityDefintion)  - Milestones (which refer to Objectives that are defined on both Quest Steps and Activities)  - Anything else that the designers decide to do later.  Objectives have progress, a notion of having been Completed, human readable data describing the task to be accomplished, and a lot of optional tack-on data that can enhance the information provided about the task.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyDefinitionsDestinyObjectiveDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.DestinyObjectiveDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'display_properties' => 'DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition',
        'completion_value' => 'int',
        'scope' => 'int',
        'location_hash' => 'int',
        'allow_negative_value' => 'bool',
        'allow_value_change_when_completed' => 'bool',
        'is_counting_downward' => 'bool',
        'value_style' => 'int',
        'progress_description' => 'string',
        'perks' => 'DestinyDefinitionsDestinyObjectivePerkEntryDefinition',
        'stats' => 'DestinyDefinitionsDestinyObjectiveStatEntryDefinition',
        'minimum_visibility_threshold' => 'int',
        'allow_overcompletion' => 'bool',
        'show_value_on_complete' => 'bool',
        'completed_value_style' => 'int',
        'in_progress_value_style' => 'int',
        'hash' => 'int',
        'index' => 'int',
        'redacted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'display_properties' => null,
        'completion_value' => 'int32',
        'scope' => 'int32',
        'location_hash' => 'uint32',
        'allow_negative_value' => null,
        'allow_value_change_when_completed' => null,
        'is_counting_downward' => null,
        'value_style' => 'int32',
        'progress_description' => null,
        'perks' => null,
        'stats' => null,
        'minimum_visibility_threshold' => 'int32',
        'allow_overcompletion' => null,
        'show_value_on_complete' => null,
        'completed_value_style' => 'int32',
        'in_progress_value_style' => 'int32',
        'hash' => 'uint32',
        'index' => 'int32',
        'redacted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_properties' => 'displayProperties',
        'completion_value' => 'completionValue',
        'scope' => 'scope',
        'location_hash' => 'locationHash',
        'allow_negative_value' => 'allowNegativeValue',
        'allow_value_change_when_completed' => 'allowValueChangeWhenCompleted',
        'is_counting_downward' => 'isCountingDownward',
        'value_style' => 'valueStyle',
        'progress_description' => 'progressDescription',
        'perks' => 'perks',
        'stats' => 'stats',
        'minimum_visibility_threshold' => 'minimumVisibilityThreshold',
        'allow_overcompletion' => 'allowOvercompletion',
        'show_value_on_complete' => 'showValueOnComplete',
        'completed_value_style' => 'completedValueStyle',
        'in_progress_value_style' => 'inProgressValueStyle',
        'hash' => 'hash',
        'index' => 'index',
        'redacted' => 'redacted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_properties' => 'setDisplayProperties',
        'completion_value' => 'setCompletionValue',
        'scope' => 'setScope',
        'location_hash' => 'setLocationHash',
        'allow_negative_value' => 'setAllowNegativeValue',
        'allow_value_change_when_completed' => 'setAllowValueChangeWhenCompleted',
        'is_counting_downward' => 'setIsCountingDownward',
        'value_style' => 'setValueStyle',
        'progress_description' => 'setProgressDescription',
        'perks' => 'setPerks',
        'stats' => 'setStats',
        'minimum_visibility_threshold' => 'setMinimumVisibilityThreshold',
        'allow_overcompletion' => 'setAllowOvercompletion',
        'show_value_on_complete' => 'setShowValueOnComplete',
        'completed_value_style' => 'setCompletedValueStyle',
        'in_progress_value_style' => 'setInProgressValueStyle',
        'hash' => 'setHash',
        'index' => 'setIndex',
        'redacted' => 'setRedacted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_properties' => 'getDisplayProperties',
        'completion_value' => 'getCompletionValue',
        'scope' => 'getScope',
        'location_hash' => 'getLocationHash',
        'allow_negative_value' => 'getAllowNegativeValue',
        'allow_value_change_when_completed' => 'getAllowValueChangeWhenCompleted',
        'is_counting_downward' => 'getIsCountingDownward',
        'value_style' => 'getValueStyle',
        'progress_description' => 'getProgressDescription',
        'perks' => 'getPerks',
        'stats' => 'getStats',
        'minimum_visibility_threshold' => 'getMinimumVisibilityThreshold',
        'allow_overcompletion' => 'getAllowOvercompletion',
        'show_value_on_complete' => 'getShowValueOnComplete',
        'completed_value_style' => 'getCompletedValueStyle',
        'in_progress_value_style' => 'getInProgressValueStyle',
        'hash' => 'getHash',
        'index' => 'getIndex',
        'redacted' => 'getRedacted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['display_properties'] = $data['display_properties'] ?? null;
        $this->container['completion_value'] = $data['completion_value'] ?? null;
        $this->container['scope'] = $data['scope'] ?? null;
        $this->container['location_hash'] = $data['location_hash'] ?? null;
        $this->container['allow_negative_value'] = $data['allow_negative_value'] ?? null;
        $this->container['allow_value_change_when_completed'] = $data['allow_value_change_when_completed'] ?? null;
        $this->container['is_counting_downward'] = $data['is_counting_downward'] ?? null;
        $this->container['value_style'] = $data['value_style'] ?? null;
        $this->container['progress_description'] = $data['progress_description'] ?? null;
        $this->container['perks'] = $data['perks'] ?? null;
        $this->container['stats'] = $data['stats'] ?? null;
        $this->container['minimum_visibility_threshold'] = $data['minimum_visibility_threshold'] ?? null;
        $this->container['allow_overcompletion'] = $data['allow_overcompletion'] ?? null;
        $this->container['show_value_on_complete'] = $data['show_value_on_complete'] ?? null;
        $this->container['completed_value_style'] = $data['completed_value_style'] ?? null;
        $this->container['in_progress_value_style'] = $data['in_progress_value_style'] ?? null;
        $this->container['hash'] = $data['hash'] ?? null;
        $this->container['index'] = $data['index'] ?? null;
        $this->container['redacted'] = $data['redacted'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets display_properties
     *
     * @return DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null
     */
    public function getDisplayProperties()
    {
        return $this->container['display_properties'];
    }

    /**
     * Sets display_properties
     *
     * @param DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null $display_properties Ideally, this should tell you what your task is. I'm not going to lie to you though. Sometimes this doesn't have useful information at all. Which sucks, but there's nothing either of us can do about it.
     *
     * @return self
     */
    public function setDisplayProperties($display_properties)
    {
        $this->container['display_properties'] = $display_properties;

        return $this;
    }

    /**
     * Gets completion_value
     *
     * @return int|null
     */
    public function getCompletionValue()
    {
        return $this->container['completion_value'];
    }

    /**
     * Sets completion_value
     *
     * @param int|null $completion_value The value that the unlock value defined in unlockValueHash must reach in order for the objective to be considered Completed. Used in calculating progress and completion status.
     *
     * @return self
     */
    public function setCompletionValue($completion_value)
    {
        $this->container['completion_value'] = $completion_value;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return int|null
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param int|null $scope A shortcut for determining the most restrictive gating that this Objective is set to use. This includes both the dynamic determination of progress and of completion values. See the DestinyGatingScope enum's documentation for more details.
     *
     * @return self
     */
    public function setScope($scope)
    {
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets location_hash
     *
     * @return int|null
     */
    public function getLocationHash()
    {
        return $this->container['location_hash'];
    }

    /**
     * Sets location_hash
     *
     * @param int|null $location_hash OPTIONAL: a hash identifier for the location at which this objective must be accomplished, if there is a location defined. Look up the DestinyLocationDefinition for this hash for that additional location info.
     *
     * @return self
     */
    public function setLocationHash($location_hash)
    {
        $this->container['location_hash'] = $location_hash;

        return $this;
    }

    /**
     * Gets allow_negative_value
     *
     * @return bool|null
     */
    public function getAllowNegativeValue()
    {
        return $this->container['allow_negative_value'];
    }

    /**
     * Sets allow_negative_value
     *
     * @param bool|null $allow_negative_value If true, the value is allowed to go negative.
     *
     * @return self
     */
    public function setAllowNegativeValue($allow_negative_value)
    {
        $this->container['allow_negative_value'] = $allow_negative_value;

        return $this;
    }

    /**
     * Gets allow_value_change_when_completed
     *
     * @return bool|null
     */
    public function getAllowValueChangeWhenCompleted()
    {
        return $this->container['allow_value_change_when_completed'];
    }

    /**
     * Sets allow_value_change_when_completed
     *
     * @param bool|null $allow_value_change_when_completed If true, you can effectively \"un-complete\" this objective if you lose progress after crossing the completion threshold.   If False, once you complete the task it will remain completed forever by locking the value.
     *
     * @return self
     */
    public function setAllowValueChangeWhenCompleted($allow_value_change_when_completed)
    {
        $this->container['allow_value_change_when_completed'] = $allow_value_change_when_completed;

        return $this;
    }

    /**
     * Gets is_counting_downward
     *
     * @return bool|null
     */
    public function getIsCountingDownward()
    {
        return $this->container['is_counting_downward'];
    }

    /**
     * Sets is_counting_downward
     *
     * @param bool|null $is_counting_downward If true, completion means having an unlock value less than or equal to the completionValue.  If False, completion means having an unlock value greater than or equal to the completionValue.
     *
     * @return self
     */
    public function setIsCountingDownward($is_counting_downward)
    {
        $this->container['is_counting_downward'] = $is_counting_downward;

        return $this;
    }

    /**
     * Gets value_style
     *
     * @return int|null
     */
    public function getValueStyle()
    {
        return $this->container['value_style'];
    }

    /**
     * Sets value_style
     *
     * @param int|null $value_style The UI style applied to the objective. It's an enum, take a look at DestinyUnlockValueUIStyle for details of the possible styles. Use this info as you wish to customize your UI.
     *
     * @return self
     */
    public function setValueStyle($value_style)
    {
        $this->container['value_style'] = $value_style;

        return $this;
    }

    /**
     * Gets progress_description
     *
     * @return string|null
     */
    public function getProgressDescription()
    {
        return $this->container['progress_description'];
    }

    /**
     * Sets progress_description
     *
     * @param string|null $progress_description Text to describe the progress bar.
     *
     * @return self
     */
    public function setProgressDescription($progress_description)
    {
        $this->container['progress_description'] = $progress_description;

        return $this;
    }

    /**
     * Gets perks
     *
     * @return DestinyDefinitionsDestinyObjectivePerkEntryDefinition|null
     */
    public function getPerks()
    {
        return $this->container['perks'];
    }

    /**
     * Sets perks
     *
     * @param DestinyDefinitionsDestinyObjectivePerkEntryDefinition|null $perks If this objective enables Perks intrinsically, the conditions for that enabling are defined here.
     *
     * @return self
     */
    public function setPerks($perks)
    {
        $this->container['perks'] = $perks;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return DestinyDefinitionsDestinyObjectiveStatEntryDefinition|null
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param DestinyDefinitionsDestinyObjectiveStatEntryDefinition|null $stats If this objective enables modifications on a player's stats intrinsically, the conditions are defined here.
     *
     * @return self
     */
    public function setStats($stats)
    {
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets minimum_visibility_threshold
     *
     * @return int|null
     */
    public function getMinimumVisibilityThreshold()
    {
        return $this->container['minimum_visibility_threshold'];
    }

    /**
     * Sets minimum_visibility_threshold
     *
     * @param int|null $minimum_visibility_threshold If nonzero, this is the minimum value at which the objective's progression should be shown. Otherwise, don't show it yet.
     *
     * @return self
     */
    public function setMinimumVisibilityThreshold($minimum_visibility_threshold)
    {
        $this->container['minimum_visibility_threshold'] = $minimum_visibility_threshold;

        return $this;
    }

    /**
     * Gets allow_overcompletion
     *
     * @return bool|null
     */
    public function getAllowOvercompletion()
    {
        return $this->container['allow_overcompletion'];
    }

    /**
     * Sets allow_overcompletion
     *
     * @param bool|null $allow_overcompletion If True, the progress will continue even beyond the point where the objective met its minimum completion requirements. Your UI will have to accommodate it.
     *
     * @return self
     */
    public function setAllowOvercompletion($allow_overcompletion)
    {
        $this->container['allow_overcompletion'] = $allow_overcompletion;

        return $this;
    }

    /**
     * Gets show_value_on_complete
     *
     * @return bool|null
     */
    public function getShowValueOnComplete()
    {
        return $this->container['show_value_on_complete'];
    }

    /**
     * Sets show_value_on_complete
     *
     * @param bool|null $show_value_on_complete If True, you should continue showing the progression value in the UI after it's complete. I mean, we already do that in BNet anyways, but if you want to be better behaved than us you could honor this flag.
     *
     * @return self
     */
    public function setShowValueOnComplete($show_value_on_complete)
    {
        $this->container['show_value_on_complete'] = $show_value_on_complete;

        return $this;
    }

    /**
     * Gets completed_value_style
     *
     * @return int|null
     */
    public function getCompletedValueStyle()
    {
        return $this->container['completed_value_style'];
    }

    /**
     * Sets completed_value_style
     *
     * @param int|null $completed_value_style The style to use when the objective is completed.
     *
     * @return self
     */
    public function setCompletedValueStyle($completed_value_style)
    {
        $this->container['completed_value_style'] = $completed_value_style;

        return $this;
    }

    /**
     * Gets in_progress_value_style
     *
     * @return int|null
     */
    public function getInProgressValueStyle()
    {
        return $this->container['in_progress_value_style'];
    }

    /**
     * Sets in_progress_value_style
     *
     * @param int|null $in_progress_value_style The style to use when the objective is still in progress.
     *
     * @return self
     */
    public function setInProgressValueStyle($in_progress_value_style)
    {
        $this->container['in_progress_value_style'] = $in_progress_value_style;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return int|null
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param int|null $hash The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
     *
     * @return self
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int|null
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int|null $index The index of the entity as it was found in the investment tables.
     *
     * @return self
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets redacted
     *
     * @return bool|null
     */
    public function getRedacted()
    {
        return $this->container['redacted'];
    }

    /**
     * Sets redacted
     *
     * @param bool|null $redacted If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
     *
     * @return self
     */
    public function setRedacted($redacted)
    {
        $this->container['redacted'] = $redacted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


