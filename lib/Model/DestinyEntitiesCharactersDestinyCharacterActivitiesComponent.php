<?php
/**
 * DestinyEntitiesCharactersDestinyCharacterActivitiesComponent
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyEntitiesCharactersDestinyCharacterActivitiesComponent Class Doc Comment
 *
 * @category Class
 * @description This component holds activity data for a character. It will tell you about the character&#39;s current activity status, as well as activities that are available to the user.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyEntitiesCharactersDestinyCharacterActivitiesComponent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Entities.Characters.DestinyCharacterActivitiesComponent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'date_activity_started' => '\DateTime',
        'available_activities' => '\OpenAPI\Client\Model\DestinyDestinyActivity[]',
        'current_activity_hash' => 'int',
        'current_activity_mode_hash' => 'int',
        'current_activity_mode_type' => 'int',
        'current_activity_mode_hashes' => 'int[]',
        'current_activity_mode_types' => 'int[]',
        'current_playlist_activity_hash' => 'int',
        'last_completed_story_hash' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'date_activity_started' => 'date-time',
        'available_activities' => null,
        'current_activity_hash' => 'uint32',
        'current_activity_mode_hash' => 'uint32',
        'current_activity_mode_type' => 'int32',
        'current_activity_mode_hashes' => 'uint32',
        'current_activity_mode_types' => 'int32',
        'current_playlist_activity_hash' => 'uint32',
        'last_completed_story_hash' => 'uint32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_activity_started' => 'dateActivityStarted',
        'available_activities' => 'availableActivities',
        'current_activity_hash' => 'currentActivityHash',
        'current_activity_mode_hash' => 'currentActivityModeHash',
        'current_activity_mode_type' => 'currentActivityModeType',
        'current_activity_mode_hashes' => 'currentActivityModeHashes',
        'current_activity_mode_types' => 'currentActivityModeTypes',
        'current_playlist_activity_hash' => 'currentPlaylistActivityHash',
        'last_completed_story_hash' => 'lastCompletedStoryHash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_activity_started' => 'setDateActivityStarted',
        'available_activities' => 'setAvailableActivities',
        'current_activity_hash' => 'setCurrentActivityHash',
        'current_activity_mode_hash' => 'setCurrentActivityModeHash',
        'current_activity_mode_type' => 'setCurrentActivityModeType',
        'current_activity_mode_hashes' => 'setCurrentActivityModeHashes',
        'current_activity_mode_types' => 'setCurrentActivityModeTypes',
        'current_playlist_activity_hash' => 'setCurrentPlaylistActivityHash',
        'last_completed_story_hash' => 'setLastCompletedStoryHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_activity_started' => 'getDateActivityStarted',
        'available_activities' => 'getAvailableActivities',
        'current_activity_hash' => 'getCurrentActivityHash',
        'current_activity_mode_hash' => 'getCurrentActivityModeHash',
        'current_activity_mode_type' => 'getCurrentActivityModeType',
        'current_activity_mode_hashes' => 'getCurrentActivityModeHashes',
        'current_activity_mode_types' => 'getCurrentActivityModeTypes',
        'current_playlist_activity_hash' => 'getCurrentPlaylistActivityHash',
        'last_completed_story_hash' => 'getLastCompletedStoryHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CURRENT_ACTIVITY_MODE_TYPE_0 = 0;
    const CURRENT_ACTIVITY_MODE_TYPE_2 = 2;
    const CURRENT_ACTIVITY_MODE_TYPE_3 = 3;
    const CURRENT_ACTIVITY_MODE_TYPE_4 = 4;
    const CURRENT_ACTIVITY_MODE_TYPE_5 = 5;
    const CURRENT_ACTIVITY_MODE_TYPE_6 = 6;
    const CURRENT_ACTIVITY_MODE_TYPE_7 = 7;
    const CURRENT_ACTIVITY_MODE_TYPE_9 = 9;
    const CURRENT_ACTIVITY_MODE_TYPE_10 = 10;
    const CURRENT_ACTIVITY_MODE_TYPE_11 = 11;
    const CURRENT_ACTIVITY_MODE_TYPE_12 = 12;
    const CURRENT_ACTIVITY_MODE_TYPE_13 = 13;
    const CURRENT_ACTIVITY_MODE_TYPE_15 = 15;
    const CURRENT_ACTIVITY_MODE_TYPE_16 = 16;
    const CURRENT_ACTIVITY_MODE_TYPE_17 = 17;
    const CURRENT_ACTIVITY_MODE_TYPE_18 = 18;
    const CURRENT_ACTIVITY_MODE_TYPE_19 = 19;
    const CURRENT_ACTIVITY_MODE_TYPE_20 = 20;
    const CURRENT_ACTIVITY_MODE_TYPE_21 = 21;
    const CURRENT_ACTIVITY_MODE_TYPE_22 = 22;
    const CURRENT_ACTIVITY_MODE_TYPE_24 = 24;
    const CURRENT_ACTIVITY_MODE_TYPE_25 = 25;
    const CURRENT_ACTIVITY_MODE_TYPE_26 = 26;
    const CURRENT_ACTIVITY_MODE_TYPE_27 = 27;
    const CURRENT_ACTIVITY_MODE_TYPE_28 = 28;
    const CURRENT_ACTIVITY_MODE_TYPE_29 = 29;
    const CURRENT_ACTIVITY_MODE_TYPE_30 = 30;
    const CURRENT_ACTIVITY_MODE_TYPE_31 = 31;
    const CURRENT_ACTIVITY_MODE_TYPE_32 = 32;
    const CURRENT_ACTIVITY_MODE_TYPE_37 = 37;
    const CURRENT_ACTIVITY_MODE_TYPE_38 = 38;
    const CURRENT_ACTIVITY_MODE_TYPE_39 = 39;
    const CURRENT_ACTIVITY_MODE_TYPE_40 = 40;
    const CURRENT_ACTIVITY_MODE_TYPE_41 = 41;
    const CURRENT_ACTIVITY_MODE_TYPE_42 = 42;
    const CURRENT_ACTIVITY_MODE_TYPE_43 = 43;
    const CURRENT_ACTIVITY_MODE_TYPE_44 = 44;
    const CURRENT_ACTIVITY_MODE_TYPE_45 = 45;
    const CURRENT_ACTIVITY_MODE_TYPE_46 = 46;
    const CURRENT_ACTIVITY_MODE_TYPE_47 = 47;
    const CURRENT_ACTIVITY_MODE_TYPE_48 = 48;
    const CURRENT_ACTIVITY_MODE_TYPE_49 = 49;
    const CURRENT_ACTIVITY_MODE_TYPE_50 = 50;
    const CURRENT_ACTIVITY_MODE_TYPE_51 = 51;
    const CURRENT_ACTIVITY_MODE_TYPE_52 = 52;
    const CURRENT_ACTIVITY_MODE_TYPE_53 = 53;
    const CURRENT_ACTIVITY_MODE_TYPE_54 = 54;
    const CURRENT_ACTIVITY_MODE_TYPE_55 = 55;
    const CURRENT_ACTIVITY_MODE_TYPE_56 = 56;
    const CURRENT_ACTIVITY_MODE_TYPE_57 = 57;
    const CURRENT_ACTIVITY_MODE_TYPE_58 = 58;
    const CURRENT_ACTIVITY_MODE_TYPE_59 = 59;
    const CURRENT_ACTIVITY_MODE_TYPE_60 = 60;
    const CURRENT_ACTIVITY_MODE_TYPE_61 = 61;
    const CURRENT_ACTIVITY_MODE_TYPE_62 = 62;
    const CURRENT_ACTIVITY_MODE_TYPE_63 = 63;
    const CURRENT_ACTIVITY_MODE_TYPE_64 = 64;
    const CURRENT_ACTIVITY_MODE_TYPE_65 = 65;
    const CURRENT_ACTIVITY_MODE_TYPE_66 = 66;
    const CURRENT_ACTIVITY_MODE_TYPE_67 = 67;
    const CURRENT_ACTIVITY_MODE_TYPE_68 = 68;
    const CURRENT_ACTIVITY_MODE_TYPE_69 = 69;
    const CURRENT_ACTIVITY_MODE_TYPE_70 = 70;
    const CURRENT_ACTIVITY_MODE_TYPE_71 = 71;
    const CURRENT_ACTIVITY_MODE_TYPE_72 = 72;
    const CURRENT_ACTIVITY_MODE_TYPE_73 = 73;
    const CURRENT_ACTIVITY_MODE_TYPE_74 = 74;
    const CURRENT_ACTIVITY_MODE_TYPE_75 = 75;
    const CURRENT_ACTIVITY_MODE_TYPE_76 = 76;
    const CURRENT_ACTIVITY_MODE_TYPE_77 = 77;
    const CURRENT_ACTIVITY_MODE_TYPE_78 = 78;
    const CURRENT_ACTIVITY_MODE_TYPE_79 = 79;
    const CURRENT_ACTIVITY_MODE_TYPE_80 = 80;
    const CURRENT_ACTIVITY_MODE_TYPE_81 = 81;
    const CURRENT_ACTIVITY_MODE_TYPE_82 = 82;
    const CURRENT_ACTIVITY_MODE_TYPE_83 = 83;
    const CURRENT_ACTIVITY_MODE_TYPE_84 = 84;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrentActivityModeTypeAllowableValues()
    {
        return [
            self::CURRENT_ACTIVITY_MODE_TYPE_0,
            self::CURRENT_ACTIVITY_MODE_TYPE_2,
            self::CURRENT_ACTIVITY_MODE_TYPE_3,
            self::CURRENT_ACTIVITY_MODE_TYPE_4,
            self::CURRENT_ACTIVITY_MODE_TYPE_5,
            self::CURRENT_ACTIVITY_MODE_TYPE_6,
            self::CURRENT_ACTIVITY_MODE_TYPE_7,
            self::CURRENT_ACTIVITY_MODE_TYPE_9,
            self::CURRENT_ACTIVITY_MODE_TYPE_10,
            self::CURRENT_ACTIVITY_MODE_TYPE_11,
            self::CURRENT_ACTIVITY_MODE_TYPE_12,
            self::CURRENT_ACTIVITY_MODE_TYPE_13,
            self::CURRENT_ACTIVITY_MODE_TYPE_15,
            self::CURRENT_ACTIVITY_MODE_TYPE_16,
            self::CURRENT_ACTIVITY_MODE_TYPE_17,
            self::CURRENT_ACTIVITY_MODE_TYPE_18,
            self::CURRENT_ACTIVITY_MODE_TYPE_19,
            self::CURRENT_ACTIVITY_MODE_TYPE_20,
            self::CURRENT_ACTIVITY_MODE_TYPE_21,
            self::CURRENT_ACTIVITY_MODE_TYPE_22,
            self::CURRENT_ACTIVITY_MODE_TYPE_24,
            self::CURRENT_ACTIVITY_MODE_TYPE_25,
            self::CURRENT_ACTIVITY_MODE_TYPE_26,
            self::CURRENT_ACTIVITY_MODE_TYPE_27,
            self::CURRENT_ACTIVITY_MODE_TYPE_28,
            self::CURRENT_ACTIVITY_MODE_TYPE_29,
            self::CURRENT_ACTIVITY_MODE_TYPE_30,
            self::CURRENT_ACTIVITY_MODE_TYPE_31,
            self::CURRENT_ACTIVITY_MODE_TYPE_32,
            self::CURRENT_ACTIVITY_MODE_TYPE_37,
            self::CURRENT_ACTIVITY_MODE_TYPE_38,
            self::CURRENT_ACTIVITY_MODE_TYPE_39,
            self::CURRENT_ACTIVITY_MODE_TYPE_40,
            self::CURRENT_ACTIVITY_MODE_TYPE_41,
            self::CURRENT_ACTIVITY_MODE_TYPE_42,
            self::CURRENT_ACTIVITY_MODE_TYPE_43,
            self::CURRENT_ACTIVITY_MODE_TYPE_44,
            self::CURRENT_ACTIVITY_MODE_TYPE_45,
            self::CURRENT_ACTIVITY_MODE_TYPE_46,
            self::CURRENT_ACTIVITY_MODE_TYPE_47,
            self::CURRENT_ACTIVITY_MODE_TYPE_48,
            self::CURRENT_ACTIVITY_MODE_TYPE_49,
            self::CURRENT_ACTIVITY_MODE_TYPE_50,
            self::CURRENT_ACTIVITY_MODE_TYPE_51,
            self::CURRENT_ACTIVITY_MODE_TYPE_52,
            self::CURRENT_ACTIVITY_MODE_TYPE_53,
            self::CURRENT_ACTIVITY_MODE_TYPE_54,
            self::CURRENT_ACTIVITY_MODE_TYPE_55,
            self::CURRENT_ACTIVITY_MODE_TYPE_56,
            self::CURRENT_ACTIVITY_MODE_TYPE_57,
            self::CURRENT_ACTIVITY_MODE_TYPE_58,
            self::CURRENT_ACTIVITY_MODE_TYPE_59,
            self::CURRENT_ACTIVITY_MODE_TYPE_60,
            self::CURRENT_ACTIVITY_MODE_TYPE_61,
            self::CURRENT_ACTIVITY_MODE_TYPE_62,
            self::CURRENT_ACTIVITY_MODE_TYPE_63,
            self::CURRENT_ACTIVITY_MODE_TYPE_64,
            self::CURRENT_ACTIVITY_MODE_TYPE_65,
            self::CURRENT_ACTIVITY_MODE_TYPE_66,
            self::CURRENT_ACTIVITY_MODE_TYPE_67,
            self::CURRENT_ACTIVITY_MODE_TYPE_68,
            self::CURRENT_ACTIVITY_MODE_TYPE_69,
            self::CURRENT_ACTIVITY_MODE_TYPE_70,
            self::CURRENT_ACTIVITY_MODE_TYPE_71,
            self::CURRENT_ACTIVITY_MODE_TYPE_72,
            self::CURRENT_ACTIVITY_MODE_TYPE_73,
            self::CURRENT_ACTIVITY_MODE_TYPE_74,
            self::CURRENT_ACTIVITY_MODE_TYPE_75,
            self::CURRENT_ACTIVITY_MODE_TYPE_76,
            self::CURRENT_ACTIVITY_MODE_TYPE_77,
            self::CURRENT_ACTIVITY_MODE_TYPE_78,
            self::CURRENT_ACTIVITY_MODE_TYPE_79,
            self::CURRENT_ACTIVITY_MODE_TYPE_80,
            self::CURRENT_ACTIVITY_MODE_TYPE_81,
            self::CURRENT_ACTIVITY_MODE_TYPE_82,
            self::CURRENT_ACTIVITY_MODE_TYPE_83,
            self::CURRENT_ACTIVITY_MODE_TYPE_84,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date_activity_started'] = $data['date_activity_started'] ?? null;
        $this->container['available_activities'] = $data['available_activities'] ?? null;
        $this->container['current_activity_hash'] = $data['current_activity_hash'] ?? null;
        $this->container['current_activity_mode_hash'] = $data['current_activity_mode_hash'] ?? null;
        $this->container['current_activity_mode_type'] = $data['current_activity_mode_type'] ?? null;
        $this->container['current_activity_mode_hashes'] = $data['current_activity_mode_hashes'] ?? null;
        $this->container['current_activity_mode_types'] = $data['current_activity_mode_types'] ?? null;
        $this->container['current_playlist_activity_hash'] = $data['current_playlist_activity_hash'] ?? null;
        $this->container['last_completed_story_hash'] = $data['last_completed_story_hash'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCurrentActivityModeTypeAllowableValues();
        if (!is_null($this->container['current_activity_mode_type']) && !in_array($this->container['current_activity_mode_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'current_activity_mode_type', must be one of '%s'",
                $this->container['current_activity_mode_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_activity_started
     *
     * @return \DateTime|null
     */
    public function getDateActivityStarted()
    {
        return $this->container['date_activity_started'];
    }

    /**
     * Sets date_activity_started
     *
     * @param \DateTime|null $date_activity_started The last date that the user started playing an activity.
     *
     * @return self
     */
    public function setDateActivityStarted($date_activity_started)
    {
        $this->container['date_activity_started'] = $date_activity_started;

        return $this;
    }

    /**
     * Gets available_activities
     *
     * @return \OpenAPI\Client\Model\DestinyDestinyActivity[]|null
     */
    public function getAvailableActivities()
    {
        return $this->container['available_activities'];
    }

    /**
     * Sets available_activities
     *
     * @param \OpenAPI\Client\Model\DestinyDestinyActivity[]|null $available_activities The list of activities that the user can play.
     *
     * @return self
     */
    public function setAvailableActivities($available_activities)
    {
        $this->container['available_activities'] = $available_activities;

        return $this;
    }

    /**
     * Gets current_activity_hash
     *
     * @return int|null
     */
    public function getCurrentActivityHash()
    {
        return $this->container['current_activity_hash'];
    }

    /**
     * Sets current_activity_hash
     *
     * @param int|null $current_activity_hash If the user is in an activity, this will be the hash of the Activity being played. Note that you must combine this info with currentActivityModeHash to get a real picture of what the user is doing right now. For instance, PVP \"Activities\" are just maps: it's the ActivityMode that determines what type of PVP game they're playing.
     *
     * @return self
     */
    public function setCurrentActivityHash($current_activity_hash)
    {
        $this->container['current_activity_hash'] = $current_activity_hash;

        return $this;
    }

    /**
     * Gets current_activity_mode_hash
     *
     * @return int|null
     */
    public function getCurrentActivityModeHash()
    {
        return $this->container['current_activity_mode_hash'];
    }

    /**
     * Sets current_activity_mode_hash
     *
     * @param int|null $current_activity_mode_hash If the user is in an activity, this will be the hash of the activity mode being played. Combine with currentActivityHash to give a person a full picture of what they're doing right now.
     *
     * @return self
     */
    public function setCurrentActivityModeHash($current_activity_mode_hash)
    {
        $this->container['current_activity_mode_hash'] = $current_activity_mode_hash;

        return $this;
    }

    /**
     * Gets current_activity_mode_type
     *
     * @return int|null
     */
    public function getCurrentActivityModeType()
    {
        return $this->container['current_activity_mode_type'];
    }

    /**
     * Sets current_activity_mode_type
     *
     * @param int|null $current_activity_mode_type And the current activity's most specific mode type, if it can be found.
     *
     * @return self
     */
    public function setCurrentActivityModeType($current_activity_mode_type)
    {
        $allowedValues = $this->getCurrentActivityModeTypeAllowableValues();
        if (!is_null($current_activity_mode_type) && !in_array($current_activity_mode_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'current_activity_mode_type', must be one of '%s'",
                    $current_activity_mode_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['current_activity_mode_type'] = $current_activity_mode_type;

        return $this;
    }

    /**
     * Gets current_activity_mode_hashes
     *
     * @return int[]|null
     */
    public function getCurrentActivityModeHashes()
    {
        return $this->container['current_activity_mode_hashes'];
    }

    /**
     * Sets current_activity_mode_hashes
     *
     * @param int[]|null $current_activity_mode_hashes If the user is in an activity, this will be the hashes of the DestinyActivityModeDefinition being played. Combine with currentActivityHash to give a person a full picture of what they're doing right now.
     *
     * @return self
     */
    public function setCurrentActivityModeHashes($current_activity_mode_hashes)
    {
        $this->container['current_activity_mode_hashes'] = $current_activity_mode_hashes;

        return $this;
    }

    /**
     * Gets current_activity_mode_types
     *
     * @return int[]|null
     */
    public function getCurrentActivityModeTypes()
    {
        return $this->container['current_activity_mode_types'];
    }

    /**
     * Sets current_activity_mode_types
     *
     * @param int[]|null $current_activity_mode_types All Activity Modes that apply to the current activity being played, in enum form.
     *
     * @return self
     */
    public function setCurrentActivityModeTypes($current_activity_mode_types)
    {
        $this->container['current_activity_mode_types'] = $current_activity_mode_types;

        return $this;
    }

    /**
     * Gets current_playlist_activity_hash
     *
     * @return int|null
     */
    public function getCurrentPlaylistActivityHash()
    {
        return $this->container['current_playlist_activity_hash'];
    }

    /**
     * Sets current_playlist_activity_hash
     *
     * @param int|null $current_playlist_activity_hash If the user is in a playlist, this is the hash identifier for the playlist that they chose.
     *
     * @return self
     */
    public function setCurrentPlaylistActivityHash($current_playlist_activity_hash)
    {
        $this->container['current_playlist_activity_hash'] = $current_playlist_activity_hash;

        return $this;
    }

    /**
     * Gets last_completed_story_hash
     *
     * @return int|null
     */
    public function getLastCompletedStoryHash()
    {
        return $this->container['last_completed_story_hash'];
    }

    /**
     * Sets last_completed_story_hash
     *
     * @param int|null $last_completed_story_hash This will have the activity hash of the last completed story/campaign mission, in case you care about that.
     *
     * @return self
     */
    public function setLastCompletedStoryHash($last_completed_story_hash)
    {
        $this->container['last_completed_story_hash'] = $last_completed_story_hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


