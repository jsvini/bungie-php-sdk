<?php
/**
 * GroupsV2GroupQuery
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GroupsV2GroupQuery Class Doc Comment
 *
 * @category Class
 * @description NOTE: GroupQuery, as of Destiny 2, has essentially two totally different and incompatible \&quot;modes\&quot;.  If you are querying for a group, you can pass any of the properties below.  If you are querying for a Clan, you MUST NOT pass any of the following properties (they must be null or undefined in your request, not just empty string/default values):  - groupMemberCountFilter - localeFilter - tagText  If you pass these, you will get a useless InvalidParameters error.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class GroupsV2GroupQuery implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GroupsV2.GroupQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'group_type' => 'int',
        'creation_date' => 'int',
        'sort_by' => 'int',
        'group_member_count_filter' => 'int',
        'locale_filter' => 'string',
        'tag_text' => 'string',
        'items_per_page' => 'int',
        'current_page' => 'int',
        'request_continuation_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'group_type' => 'int32',
        'creation_date' => 'int32',
        'sort_by' => 'int32',
        'group_member_count_filter' => 'int32',
        'locale_filter' => null,
        'tag_text' => null,
        'items_per_page' => 'int32',
        'current_page' => 'int32',
        'request_continuation_token' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'group_type' => 'groupType',
        'creation_date' => 'creationDate',
        'sort_by' => 'sortBy',
        'group_member_count_filter' => 'groupMemberCountFilter',
        'locale_filter' => 'localeFilter',
        'tag_text' => 'tagText',
        'items_per_page' => 'itemsPerPage',
        'current_page' => 'currentPage',
        'request_continuation_token' => 'requestContinuationToken'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'group_type' => 'setGroupType',
        'creation_date' => 'setCreationDate',
        'sort_by' => 'setSortBy',
        'group_member_count_filter' => 'setGroupMemberCountFilter',
        'locale_filter' => 'setLocaleFilter',
        'tag_text' => 'setTagText',
        'items_per_page' => 'setItemsPerPage',
        'current_page' => 'setCurrentPage',
        'request_continuation_token' => 'setRequestContinuationToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'group_type' => 'getGroupType',
        'creation_date' => 'getCreationDate',
        'sort_by' => 'getSortBy',
        'group_member_count_filter' => 'getGroupMemberCountFilter',
        'locale_filter' => 'getLocaleFilter',
        'tag_text' => 'getTagText',
        'items_per_page' => 'getItemsPerPage',
        'current_page' => 'getCurrentPage',
        'request_continuation_token' => 'getRequestContinuationToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const GROUP_MEMBER_COUNT_FILTER_0 = 0;
    const GROUP_MEMBER_COUNT_FILTER_1 = 1;
    const GROUP_MEMBER_COUNT_FILTER_2 = 2;
    const GROUP_MEMBER_COUNT_FILTER_3 = 3;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGroupMemberCountFilterAllowableValues()
    {
        return [
            self::GROUP_MEMBER_COUNT_FILTER_0,
            self::GROUP_MEMBER_COUNT_FILTER_1,
            self::GROUP_MEMBER_COUNT_FILTER_2,
            self::GROUP_MEMBER_COUNT_FILTER_3,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['group_type'] = $data['group_type'] ?? null;
        $this->container['creation_date'] = $data['creation_date'] ?? null;
        $this->container['sort_by'] = $data['sort_by'] ?? null;
        $this->container['group_member_count_filter'] = $data['group_member_count_filter'] ?? null;
        $this->container['locale_filter'] = $data['locale_filter'] ?? null;
        $this->container['tag_text'] = $data['tag_text'] ?? null;
        $this->container['items_per_page'] = $data['items_per_page'] ?? null;
        $this->container['current_page'] = $data['current_page'] ?? null;
        $this->container['request_continuation_token'] = $data['request_continuation_token'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getGroupMemberCountFilterAllowableValues();
        if (!is_null($this->container['group_member_count_filter']) && !in_array($this->container['group_member_count_filter'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'group_member_count_filter', must be one of '%s'",
                $this->container['group_member_count_filter'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets group_type
     *
     * @return int|null
     */
    public function getGroupType()
    {
        return $this->container['group_type'];
    }

    /**
     * Sets group_type
     *
     * @param int|null $group_type group_type
     *
     * @return self
     */
    public function setGroupType($group_type)
    {
        $this->container['group_type'] = $group_type;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return int|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param int|null $creation_date creation_date
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets sort_by
     *
     * @return int|null
     */
    public function getSortBy()
    {
        return $this->container['sort_by'];
    }

    /**
     * Sets sort_by
     *
     * @param int|null $sort_by sort_by
     *
     * @return self
     */
    public function setSortBy($sort_by)
    {
        $this->container['sort_by'] = $sort_by;

        return $this;
    }

    /**
     * Gets group_member_count_filter
     *
     * @return int|null
     */
    public function getGroupMemberCountFilter()
    {
        return $this->container['group_member_count_filter'];
    }

    /**
     * Sets group_member_count_filter
     *
     * @param int|null $group_member_count_filter group_member_count_filter
     *
     * @return self
     */
    public function setGroupMemberCountFilter($group_member_count_filter)
    {
        $allowedValues = $this->getGroupMemberCountFilterAllowableValues();
        if (!is_null($group_member_count_filter) && !in_array($group_member_count_filter, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'group_member_count_filter', must be one of '%s'",
                    $group_member_count_filter,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['group_member_count_filter'] = $group_member_count_filter;

        return $this;
    }

    /**
     * Gets locale_filter
     *
     * @return string|null
     */
    public function getLocaleFilter()
    {
        return $this->container['locale_filter'];
    }

    /**
     * Sets locale_filter
     *
     * @param string|null $locale_filter locale_filter
     *
     * @return self
     */
    public function setLocaleFilter($locale_filter)
    {
        $this->container['locale_filter'] = $locale_filter;

        return $this;
    }

    /**
     * Gets tag_text
     *
     * @return string|null
     */
    public function getTagText()
    {
        return $this->container['tag_text'];
    }

    /**
     * Sets tag_text
     *
     * @param string|null $tag_text tag_text
     *
     * @return self
     */
    public function setTagText($tag_text)
    {
        $this->container['tag_text'] = $tag_text;

        return $this;
    }

    /**
     * Gets items_per_page
     *
     * @return int|null
     */
    public function getItemsPerPage()
    {
        return $this->container['items_per_page'];
    }

    /**
     * Sets items_per_page
     *
     * @param int|null $items_per_page items_per_page
     *
     * @return self
     */
    public function setItemsPerPage($items_per_page)
    {
        $this->container['items_per_page'] = $items_per_page;

        return $this;
    }

    /**
     * Gets current_page
     *
     * @return int|null
     */
    public function getCurrentPage()
    {
        return $this->container['current_page'];
    }

    /**
     * Sets current_page
     *
     * @param int|null $current_page current_page
     *
     * @return self
     */
    public function setCurrentPage($current_page)
    {
        $this->container['current_page'] = $current_page;

        return $this;
    }

    /**
     * Gets request_continuation_token
     *
     * @return string|null
     */
    public function getRequestContinuationToken()
    {
        return $this->container['request_continuation_token'];
    }

    /**
     * Sets request_continuation_token
     *
     * @param string|null $request_continuation_token request_continuation_token
     *
     * @return self
     */
    public function setRequestContinuationToken($request_continuation_token)
    {
        $this->container['request_continuation_token'] = $request_continuation_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


