<?php
/**
 * DestinyComponentsProfilesDestinyProfileTransitoryComponent
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyComponentsProfilesDestinyProfileTransitoryComponent Class Doc Comment
 *
 * @category Class
 * @description This is an experimental set of data that Bungie considers to be \&quot;transitory\&quot; - information that may be useful for API users, but that is coming from a non-authoritative data source about information that could potentially change at a more frequent pace than Bungie.net will receive updates about it.  This information is provided exclusively for convenience should any of it be useful to users: we provide no guarantees to the accuracy or timeliness of data that comes from this source. Know that this data can potentially be out-of-date or even wrong entirely if the user disconnected from the game or suddenly changed their status before we can receive refreshed data.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyComponentsProfilesDestinyProfileTransitoryComponent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Components.Profiles.DestinyProfileTransitoryComponent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'party_members' => '\OpenAPI\Client\Model\DestinyComponentsProfilesDestinyProfileTransitoryPartyMember[]',
        'current_activity' => 'DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity',
        'joinability' => 'DestinyComponentsProfilesDestinyProfileTransitoryJoinability',
        'tracking' => '\OpenAPI\Client\Model\DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry[]',
        'last_orbited_destination_hash' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'party_members' => null,
        'current_activity' => null,
        'joinability' => null,
        'tracking' => null,
        'last_orbited_destination_hash' => 'uint32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'party_members' => 'partyMembers',
        'current_activity' => 'currentActivity',
        'joinability' => 'joinability',
        'tracking' => 'tracking',
        'last_orbited_destination_hash' => 'lastOrbitedDestinationHash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'party_members' => 'setPartyMembers',
        'current_activity' => 'setCurrentActivity',
        'joinability' => 'setJoinability',
        'tracking' => 'setTracking',
        'last_orbited_destination_hash' => 'setLastOrbitedDestinationHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'party_members' => 'getPartyMembers',
        'current_activity' => 'getCurrentActivity',
        'joinability' => 'getJoinability',
        'tracking' => 'getTracking',
        'last_orbited_destination_hash' => 'getLastOrbitedDestinationHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['party_members'] = $data['party_members'] ?? null;
        $this->container['current_activity'] = $data['current_activity'] ?? null;
        $this->container['joinability'] = $data['joinability'] ?? null;
        $this->container['tracking'] = $data['tracking'] ?? null;
        $this->container['last_orbited_destination_hash'] = $data['last_orbited_destination_hash'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets party_members
     *
     * @return \OpenAPI\Client\Model\DestinyComponentsProfilesDestinyProfileTransitoryPartyMember[]|null
     */
    public function getPartyMembers()
    {
        return $this->container['party_members'];
    }

    /**
     * Sets party_members
     *
     * @param \OpenAPI\Client\Model\DestinyComponentsProfilesDestinyProfileTransitoryPartyMember[]|null $party_members If you have any members currently in your party, this is some (very) bare-bones information about those members.
     *
     * @return self
     */
    public function setPartyMembers($party_members)
    {
        $this->container['party_members'] = $party_members;

        return $this;
    }

    /**
     * Gets current_activity
     *
     * @return DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity|null
     */
    public function getCurrentActivity()
    {
        return $this->container['current_activity'];
    }

    /**
     * Sets current_activity
     *
     * @param DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity|null $current_activity If you are in an activity, this is some transitory info about the activity currently being played.
     *
     * @return self
     */
    public function setCurrentActivity($current_activity)
    {
        $this->container['current_activity'] = $current_activity;

        return $this;
    }

    /**
     * Gets joinability
     *
     * @return DestinyComponentsProfilesDestinyProfileTransitoryJoinability|null
     */
    public function getJoinability()
    {
        return $this->container['joinability'];
    }

    /**
     * Sets joinability
     *
     * @param DestinyComponentsProfilesDestinyProfileTransitoryJoinability|null $joinability Information about whether and what might prevent you from joining this person on a fireteam.
     *
     * @return self
     */
    public function setJoinability($joinability)
    {
        $this->container['joinability'] = $joinability;

        return $this;
    }

    /**
     * Gets tracking
     *
     * @return \OpenAPI\Client\Model\DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry[]|null
     */
    public function getTracking()
    {
        return $this->container['tracking'];
    }

    /**
     * Sets tracking
     *
     * @param \OpenAPI\Client\Model\DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry[]|null $tracking Information about tracked entities.
     *
     * @return self
     */
    public function setTracking($tracking)
    {
        $this->container['tracking'] = $tracking;

        return $this;
    }

    /**
     * Gets last_orbited_destination_hash
     *
     * @return int|null
     */
    public function getLastOrbitedDestinationHash()
    {
        return $this->container['last_orbited_destination_hash'];
    }

    /**
     * Sets last_orbited_destination_hash
     *
     * @param int|null $last_orbited_destination_hash The hash identifier for the DestinyDestinationDefinition of the last location you were orbiting when in orbit.
     *
     * @return self
     */
    public function setLastOrbitedDestinationHash($last_orbited_destination_hash)
    {
        $this->container['last_orbited_destination_hash'] = $last_orbited_destination_hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


