<?php
/**
 * DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition Class Doc Comment
 *
 * @category Class
 * @description This is the position and other data related to nodes in the activity graph that you can click to launch activities. An Activity Graph node will only have one active Activity at a time, which will determine the activity to be launched (and, unless overrideDisplay information is provided, will also determine the tooltip and other UI related to the node)
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.Director.DestinyActivityGraphNodeDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'node_id' => 'int',
        'override_display' => 'DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition',
        'position' => 'DestinyDefinitionsCommonDestinyPositionDefinition',
        'featuring_states' => '\OpenAPI\Client\Model\DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition[]',
        'activities' => '\OpenAPI\Client\Model\DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition[]',
        'states' => '\OpenAPI\Client\Model\DestinyDefinitionsDirectorDestinyActivityGraphNodeStateEntry[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'node_id' => 'uint32',
        'override_display' => null,
        'position' => null,
        'featuring_states' => null,
        'activities' => null,
        'states' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'node_id' => 'nodeId',
        'override_display' => 'overrideDisplay',
        'position' => 'position',
        'featuring_states' => 'featuringStates',
        'activities' => 'activities',
        'states' => 'states'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'node_id' => 'setNodeId',
        'override_display' => 'setOverrideDisplay',
        'position' => 'setPosition',
        'featuring_states' => 'setFeaturingStates',
        'activities' => 'setActivities',
        'states' => 'setStates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'node_id' => 'getNodeId',
        'override_display' => 'getOverrideDisplay',
        'position' => 'getPosition',
        'featuring_states' => 'getFeaturingStates',
        'activities' => 'getActivities',
        'states' => 'getStates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['node_id'] = $data['node_id'] ?? null;
        $this->container['override_display'] = $data['override_display'] ?? null;
        $this->container['position'] = $data['position'] ?? null;
        $this->container['featuring_states'] = $data['featuring_states'] ?? null;
        $this->container['activities'] = $data['activities'] ?? null;
        $this->container['states'] = $data['states'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets node_id
     *
     * @return int|null
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     *
     * @param int|null $node_id An identifier for the Activity Graph Node, only guaranteed to be unique within its parent Activity Graph.
     *
     * @return self
     */
    public function setNodeId($node_id)
    {
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets override_display
     *
     * @return DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null
     */
    public function getOverrideDisplay()
    {
        return $this->container['override_display'];
    }

    /**
     * Sets override_display
     *
     * @param DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null $override_display The node *may* have display properties that override the active Activity's display properties.
     *
     * @return self
     */
    public function setOverrideDisplay($override_display)
    {
        $this->container['override_display'] = $override_display;

        return $this;
    }

    /**
     * Gets position
     *
     * @return DestinyDefinitionsCommonDestinyPositionDefinition|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param DestinyDefinitionsCommonDestinyPositionDefinition|null $position The position on the map for this node.
     *
     * @return self
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets featuring_states
     *
     * @return \OpenAPI\Client\Model\DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition[]|null
     */
    public function getFeaturingStates()
    {
        return $this->container['featuring_states'];
    }

    /**
     * Sets featuring_states
     *
     * @param \OpenAPI\Client\Model\DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition[]|null $featuring_states The node may have various visual accents placed on it, or styles applied. These are the list of possible styles that the Node can have. The game iterates through each, looking for the first one that passes a check of the required game/character/account state in order to show that style, and then renders the node in that style.
     *
     * @return self
     */
    public function setFeaturingStates($featuring_states)
    {
        $this->container['featuring_states'] = $featuring_states;

        return $this;
    }

    /**
     * Gets activities
     *
     * @return \OpenAPI\Client\Model\DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition[]|null
     */
    public function getActivities()
    {
        return $this->container['activities'];
    }

    /**
     * Sets activities
     *
     * @param \OpenAPI\Client\Model\DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition[]|null $activities The node may have various possible activities that could be active for it, however only one may be active at a time. See the DestinyActivityGraphNodeActivityDefinition for details.
     *
     * @return self
     */
    public function setActivities($activities)
    {
        $this->container['activities'] = $activities;

        return $this;
    }

    /**
     * Gets states
     *
     * @return \OpenAPI\Client\Model\DestinyDefinitionsDirectorDestinyActivityGraphNodeStateEntry[]|null
     */
    public function getStates()
    {
        return $this->container['states'];
    }

    /**
     * Sets states
     *
     * @param \OpenAPI\Client\Model\DestinyDefinitionsDirectorDestinyActivityGraphNodeStateEntry[]|null $states Represents possible states that the graph node can be in. These are combined with some checking that happens in the game client and server to determine which state is actually active at any given time.
     *
     * @return self
     */
    public function setStates($states)
    {
        $this->container['states'] = $states;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


