<?php
/**
 * DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition Class Doc Comment
 *
 * @category Class
 * @description Any data we need to figure out whether this Quest Item is the currently active one for the conceptual Milestone. Even just typing this description, I already regret it.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.Milestones.DestinyMilestoneQuestDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'quest_item_hash' => 'int',
        'display_properties' => 'DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition',
        'override_image' => 'string',
        'quest_rewards' => 'DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition',
        'activities' => 'map[string,\OpenAPI\Client\Model\DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition]',
        'destination_hash' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'quest_item_hash' => 'uint32',
        'display_properties' => null,
        'override_image' => null,
        'quest_rewards' => null,
        'activities' => null,
        'destination_hash' => 'uint32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'quest_item_hash' => 'questItemHash',
        'display_properties' => 'displayProperties',
        'override_image' => 'overrideImage',
        'quest_rewards' => 'questRewards',
        'activities' => 'activities',
        'destination_hash' => 'destinationHash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'quest_item_hash' => 'setQuestItemHash',
        'display_properties' => 'setDisplayProperties',
        'override_image' => 'setOverrideImage',
        'quest_rewards' => 'setQuestRewards',
        'activities' => 'setActivities',
        'destination_hash' => 'setDestinationHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'quest_item_hash' => 'getQuestItemHash',
        'display_properties' => 'getDisplayProperties',
        'override_image' => 'getOverrideImage',
        'quest_rewards' => 'getQuestRewards',
        'activities' => 'getActivities',
        'destination_hash' => 'getDestinationHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['quest_item_hash'] = $data['quest_item_hash'] ?? null;
        $this->container['display_properties'] = $data['display_properties'] ?? null;
        $this->container['override_image'] = $data['override_image'] ?? null;
        $this->container['quest_rewards'] = $data['quest_rewards'] ?? null;
        $this->container['activities'] = $data['activities'] ?? null;
        $this->container['destination_hash'] = $data['destination_hash'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets quest_item_hash
     *
     * @return int|null
     */
    public function getQuestItemHash()
    {
        return $this->container['quest_item_hash'];
    }

    /**
     * Sets quest_item_hash
     *
     * @param int|null $quest_item_hash The item representing this Milestone quest. Use this hash to look up the DestinyInventoryItemDefinition for the quest to find its steps and human readable data.
     *
     * @return self
     */
    public function setQuestItemHash($quest_item_hash)
    {
        $this->container['quest_item_hash'] = $quest_item_hash;

        return $this;
    }

    /**
     * Gets display_properties
     *
     * @return DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null
     */
    public function getDisplayProperties()
    {
        return $this->container['display_properties'];
    }

    /**
     * Sets display_properties
     *
     * @param DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null $display_properties The individual quests may have different definitions from the overall milestone: if there's a specific active quest, use these displayProperties instead of that of the overall DestinyMilestoneDefinition.
     *
     * @return self
     */
    public function setDisplayProperties($display_properties)
    {
        $this->container['display_properties'] = $display_properties;

        return $this;
    }

    /**
     * Gets override_image
     *
     * @return string|null
     */
    public function getOverrideImage()
    {
        return $this->container['override_image'];
    }

    /**
     * Sets override_image
     *
     * @param string|null $override_image If populated, this image can be shown instead of the generic milestone's image when this quest is live, or it can be used to show a background image for the quest itself that differs from that of the Activity or the Milestone.
     *
     * @return self
     */
    public function setOverrideImage($override_image)
    {
        $this->container['override_image'] = $override_image;

        return $this;
    }

    /**
     * Gets quest_rewards
     *
     * @return DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition|null
     */
    public function getQuestRewards()
    {
        return $this->container['quest_rewards'];
    }

    /**
     * Sets quest_rewards
     *
     * @param DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition|null $quest_rewards The rewards you will get for completing this quest, as best as we could extract them from our data. Sometimes, it'll be a decent amount of data. Sometimes, it's going to be sucky. Sorry.
     *
     * @return self
     */
    public function setQuestRewards($quest_rewards)
    {
        $this->container['quest_rewards'] = $quest_rewards;

        return $this;
    }

    /**
     * Gets activities
     *
     * @return map[string,\OpenAPI\Client\Model\DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition]|null
     */
    public function getActivities()
    {
        return $this->container['activities'];
    }

    /**
     * Sets activities
     *
     * @param map[string,\OpenAPI\Client\Model\DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition]|null $activities The full set of all possible \"conceptual activities\" that are related to this Milestone. Tiers or alternative modes of play within these conceptual activities will be defined as sub-entities. Keyed by the Conceptual Activity Hash. Use the key to look up DestinyActivityDefinition.
     *
     * @return self
     */
    public function setActivities($activities)
    {
        $this->container['activities'] = $activities;

        return $this;
    }

    /**
     * Gets destination_hash
     *
     * @return int|null
     */
    public function getDestinationHash()
    {
        return $this->container['destination_hash'];
    }

    /**
     * Sets destination_hash
     *
     * @param int|null $destination_hash Sometimes, a Milestone's quest is related to an entire Destination rather than a specific activity. In that situation, this will be the hash of that Destination. Hotspots are currently the only Milestones that expose this data, but that does not preclude this data from being returned for other Milestones in the future.
     *
     * @return self
     */
    public function setDestinationHash($destination_hash)
    {
        $this->container['destination_hash'] = $destination_hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


